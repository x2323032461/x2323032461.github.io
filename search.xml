<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文件结构</title>
    <url>/2021/02/23/etc/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><h3 id="etc-其他"><a href="#etc-其他" class="headerlink" title="etc  其他"></a>etc  其他</h3><p>一般用来存放配置文件</p>
<a id="more"></a>



<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="md"><a href="#md" class="headerlink" title=".md"></a>.md</h3><p>用来标注Markdown文件</p>
<h3 id="ios"><a href="#ios" class="headerlink" title=".ios"></a>.ios</h3><p>一种光盘（CD）上的文件系统格式。简单地说，就是数据在数据光盘上的组织形式</p>
<p><img src="image-20210303093655987.png" alt="image-20210303093655987"></p>
<h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><h3 id="C-S"><a href="#C-S" class="headerlink" title="C/S"></a>C/S</h3><p>Client-Server（服务器-客户机）</p>
<p><img src="20151230125752551.png" alt="img"></p>
<h3 id="B-S"><a href="#B-S" class="headerlink" title="B/S"></a>B/S</h3><p>Browser-Server，B/S结构即浏览器和服务器结构。</p>
<p><img src="20151230125834981.png" alt="img"></p>
]]></content>
      <categories>
        <category>etc</category>
      </categories>
      <tags>
        <tag>文件结构</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2021/04/28/maven/0.%20maven/</url>
    <content><![CDATA[<h1 id="设置阿里镜像"><a href="#设置阿里镜像" class="headerlink" title="设置阿里镜像"></a>设置阿里镜像</h1><h2 id="1、针对所有项目修改中央仓库"><a href="#1、针对所有项目修改中央仓库" class="headerlink" title="1、针对所有项目修改中央仓库"></a>1、针对所有项目修改中央仓库</h2><p>Maven 提供了全局配置文件 <code>settings.xml</code> 针对所有项目有效，位置是在安装目录 <code>conf</code> 下。可以将 settings.xml 文件拷贝到当前用户目录 .m2 下，此时只针对当前用户用效。 在 settings.xml 下找到 <code>&lt;mirrors&gt;</code> 节点，并在节点下增加镜像配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>![img](0. maven/905105309813.png)</p>
<p>- id：唯一标识一个镜像</p>
<p>- name：镜像名称</p>
<p>- url：镜像地址</p>
<p>- mirrorOf：代表一个镜像的替代位置，例如central就表示代替官方的中央仓库</p>
<h2 id="2、分别给每个项目配置不同的中央仓库"><a href="#2、分别给每个项目配置不同的中央仓库" class="headerlink" title="2、分别给每个项目配置不同的中央仓库"></a>2、分别给每个项目配置不同的中央仓库</h2><p>Maven 可以针对每个项目配置不同的中央仓库，在项目 <code>pom.xml &lt;repositories&gt;</code> 节点下增加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="让maven使用Java8进行编译"><a href="#让maven使用Java8进行编译" class="headerlink" title="让maven使用Java8进行编译"></a>让maven使用Java8进行编译</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>






















]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven-引入</tag>
      </tags>
  </entry>
  <entry>
    <title>引入</title>
    <url>/2021/04/28/maven/0.%20%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SpringSecurity-权限框架"><a href="#SpringSecurity-权限框架" class="headerlink" title="SpringSecurity  权限框架"></a>SpringSecurity  权限框架</h1><a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="thymeleaf-前端模板引擎"><a href="#thymeleaf-前端模板引擎" class="headerlink" title="thymeleaf 前端模板引擎"></a>thymeleaf 前端模板引擎</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="SpringSecurity-thymeleaf-二者整合做权限处理"><a href="#SpringSecurity-thymeleaf-二者整合做权限处理" class="headerlink" title="SpringSecurity - thymeleaf 二者整合做权限处理"></a>SpringSecurity - thymeleaf 二者整合做权限处理</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf-extras-springsecurity4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="DateTime-日期处理"><a href="#DateTime-日期处理" class="headerlink" title="DateTime 日期处理"></a>DateTime 日期处理</h1><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-获取对象"><a href="#2-获取对象" class="headerlink" title="2. 获取对象"></a>2. 获取对象</h2><p>DateTime now = new DateTime();</p>
<h2 id="3-获取事件最大值"><a href="#3-获取事件最大值" class="headerlink" title="3. 获取事件最大值"></a>3. 获取事件最大值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取一天有多少小时</span></span><br><span class="line"><span class="keyword">int</span> maxHour = now.getHourOfDay();</span><br><span class="line"><span class="comment">// 获取一小时有多少分钟</span></span><br><span class="line"><span class="keyword">int</span> maxMillis = now.getMinuteOfHour();</span><br><span class="line"><span class="comment">// 获取一分钟有多少秒</span></span><br><span class="line"><span class="keyword">int</span> maxSeconds = now.getSecondOfMinute();</span><br></pre></td></tr></table></figure>


<h2 id="4-日期运算"><a href="#4-日期运算" class="headerlink" title="4. 日期运算"></a>4. 日期运算</h2><blockquote>
<p>now 的 plus 运算</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加运算  当前日期 -1</span></span><br><span class="line">now.plusHours(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减运算  当前日期 -1</span></span><br><span class="line">now.plusHours(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期加一个Long值</span></span><br><span class="line">now.plus(<span class="number">1000L</span>);</span><br></pre></td></tr></table></figure>


<p><code>所有plus方法均会返回DateTime对象，因此可使用链式编程进行运算</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">now.plusHours(<span class="number">1</span>).plusMinutes(<span class="number">1</span>).plusSeconds(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<h2 id="5-格式化"><a href="#5-格式化" class="headerlink" title="5. 格式化"></a>5. 格式化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">now.toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="Jackson-json数据处理"><a href="#Jackson-json数据处理" class="headerlink" title="Jackson json数据处理"></a>Jackson json数据处理</h1><h2 id="1-依赖-1"><a href="#1-依赖-1" class="headerlink" title="1. 依赖"></a>1. 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-项目中用到的jar包"><a href="#2-项目中用到的jar包" class="headerlink" title="2. 项目中用到的jar包"></a>2. 项目中用到的jar包</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParseException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonMappingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.schema.Entry;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure>


<h2 id="3-JsonNode使用"><a href="#3-JsonNode使用" class="headerlink" title="3. JsonNode使用"></a>3. JsonNode使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map操作</span></span><br><span class="line">String json = <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;tom\&quot;,\&quot;company\&quot;:&#123;\&quot;companyName\&quot;:\&quot;中华\&quot;,\&quot;address\&quot;:\&quot;北京\&quot;&#125;,\&quot;cars\&quot;:[\&quot;奔驰\&quot;,\&quot;宝马\&quot;]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">JsonNode jsonNode = mapper.readTree(json);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有节点（迭代器）</span></span><br><span class="line">Iterator&lt;String&gt; stringIterator = jsonNode.fieldNames();</span><br><span class="line"><span class="keyword">while</span>(stringIterator.hasNext()) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;key 为：&quot;</span>);</span><br><span class="line">    System.out.println(stringIterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取username节点的值</span></span><br><span class="line">JsonNode path = jsonNode.path(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">JsonNode resultValue = jsonNode.findValue(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">JsonNode resultPath = jsonNode.findPath(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;path&quot;</span> + path);</span><br><span class="line">System.out.println(<span class="string">&quot;findValue&quot;</span> + resultValue);</span><br><span class="line">System.out.println(<span class="string">&quot;findPath&quot;</span> + resultPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有包含有key为username的节点</span></span><br><span class="line"><span class="comment">// findKeys:&#123;&quot;username&quot;:&quot;tom&quot;,&quot;company&quot;:&#123;&quot;companyName&quot;:&quot;中华&quot;,&quot;address&quot;:&quot;北京&quot;,&quot;username&quot;:&quot;北京1&quot;&#125;,&quot;cars&quot;:[&quot;奔驰&quot;,&quot;宝马&quot;]&#125;</span></span><br><span class="line"><span class="comment">// findKeys:&#123;&quot;companyName&quot;:&quot;中华&quot;,&quot;address&quot;:&quot;北京&quot;,&quot;username&quot;:&quot;北京1&quot;&#125;</span></span><br><span class="line">List&lt;JsonNode&gt; findKeys = jsonNode.findParents(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (JsonNode result:findKeys)&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;findKeys:&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有key为username的节点的值</span></span><br><span class="line"><span class="comment">// findValues:&quot;tom&quot;</span></span><br><span class="line"><span class="comment">// findValues:&quot;北京1&quot;</span></span><br><span class="line">List&lt;JsonNode&gt; findValues = jsonNode.findValues(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(JsonNode value: findValues)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;findValues:&quot;</span> + value.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历某个JsonNode的key和value(value可能是字符串也可能是子jsonNode，但如果value是jsonNode数组的话，是无法读取的)</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;String,JsonNode&gt;&gt; jsonNodes = jsonNode.fields();</span><br><span class="line"><span class="keyword">while</span> (jsonNodes.hasNext()) &#123;</span><br><span class="line">	Map.Entry&lt;String, JsonNode&gt; node = jsonNodes.next();</span><br><span class="line">    System.err.println(<span class="string">&quot;遍历获取key:&quot;</span>+node.getKey());</span><br><span class="line">    System.err.println(<span class="string">&quot;遍历获取值:&quot;</span>+node.getValue().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JsonNode对象转换成JSON字符串</span></span><br><span class="line">String jsonStr = mapper.writeValueAsString(jsonNode);</span><br><span class="line">System.out.println(<span class="string">&quot;JsonNode---&gt;Json:&quot;</span>+jsonStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list操作</span></span><br><span class="line">String arrayJson = <span class="string">&quot;[&#123;\&quot;number\&quot;:64,\&quot;result\&quot;:\&quot;SUCCESS\&quot;&#125;,&#123;\&quot;number\&quot;:65,\&quot;result\&quot;:\&quot;FAILURE\&quot;&#125;,&#123;\&quot;number\&quot;:66,\&quot;result\&quot;:\&quot;ABORTED\&quot;&#125;,&#123;\&quot;number\&quot;:67,\&quot;result\&quot;:\&quot;SUCCESS\&quot;&#125;]&quot;</span>;</span><br><span class="line">JsonNode arrayNodes = <span class="keyword">new</span> ObjectMapper().readTree(arrayJson);</span><br><span class="line"><span class="keyword">if</span> (arrayNodes.isArray()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (JsonNode arrayNode : arrayNodes) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;arrayNode:&quot;</span> + arrayNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-json字符串转换成JsonObject对象"><a href="#4-json字符串转换成JsonObject对象" class="headerlink" title="4. json字符串转换成JsonObject对象"></a>4. json字符串转换成JsonObject对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String studentJson = <span class="string">&quot;&#123;\&quot;stuId\&quot;:\&quot;116\&quot;,\&quot;stuName\&quot;:\&quot;赵云\&quot;,\&quot;stuAddress\&quot;:\&quot;常山\&quot;,\&quot;stuIQ\&quot;:\&quot;93\&quot;&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">JSONObject object = JSON.parseObject(studentJson);</span><br><span class="line"><span class="comment">// JsonObject对象转换成JavaBean</span></span><br><span class="line">Student student = object.toJavaObject(Student.class);</span><br><span class="line"><span class="comment">// json字符串转换成JavaBean</span></span><br><span class="line">Student stu = JSON.parseObject(studentJson,Student.class);</span><br><span class="line"><span class="comment">// JsonObject对象根据key获取对应的值</span></span><br><span class="line">String name = object.getString(<span class="string">&quot;stuName&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="5-对象转JSON字符串"><a href="#5-对象转JSON字符串" class="headerlink" title="5. 对象转JSON字符串"></a>5. 对象转JSON字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String s = mapper.writeValueAsString(<span class="keyword">new</span> Object());</span><br></pre></td></tr></table></figure>


<h2 id="5-其他方法"><a href="#5-其他方法" class="headerlink" title="5. 其他方法"></a>5. 其他方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把JSON文本parse为JSONObject或者JSONArray</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title">parse</span><span class="params">(String text)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 把JSON文本parse成JSONArray</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JSONArray <span class="title">parseArray</span><span class="params">(String text)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//把JSON文本parse成JavaBean集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">parseArray</span><span class="params">(String text, Class&lt;T&gt; clazz)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将JavaBean序列化为JSON文本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">toJSONString</span><span class="params">(Object object)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将JavaBean序列化为带格式的JSON文本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">toJSONString</span><span class="params">(Object object, <span class="keyword">boolean</span> prettyFormat)</span></span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将JavaBean转换为JSONObject或者JSONArray。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title">toJSON</span><span class="params">(Object javaObject)</span></span>; </span><br></pre></td></tr></table></figure>


<h1 id="RandomUtils-各种类型随机数"><a href="#RandomUtils-各种类型随机数" class="headerlink" title="RandomUtils 各种类型随机数"></a>RandomUtils 各种类型随机数</h1><h2 id="1-依赖-2"><a href="#1-依赖-2" class="headerlink" title="1. 依赖"></a>1. 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p>分为给定范围及无范围</p>
<p>可随机生成long、boolean、int、bytes、double及float</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成随机Long</span></span><br><span class="line">RandomUtils.nextLong(起始值, 截止值)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机boolean</span></span><br><span class="line">RandomUtils.nextBoolean()</span><br></pre></td></tr></table></figure>


<h1 id="SpringBoot中RestController等的依赖"><a href="#SpringBoot中RestController等的依赖" class="headerlink" title="SpringBoot中RestController等的依赖"></a>SpringBoot中RestController等的依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="hutool-各种工具类"><a href="#hutool-各种工具类" class="headerlink" title="hutool 各种工具类"></a>hutool 各种工具类</h1><p><a href="https://www.hutool.cn/">https://www.hutool.cn/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>












]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven-引入</tag>
      </tags>
  </entry>
  <entry>
    <title>maven环境下创建多模块项目</title>
    <url>/2021/04/28/maven/1.%20maven%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%9B%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<p>Maven多模块项目,适用于一些比较大的项目，通过合理的模块拆分，实现代码的复用，便于维护和管理。尤其是一些开源框架，也是采用多模块的方式，提供插件集成，用户可以根据需要配置指定的模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　项目结构如下：</span><br><span class="line"></span><br><span class="line">  　　　　test-hd-parent 　　(父级)</span><br><span class="line">       　　　　  ---pom.xml</span><br><span class="line">       　　　　  ---test-hd-api   　　　    (第三方接口层)</span><br><span class="line">            　　　　　　  ----pom.xml    </span><br><span class="line">    　　　　　  ---test-hd-foundation     (基础工具层)</span><br><span class="line">            　　　　　　  ----pom.xml</span><br><span class="line">       　　　　  ---test-hd-resource　    (资源层) </span><br><span class="line">              　　　　　　----pom.xml</span><br><span class="line">       　　　　  ---test-hd-service  　　   (逻辑业务层)</span><br><span class="line">            　　　　　　  ----pom.xml</span><br><span class="line">    　　　　　  ---test-hd-modules  　　 (web层)</span><br><span class="line">              　　　　　　----pom.xml</span><br><span class="line">     　　　　 　　  　　---test-hd-www   　　  　　(web模块1)</span><br><span class="line">                  　　　　　  　　 ----pom.xml</span><br><span class="line">     　　　　 　　  　　---test-hd-admin 　　   　　(web模块2)</span><br><span class="line">                  　　　　　  　　 ----pom.xml　　</span><br></pre></td></tr></table></figure>


<p>让每个模块独立,高内聚,低耦合.不同模块之间保持自己的完整性.</p>
<p>可以互相不干扰.方便以后的维护开发</p>
<p>子模块可以使用父模块的依赖</p>
<h2 id="依赖共享关系："><a href="#依赖共享关系：" class="headerlink" title="依赖共享关系："></a>依赖共享关系：</h2><h3 id="1-子模块可以使用父模块的依赖："><a href="#1-子模块可以使用父模块的依赖：" class="headerlink" title="1. 子模块可以使用父模块的依赖："></a>1. 子模块可以使用父模块的依赖：</h3><p>当父模块存在依赖时，若子模块还要添加该依赖则会有重复警告</p>
<p><img src="image-20210429133141627.png" alt="image-20210429133141627"></p>
<h3 id="2-兄弟模块之间无法共享依赖："><a href="#2-兄弟模块之间无法共享依赖：" class="headerlink" title="2. 兄弟模块之间无法共享依赖："></a>2. 兄弟模块之间无法共享依赖：</h3><p>因此多个模块使用的依赖可以提到父模块中</p>
<h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>两个模块不能相互依赖，否则效果类似死循环</p>
<p>会报错 ：</p>
<p><code>Error:java: Annotation processing is not supported for module cycles. Please ensure that all modules from cycle [user-manage,utils] are excluded from annotation processing</code></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="1-创建父maven项目"><a href="#1-创建父maven项目" class="headerlink" title="1. 创建父maven项目"></a>1. 创建父maven项目</h2><p><img src="image-20210428163451788.png" alt="image-20210428163451788"></p>
<h2 id="2-删除父模块中的src目录"><a href="#2-删除父模块中的src目录" class="headerlink" title="2.删除父模块中的src目录"></a>2.删除父模块中的src目录</h2><h2 id="3-创建子模块"><a href="#3-创建子模块" class="headerlink" title="3. 创建子模块"></a>3. 创建子模块</h2><p><img src="image-20210428091646944.png" alt="image-20210428091646944"></p>
<p>点击modules –&gt; New Module创建子模块</p>
<p><img src="image-20210428091749905.png" alt="image-20210428091749905"></p>
<p>选择maven 选中 Create from archetype 复选框 选择maven模板 点击Next ，若为普通模块则不需要勾选</p>
<p><img src="image-20210428092100226.png" alt="image-20210428092100226"></p>
<p>选择父模块，修改模块名</p>
<p><img src="image-20210428170856216.png" alt="image-20210428170856216"></p>
<p>配置maven信息</p>
<p><img src="image-20210428170928332.png" alt="image-20210428170928332"></p>
<h1 id="子模块调用另一个子模块的方法"><a href="#子模块调用另一个子模块的方法" class="headerlink" title="子模块调用另一个子模块的方法"></a>子模块调用另一个子模块的方法</h1><p>如：user模块调用utils模块的方法</p>
<h2 id="1-首先为utils模块添加版本"><a href="#1-首先为utils模块添加版本" class="headerlink" title="1. 首先为utils模块添加版本"></a>1. 首先为utils模块添加版本</h2><p><code>如：&lt;version&gt;0.0.1&lt;/version&gt;</code></p>
<p><img src="image-20210430094742964.png" alt="image-20210430094742964"></p>
<h2 id="2-user模块中引入utils模块"><a href="#2-user模块中引入utils模块" class="headerlink" title="2. user模块中引入utils模块"></a>2. user模块中引入utils模块</h2><p>必须要有<code>&lt;scope&gt;compile&lt;/scope&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yoga<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>对应关系</p>
<p><img src="image-20210430095508827.png" alt="image-20210430095508827"></p>
<h2 id="3-此时就可以正常使用了"><a href="#3-此时就可以正常使用了" class="headerlink" title="3. 此时就可以正常使用了"></a>3. 此时就可以正常使用了</h2>]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>lombok</title>
    <url>/2021/04/30/maven/2.%20lombok/</url>
    <content><![CDATA[<h1 id="IDEA-中启用-lombok"><a href="#IDEA-中启用-lombok" class="headerlink" title="IDEA 中启用 lombok"></a>IDEA 中启用 lombok</h1><a id="more"></a>

<p>IDEA（版本：2020.1）中使用 lombok 有几个以下前提：</p>
<ol>
<li>IDEA 安装了 lombok 插件，具体安装方法如下：File =&gt; Settings =&gt; Plugins =&gt; Marketplace。在 Marketplace 中搜索 lombok 并安装，安装成功后 lombok 会显示在 installed 标签下（如下图）</li>
</ol>
<p>　　<img src="lombok/clipboard.png" alt="img"></p>
<p><img src="lombok/clipboard-1619763403327.png" alt="img"></p>
<ol start="2">
<li>启用了 Annotation processing，启用方法：File =&gt; Settings =&gt; Build, Execution, Deployment =&gt; Compiler =&gt; Annotation Processors =&gt; Enable annotation processing（如图）</li>
</ol>
<p>　　</p>
<p><img src="lombok/0-1397199625.png" alt="img"></p>
<ol start="3">
<li>导入 lombok 包或引入 lombok 依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>@Setter</p>
<p>@Getter</p>
<p>@ToString</p>
<p>@EqualsAndHashCode</p>
<p>@Data  作用相当于 @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode的合集。</p>
<p>@Log</p>
<p>@Log 省去了在LombokTest中添加 getLogger的如下代码： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.logging.Logger log = java.util.logging.Logger.getLogger(LombokTest.class.getName());</span><br></pre></td></tr></table></figure>
<p>@Slf4j  更省略的Log</p>
]]></content>
  </entry>
  <entry>
    <title>前端报错汇总</title>
    <url>/2021/02/22/web/%E5%89%8D%E7%AB%AF%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h3><p><strong>net::ERR_CONNECTION_REFUSED</strong></p>
<a id="more"></a>

<p>错误连接被拒绝</p>
<p>1，有可能是网络原因   2，有可能是请求地址错误</p>
<h3 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h3><p>4**</p>
<table>
<thead>
<tr>
<th>常用错误码</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>400</td>
<td>参数有误</td>
</tr>
<tr>
<td>401</td>
<td>需要进行身份认证</td>
</tr>
<tr>
<td>403</td>
<td>请求没问题，但是后台拒绝响应，可能为身份未认证或其他原因(后台可以告诉也可以不告诉)</td>
</tr>
<tr>
<td>404</td>
<td>资源无法找到</td>
</tr>
</tbody></table>
<p><strong>详细错误码</strong></p>
<table>
<thead>
<tr>
<th>错误码</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td>400 Bad_Request</td>
<td>1. 语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求；2. 请求参数有误。</td>
</tr>
<tr>
<td>401 Unauthorized</td>
<td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td>
</tr>
<tr>
<td>402 Payment Required</td>
<td>该状态码是为了将来可能的需求而预留的。</td>
</tr>
<tr>
<td>403 Forbidden</td>
<td>服务器已经理解请求，但是拒绝执行它，与401不同的是，401并不能提供任何帮助，而403如果这不是一个 HEAD 请求，服务器希望能够讲清楚为何请求不能被执行，那么就可以在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td>
</tr>
<tr>
<td>404 Not_Found</td>
<td>请求失败，请求所希望得到的资源未被在服务器上发现。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。</td>
</tr>
<tr>
<td>405 Method Not Allowed</td>
<td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td>
</tr>
<tr>
<td>406 Not Acceptable</td>
<td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。  除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。<br />实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td>
</tr>
<tr>
<td>407 Proxy Authentication Required</td>
<td>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。</td>
</tr>
<tr>
<td>408 Request Timeout</td>
<td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td>
</tr>
<tr>
<td>409 Conflict</td>
<td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。<br />冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td>
</tr>
<tr>
<td>410 Gone</td>
<td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用<a href="https://baike.baidu.com/item/404%E7%8A%B6%E6%80%81%E7%A0%81/12678394">404状态码</a>。除非额外说明，否则这个响应是可缓存的。<br />410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td>
</tr>
<tr>
<td>411 Length Required</td>
<td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td>
</tr>
<tr>
<td>412 Precondition Failed</td>
<td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td>
</tr>
<tr>
<td>413 Request Entity Too Large</td>
<td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。<br />如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td>
</tr>
<tr>
<td>414 Request-URI Too Long</td>
<td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：<br />本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。<br />重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。<br />客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生<a href="https://baike.baidu.com/item/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/678453">缓冲区溢出</a>，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td>
</tr>
<tr>
<td>415 Unsupported Media Type</td>
<td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td>
</tr>
<tr>
<td>416 Requested Range Not Satisfiable</td>
<td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。<br />假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</td>
</tr>
<tr>
<td>417 Expectation Failed</td>
<td>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td>
</tr>
<tr>
<td>418 I’m a teapot</td>
<td></td>
</tr>
<tr>
<td>421 Misdirected Request</td>
<td>请求被指向到无法生成响应的服务器（比如由于连接重复使用）</td>
</tr>
<tr>
<td>422 Unprocessable Entity</td>
<td>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td>423 Locked</td>
<td>当前资源被锁定。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td>424 Failed Dependency</td>
<td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td>425 Too Early</td>
<td>状态码 425 Too Early 代表服务器不愿意冒风险来处理该请求，原因是处理该请求可能会被“重放”，从而造成潜在的重放攻击。（RFC 8470） [1]</td>
</tr>
<tr>
<td>426 Upgrade Required</td>
<td>客户端应当切换到TLS/1.0。（RFC 2817）</td>
</tr>
<tr>
<td>449 Retry With</td>
<td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td>
</tr>
<tr>
<td>451 Unavailable For Legal Reasons</td>
<td>该请求因法律原因不可用。（RFC 7725）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>收藏</title>
    <url>/2021/03/18/%E6%94%B6%E8%97%8F/%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><a id="more"></a>

<p>前端UI框架</p>
<p>bootstrap</p>
<p>Ant Design  蚂蚁金服</p>
<p><a href="https://ant-design.gitee.io/index-cn">https://ant-design.gitee.io/index-cn</a></p>
<p>Element UI</p>
<p>学习PDF下载</p>
<p><a href="http://www.java1234.com/">http://www.java1234.com/</a></p>
<p>maven库</p>
<p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<p>淘宝镜像站</p>
<p><a href="https://developer.aliyun.com/mirror/?spm=a2c6h.14029880.0.d1002.735975d7bRRK09">https://developer.aliyun.com/mirror/?spm=a2c6h.14029880.0.d1002.735975d7bRRK09</a></p>
<p><a href="https://mirrors.aliyun.com/centos/8/isos/x86_64/">https://mirrors.aliyun.com/centos/8/isos/x86_64/</a></p>
<p>OSCHINA(类CSDN)</p>
<p><a href="https://www.oschina.net/">https://www.oschina.net/</a></p>
<p>手机vpn</p>
<p><a href="https://www.haoxixin.com/cn/?a=ez">https://www.haoxixin.com/cn/?a=ez</a></p>
<p>DeepNude</p>
<p><a href="https://www.fujieace.com/jingyan/deepnude2-0.html">https://www.fujieace.com/jingyan/deepnude2-0.html</a></p>
<p>破解资源下载</p>
<p><a href="http://www.fulinian.com/">http://www.fulinian.com/</a></p>
<p>google应用商店</p>
<p><a href="https://chrome.google.com/webstore/category/extensions?hl=zh">https://chrome.google.com/webstore/category/extensions?hl=zh</a></p>
<p>小白盘</p>
<p>度盘资源搜索的网站，能够搜索电影、电视剧、小说、音乐等资源</p>
<p>网站：<a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com</a></p>
<p>优品PPT</p>
<p>高品质免费PPT模板下载网站，比第一PPT质量高很多。</p>
<p>网站：<a href="http://www.ypppt.com/">http://www.ypppt.com</a></p>
<p><strong>1.12</strong> <strong>导航网</strong></p>
<p><a href="https://www.bootcss.com/">https://www.bootcss.com/</a></p>
<p>多种资源 </p>
<p><a href="https://tool.lu/">https://tool.lu/</a></p>
<p>程序员面试题库</p>
<p>LeetCode（力扣）</p>
<p>力扣题库，提供海量技术面试资源。</p>
<p>网站：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p>
<p>图表</p>
<p><a href="http://echarts.apache.org/zh/index.html">http://echarts.apache.org/zh/index.html</a></p>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><p><a href="https://gitee.com/opensource-guide/guide/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E5%88%9D%E8%AF%86%E5%BC%80%E6%BA%90/%E7%AC%AC%202%20%E5%B0%8F%E8%8A%82%EF%BC%9A%E5%BC%80%E6%BA%90%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF/#%E5%89%8D%E8%A8%80">https://gitee.com/opensource-guide/guide/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E5%88%9D%E8%AF%86%E5%BC%80%E6%BA%90/%E7%AC%AC%202%20%E5%B0%8F%E8%8A%82%EF%BC%9A%E5%BC%80%E6%BA%90%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF/#%E5%89%8D%E8%A8%80</a></p>
<h2 id="免费bootstarp静态页面"><a href="#免费bootstarp静态页面" class="headerlink" title="免费bootstarp静态页面"></a>免费bootstarp静态页面</h2><p><a href="https://sc.chinaz.com/moban/">https://sc.chinaz.com/moban/</a></p>
<h1 id="门户网站"><a href="#门户网站" class="headerlink" title="门户网站"></a>门户网站</h1><p>流程图</p>
<p><a href="https://www.processon.com/">https://www.processon.com</a></p>
<p>语雀</p>
<p><a href="https://www.yuque.com/dashboard/explore/events">https://www.yuque.com/dashboard/explore/events</a></p>
<p>极客计算机科学门户网</p>
<p><a href="https://www.geeksforgeeks.org/">https://www.geeksforgeeks.org/</a></p>
<p>百度云盘资源搜索</p>
<p><a href="https://www.torrent.org.cn/bd">https://www.torrent.org.cn/bd</a></p>
<h1 id="编程学习"><a href="#编程学习" class="headerlink" title="编程学习"></a>编程学习</h1><p>前端学习导图</p>
<p><a href="https://juejin.cn/post/6905913850709671944">https://juejin.cn/post/6905913850709671944</a></p>
<p>数据结构可视化演示</p>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>
<p>学习网(狂神)</p>
<p><a href="https://www.kuangstudy.com/">https://www.kuangstudy.com/</a></p>
<p>java链式编程</p>
<p><a href="https://blog.csdn.net/u013822349/article/details/81128307">https://blog.csdn.net/u013822349/article/details/81128307</a></p>
<p>mysql铁律</p>
<p><a href="https://blog.csdn.net/smartbetter/article/details/100160069">https://blog.csdn.net/smartbetter/article/details/100160069</a></p>
<p>前端教程</p>
<p><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a></p>
<p>redis书籍</p>
<p><a href="https://try.redis.io/">https://try.redis.io/</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>数据库排名</p>
<p><a href="https://db-engines.com/">https://db-engines.com</a></p>
<p><strong>1.1</strong>  <strong>搜索引擎</strong></p>
<p>1.1、秘迹搜索</p>
<p>一款无敌有良心、无敌安全的搜索引擎，不会收集私人信息，保护私隐，没有Cookie，并且秘迹搜索聚合了百度、360、Bing、搜狗等搜索结果。</p>
<p>网站：<a href="https://mijisou.com/">https://mijisou.com</a></p>
<p>ymdd17</p>
<p><a href="https://cn.ad101.vip/">https://cn.ad101.vip/</a></p>
<p><strong>1.3</strong>  <strong>图片操作</strong></p>
<p>3.1、图片无限变大</p>
<p>让你的图片无损放大，放大，再放大！只需要稍稍处理一下就可达到意想不到的效果。</p>
<p>网站：<a href="http://bigjpg.com/zh">http://bigjpg.com/zh</a></p>
<p><strong>1.4</strong>  <strong>文件共享</strong></p>
<p>4.1、拷贝兔</p>
<p>拷贝兔是款跨平台文件传输工具，能做到不同设备间文件或文本的临时性迅速分享的应用，支持Windows、Mac、Linux、iOS、Android平台互传；在线使用，用完即走。比百度网盘方便多了。</p>
<p>网站：<a href="https://cp.anyknew.com/">https://cp.anyknew.com</a></p>
<p><strong>1.5</strong>  <strong>应届生招聘</strong></p>
<p>5.1、应届生求职网</p>
<p>为大学生提供全方位的求职服务，提供最全、最新、最准确的校园宣讲、全职招聘、兼职实习、知名企业校园招聘、现场招聘会等信息，并且为大学生提供针对性的求职就业指导。</p>
<p>网站：<a href="http://s.yingjiesheng.com/">http://s.yingjiesheng.com/</a></p>
<p><strong>1.7</strong>  <strong>办公、开发软件</strong></p>
<p>7.1、我爱分享网</p>
<p>分享各种常用软件安装包，安装教程和自学视频，让小伙伴即时获取最新的软件，软件无忧，理工科必备利器！</p>
<p>网站：<a href="http://www.zhanshaoyi.com/rjxz.html">http://www.zhanshaoyi.com/rjxz.html</a></p>
<p><strong>1.13</strong> <strong>国外IT学习网站镜像(纯英文)</strong></p>
<p><a href="https://www.quanzhanketang.com/">https://www.quanzhanketang.com/</a></p>
<p><strong>1.14</strong> <strong>加密</strong></p>
<p><strong>1.14.1</strong> <strong>加密工具</strong></p>
<p><a href="http://tool.oschina.net/encrypt">http://tool.oschina.net/encrypt</a></p>
<p><strong>1.14.2</strong> <strong>AES加密页面</strong></p>
<p><a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p>
<p><strong>1.14.3</strong> <strong>其他较全加密页面</strong></p>
<p><a href="http://tool.oschina.net/encrypt/">http://tool.oschina.net/encrypt/</a></p>
<p><strong>1.15</strong> <strong>jar包下载</strong></p>
<p><a href="https://mvnrepository.com/artifact/org.apache.axis/axis/1.4">https://mvnrepository.com/artifact/org.apache.axis/axis/1.4</a></p>
<p><strong>1.16</strong> <strong>图扑</strong></p>
<p>heightopo    </p>
<p><strong>1.17</strong> <strong>课件购买</strong></p>
<p><a href="https://xiedaimala.com/">https://xiedaimala.com/</a></p>
<p><strong>1.18</strong> <strong>脚本网址</strong></p>
<p><a href="https://greasyfork.org/zh-CN/scripts">https://greasyfork.org/zh-CN/scripts</a></p>
<p><strong>1.19</strong> <strong>maven 库</strong></p>
<p><a href="https://mvnrepository.com/tags/ftp">https://mvnrepository.com/tags/ftp</a></p>
<p>前端样式框架  图标完善 类似于bootstrap</p>
<p><a href="https://semantic-ui.com/">https://semantic-ui.com/</a></p>
<h1 id="牛人博客"><a href="#牛人博客" class="headerlink" title="牛人博客"></a>牛人博客</h1><p>微服务</p>
<p><a href="http://blog.cuicc.com/">http://blog.cuicc.com/</a></p>
<p><img src="%E6%94%B6%E8%97%8F/image-20210709112545328.png" alt="image-20210709112545328"></p>
<p>springboot-语雀</p>
<p><a href="https://www.yuque.com/atguigu/springboot">https://www.yuque.com/atguigu/springboot</a></p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>短信验证：聚合数据</p>
<p><a href="https://www.juhe.cn/docs">https://www.juhe.cn/docs</a></p>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>接口幂等性</title>
    <url>/2021/02/25/%E6%9E%B6%E6%9E%84/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</url>
    <content><![CDATA[<h1 id="接口幂等性"><a href="#接口幂等性" class="headerlink" title="接口幂等性"></a>接口幂等性</h1><a id="more"></a>

<h2 id="1-接口调用存在的问题"><a href="#1-接口调用存在的问题" class="headerlink" title="1. 接口调用存在的问题"></a>1. 接口调用存在的问题</h2><p>现如今我们的系统大多拆分为分布式SOA，或者微服务，一套系统中包含了多个子系统服务，而一个子系统服务往往会去调用另一个服务，而服务调用服务无非就是使用RPC通信或者restful，既然是通信，那么就有可能在服务器处理完毕后返回结果的时候挂掉，这个时候用户端发现很久没有反应，那么就会多次点击按钮，这样请求有多次，那么处理数据的结果是否要统一呢？那是肯定的！尤其在支付场景。</p>
<h2 id="2-什么是接口幂等性"><a href="#2-什么是接口幂等性" class="headerlink" title="2. 什么是接口幂等性"></a>2. 什么是接口幂等性</h2><p>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条，这就没有保证接口的幂等性。</p>
<h2 id="3-什么情况下需要保证接口的幂等性"><a href="#3-什么情况下需要保证接口的幂等性" class="headerlink" title="3. 什么情况下需要保证接口的幂等性"></a>3. 什么情况下需要保证接口的幂等性</h2><blockquote>
<p>增加<br>增量性质的修改</p>
</blockquote>
<p>查询对于结果是不会有改变的，查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作；</p>
<p>删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个，在不考虑返回结果的情况下，删除操作也是具有幂等性的)</p>
<h1 id="接口实现幂等性"><a href="#接口实现幂等性" class="headerlink" title="接口实现幂等性"></a>接口实现幂等性</h1><p>常见的两种实现方案: </p>
<ol>
<li><p>使用token机制实现</p>
</li>
<li><p>通过代码逻辑判断实现</p>
</li>
</ol>
<h2 id="1-使用token机制实现（推荐）"><a href="#1-使用token机制实现（推荐）" class="headerlink" title="1. 使用token机制实现（推荐）"></a>1. 使用token机制实现（推荐）</h2><blockquote>
<p>特点：要申请，一次有效性，可以限流</p>
</blockquote>
<ol>
<li>生成全局唯一的token，token放到redis 或 jvm内存，token会在页面跳转时获取。存放到pageScope中，支付请求提交前先获取token</li>
<li>提交后后台校验token，执行提交逻辑，提交成功同时删除token，生成新的token更新redis ，这样当第一次提交后token更新了，页面再次提交携带的token是已删除的token后台验证会失败不让提交</li>
</ol>
<p>注： redis要用删除操作来判断token，删除成功代表token校验通过，如果用select+delete来校验token，存在并发问题，不建议使用</p>
<h2 id="2-通过代码逻辑判断实现接口幂等性"><a href="#2-通过代码逻辑判断实现接口幂等性" class="headerlink" title="2. 通过代码逻辑判断实现接口幂等性"></a>2. 通过代码逻辑判断实现接口幂等性</h2><ol>
<li>通过orderId来标定订单的唯一性，付款系统只要检测到订单已经支付过，则第二次调用不会扣款而会直接返回结果；</li>
<li>订单具有自己的状态（orderStatus),订单状态存在一定的流转。订单首先有提交（0），付款中（1），付款成功（2），付款失败（3）</li>
<li>当orderStatus = 1 时，其前置状态只能是0，也就是说将orderStatus由0-&gt;1 是需要幂等性的update Order set orderStatus = 1 where OrderId = ‘orderid’ and orderStatus = 0<br>当orderStatus 处于0，1两种状态时，对订单执行0-&gt;1 的状态流转操作应该是具有幂等性的。这时候需要在执行update操作之前检测orderStatus是否已经=1，如果已经=1则直接返回true即可。</li>
</ol>
]]></content>
      <categories>
        <category>接口幂等性</category>
      </categories>
      <tags>
        <tag>接口幂等性</tag>
      </tags>
  </entry>
  <entry>
    <title>设计</title>
    <url>/2021/02/25/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="卡顿原因"><a href="#卡顿原因" class="headerlink" title="卡顿原因"></a>卡顿原因</h1><h2 id="1-影响响应速度的因素"><a href="#1-影响响应速度的因素" class="headerlink" title="1. 影响响应速度的因素"></a>1. 影响响应速度的因素</h2><p>其由上到下分别是：CPU、内存、硬盘、服务器</p>
<p>CPU中运算为纳秒级；</p>
<p>内存运算为微秒级；</p>
<p>硬盘运算为毫秒级；</p>
<p>由服务器获取数据则为秒级；</p>
<p>其中的换算如下</p>
<p>因此，响应速度中CPU和内存的影响可以忽略不计，主要的影响在硬盘和服务器部分。</p>
<p><img src="image-20210618114436572.png" alt="image-20210618114436572"></p>
<h2 id="2-卡顿分类"><a href="#2-卡顿分类" class="headerlink" title="2. 卡顿分类"></a>2. 卡顿分类</h2><ol>
<li>有些时候的卡顿不仅画面没有响应而且鼠标等也没有响应，这是操作系统的卡顿（最严重）</li>
<li>仅仅是某个软件出现卡顿，将其关掉不会影响其他应用（较好）</li>
<li>局部加载（这种卡顿的范围很小，也告诉用户这里需要等一等，这种效果是最好的）</li>
</ol>
<p><img src="%E8%AE%BE%E8%AE%A1/image-20210618133339504.png" alt="image-20210618133339504"></p>
<h2 id="3-如何解决卡顿"><a href="#3-如何解决卡顿" class="headerlink" title="3. 如何解决卡顿"></a>3. 如何解决卡顿</h2><p>一般来说软件的程序流是同步的；</p>
<p>也就是一个接着一个来执行的，如果执行时将慢的部分绕开，那就无需等待；</p>
<p>举个栗子：</p>
<p>现在要加载一张图片，流程可分为三步：</p>
<ul>
<li>调用CPU运算逻辑</li>
<li>调用服务器获取图片</li>
<li>返回结果渲染图片</li>
</ul>
<p>这三步中 调用服务器获取图片 是耗时最长的，</p>
<p>此时可以选择绕开调用服务器获取图片，</p>
<p>首先调用CPU运算逻辑，在调用服务器获取图片的同时直接返回结果渲染图片，再加上一个加载图标</p>
<p><img src="%E8%AE%BE%E8%AE%A1/image-20210618134259542.png" alt="image-20210618134259542"></p>
<p>等到服务器将结果返回的时候，再将结果渲染到屏幕上，这就是<code>异步机制</code></p>
<h1 id="高内聚低耦合"><a href="#高内聚低耦合" class="headerlink" title="高内聚低耦合"></a>高内聚低耦合</h1><p>在<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/10170122">软件设计</a>中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则是高内聚低耦合。从模块粒度来看，</p>
<p>高内聚：尽可能类的每个成员方法只完成一件事（最大限度的聚合）； </p>
<p>低耦合：减少类内部，一个成员方法调用另一个成员方法。</p>
<p>从类角度来看， 高内聚低耦合：减少类内部，对其他类的调用；从功能块来看 高内聚低耦合：减少模块之间的交互复杂度（接口数量，参数数据）即横向：类与类之间、模块与模块之间；纵向：层次之间；尽可能，内容内聚，数据耦合。</p>
<p><strong>降低耦合度的方法</strong></p>
<p>1、少使用类的继承，多用接口隐藏实现的细节。 Java面向对象编程引入接口除了支持多态外， 隐藏实现细节也是其中一个目的。</p>
<p>2、模块的功能化分尽可能的单一，道理也很简单，功能单一的模块供其它模块调用的机会就少。（其实这是高内聚的一种说法，高内聚低耦合一般同时出现）。</p>
<p>3、遵循一个定义只在一个地方出现。</p>
<p>4、少使用全局变量。</p>
<p>5、类属性和方法的声明少用public，多用private关键字。</p>
<p>6、多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。</p>
<p>7、尽量不用“硬编码”的方式写程序，同时也尽量避免直接用SQL语句操作数据库。</p>
<p>8、最后当然就是避免直接操作或调用其它模块或类（内容耦合）；如果模块间必须存在耦合，原则上尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，避免使用内容耦合。</p>
<p><strong>增强内聚度方法</strong></p>
<p>1、模块只对外暴露最小限度的接口，形成最低的依赖关系。</p>
<p>2、只要对外接口不变，模块内部的修改，就不得影响其他模块。</p>
<p>3、删除一个模块，应当只影响有依赖关系的其他模块，而不应该影响其他无关部分。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂度</title>
    <url>/2021/03/18/%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><a id="more"></a>

<h3 id="代码执行次数"><a href="#代码执行次数" class="headerlink" title="代码执行次数"></a>代码执行次数</h3><p>调用一次函数fun1，内部一共执行<code>2</code>次语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行1次</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;打印&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行1次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>调用一次函数fun2，内部一共执行<code>3n+3</code>次语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; n; index++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>循环执行顺序</p>
<p><img src="%E5%A4%8D%E6%9D%82%E5%BA%A6/image-20210318150805260.png" alt="image-20210318150805260"></p>
<p>由此可以看出（在循环仅运行一次，循环体中代码至少执行一次的情况下）：</p>
<ol>
<li>参数index初始化仅会执行一次</li>
<li>自增部分及循环体执行次数为n</li>
<li>由于循环以判断开始最后也以判断终止，因此判断会比循环体中的代码多执行一次，即n+1</li>
<li>return 执行次数为一</li>
</ol>
<p>因此总的执行次数为3n+3</p>
<h3 id="代码的总执行次数"><a href="#代码的总执行次数" class="headerlink" title="代码的总执行次数"></a>代码的总执行次数</h3><p>一段代码的总执行次数会用T(n)表示</p>
<p>n是输入数据的大小或数量</p>
<p>T（n）表示输入为n时，某段代码的总执行次数</p>
<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>若某段代码的T(n) = 常数</p>
<p>那么这段代码的时间复杂度可以直接估算为1</p>
<p>因此T(n) = 2 的时间复杂度就是 1,<code>即 O(1)</code></p>
<p>若代码的T(n) = 常数 * n + 常数</p>
<p>当n不断扩大时，第一部分常数*n会不断扩大，而第二部分的常数相对于第一部分就没有那么重要了，就相当于不存在，因此可以直接省略</p>
<p>而第一部分的常数可以直接估算为1，也可以直接理解为去掉这个常数</p>
<p>因此T(n) = 3n+3的时间复杂度就是  n,<code>即 O(n)</code></p>
<p>而对于带有次方的项T(n) = 常数*n^3 + 常数*n^2</p>
<p>当n不断扩大时，次方大的部分n的扩大更明显，而次方小的部分扩大不明显，因此可以直接省略</p>
<p>之后常数估算为1</p>
<p>因此T(n) = 常数*n^3 + 常数*n^2的时间复杂度为 n^3,<code>即 O(n^3)</code></p>
<p><strong>总结： 而仅用n表示的时间复杂度并不完整因此需要加上O()，即：</strong></p>
<blockquote>
<p>T(n)是不是常数：</p>
<ul>
<li>是： 时间复杂度为O(1)</li>
<li>否： 时间复杂度为O(保留T(n)的最高次项并且去掉最高次项的系数)</li>
</ul>
</blockquote>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度为O(1)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度为O(n^2)</span></span><br></pre></td></tr></table></figure>
<p><strong>如果有a重循环，时间复杂度为O(n^a)</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T(n) 为 n^2 + n</span></span><br><span class="line"><span class="comment">// 时间复杂度为O(n^2)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在判断时，也以循环多的部分取时间复杂度</span></span><br><span class="line"><span class="comment">// 时间复杂度为O(n^2)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(n);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可看出i=0时代码执行了n次、1：(n-1)、2：(n-2) ... n-1：2、n：1</span></span><br><span class="line"><span class="comment">// 将其相加得</span></span><br><span class="line"><span class="comment">// n + (n-1) + (n-2) + ... + 2 + 1</span></span><br><span class="line"><span class="comment">// (n + 1) * n/2</span></span><br><span class="line"><span class="comment">// 1/2 * n^2 + 1/2 * n</span></span><br><span class="line"><span class="comment">// = O(n^2)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i*=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>// T(8)  = 3 T(16) = 4<br>// 2^T(8) = 8 2^T(16) = 16<br>// 2^T(n) = n</p>
</blockquote>
<p><img src="image-20210318175253817.png" alt="image-20210318175253817"></p>
<blockquote>
<p>最后得出时间复杂度为O(logn)</p>
</blockquote>
<p>对数，需要求？的值：<br>a^? = b </p>
<p>可表示为</p>
<p><img src="%E5%A4%8D%E6%9D%82%E5%BA%A6/image-20210318175555956.png" alt="image-20210318175555956"></p>
<p>常见时间复杂度的速度</p>
<p><img src="image-20210318175821194.png" alt="image-20210318175821194"></p>
<p><img src="image-20210318175939197.png" alt="image-20210318175939197"></p>
<p><img src="image-20210318180017029.png" alt="image-20210318180017029"></p>
<p>时间复杂度排序</p>
<p><img src="image-20210318175727074.png" alt="image-20210318175727074"></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>复杂度</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2021/03/18/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>若要将字母 a b c d 反方向排序</p>
<p>条件为一次只能移动一个字母</p>
<p><img src="image-20210502213853350.png" alt="image-20210502213853350"></p>
<p>此时有一个容器，将字母按顺序依次放入容器中，全部放置完毕后</p>
<p><img src="image-20210502214108343.png" alt="image-20210502214108343"></p>
<p>将最上边的依次弹出</p>
<p><img src="image-20210502214301074.png" alt="image-20210502214301074"></p>
<p>由此即可得到反向排列后的字母</p>
<p><strong>这个容器就叫栈（Stack），其只有一个口，所以只能两个操作：压栈push和出栈pop</strong></p>
<p>虽然只有两个简单的操作但是使用其可以完成非常复杂的效果</p>
<h2 id="2-检查字符串括号是否对上-（语法检查）"><a href="#2-检查字符串括号是否对上-（语法检查）" class="headerlink" title="2. 检查字符串括号是否对上{[()]}（语法检查）"></a>2. 检查字符串括号是否对上{[()]}（语法检查）</h2><p>规则如下：</p>
<ol>
<li>所有左括号都入栈</li>
<li>碰到右括号时则进行出栈操作，若左右括号匹配则抵消，若不匹配则表示未对上</li>
</ol>
<p><img src="image-20210502220847133.png" alt="image-20210502220847133"></p>
<h3 id="java代码实现，使用到Stack类"><a href="#java代码实现，使用到Stack类" class="headerlink" title="java代码实现，使用到Stack类"></a>java代码实现，使用到<code>Stack</code>类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[] dataChar = str.toCharArray();</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> item : dataChar) &#123;</span><br><span class="line">        String nowItem = String.valueOf(item);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(nowItem)) &#123;</span><br><span class="line">            stack.push(map.get(nowItem));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.empty() || !nowItem.equals(stack.pop())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-计算机如何计算1-2-3-4-5-6"><a href="#3-计算机如何计算1-2-3-4-5-6" class="headerlink" title="3. 计算机如何计算1+2*3+(4+5)*6"></a>3. 计算机如何计算1+2*3+(4+5)*6</h2><h3 id="旧方法："><a href="#旧方法：" class="headerlink" title="旧方法："></a><strong>旧方法</strong>：</h3><ol>
<li>先扫一遍算式查看否有括号，优先计算括号中的</li>
<li>再扫一遍算式查看否有乘号和除号，计算乘除</li>
<li>最后在计算加减算法</li>
</ol>
<p>这种算法的效率就会比较低</p>
<p><strong>更高效的方式为先转成一个中间态，去掉括号，将运算符放到数字后面</strong></p>
<p><strong>运算符在中间的称为中缀表达式，运算符放在后边的叫做后缀表达式，也叫逆波兰表达式</strong></p>
<h3 id="中缀表达式转换为后缀表达式（逆波兰表达式）："><a href="#中缀表达式转换为后缀表达式（逆波兰表达式）：" class="headerlink" title="中缀表达式转换为后缀表达式（逆波兰表达式）："></a>中缀表达式转换为后缀表达式（逆波兰表达式）：</h3><p>数字：</p>
<ol>
<li>所有的数字直接输出</li>
</ol>
<p>符号：</p>
<ol>
<li>运算符优先级高于栈内的（或栈空）要入栈，否则从堆栈中他拿出所有优先级更高或一样的运算符（或直到括号），再将当前的入栈</li>
<li>左括号直接入栈</li>
<li>若栈内包含左括号，运算符入栈遵从步骤：符号1（验证算式：2*(3*4+5)）</li>
<li>若是右括号，栈内不断出栈直到碰到左括号</li>
<li>最后将栈中全部出栈，即可得到后缀表达式</li>
</ol>
<p><img src="image-20210506094253617.png" alt="image-20210506094253617"></p>
<p><img src="image-20210506094400649.png" alt="image-20210506094400649"></p>
<p><img src="image-20210506100302090.png" alt="image-20210506100302090"></p>
<p><img src="image-20210506100417255.png" alt="image-20210506100417255"></p>
<p><img src="image-20210506100532085.png" alt="image-20210506100532085"></p>
<p><img src="image-20210506100609924.png" alt="image-20210506100609924"></p>
<h3 id="后缀表达式运算："><a href="#后缀表达式运算：" class="headerlink" title="后缀表达式运算："></a>后缀表达式运算：</h3><ol>
<li><p>凡是数字就压栈</p>
</li>
<li><p>凡是运算符就出栈两次然后计算后压栈，</p>
<p>先出栈的数字在运算符后，后出栈的在运算符前</p>
<p>即： 栈中有23、2两个数字，23在下，2在上，运算符号为 - ，此时运算为23 - 2</p>
<p><img src="image-20210506110409902.png" alt="image-20210506110409902"></p>
</li>
<li><p>最后栈内剩下的就是结果</p>
</li>
</ol>
<p><img src="image-20210506101317642.png" alt="image-20210506101317642"></p>
<p><img src="image-20210506101519675.png" alt="image-20210506101519675"></p>
<p><img src="image-20210506101809386.png" alt="image-20210506101809386"></p>
<h3 id="java实现-仅实现未优化v1"><a href="#java实现-仅实现未优化v1" class="headerlink" title="java实现  仅实现未优化v1"></a>java实现  仅实现未优化v1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//  String str = &quot;1+2*3+(4+5)*6&quot;;</span></span><br><span class="line">    String str = <span class="string">&quot;2*(3*4+5)&quot;</span>;</span><br><span class="line">    List&lt;Character&gt; count = count(str);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;算式非法!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(getResult(count));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Character&gt; <span class="title">count</span><span class="params">(String countStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Pattern.matches(<span class="string">&quot;^[0-9()*/+-]+$&quot;</span>, countStr)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] countChars = countStr.toCharArray();</span><br><span class="line">    <span class="comment">// 存储输出结果</span></span><br><span class="line">    List&lt;Character&gt; resultCharacterList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> countCharsItem : countChars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(countCharsItem)) &#123;</span><br><span class="line">            <span class="comment">// 数字直接输出</span></span><br><span class="line">            resultCharacterList.add(countCharsItem);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (countCharsItem == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 左括号直接入栈</span></span><br><span class="line">            stack.push(countCharsItem);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (countCharsItem == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 右括号不断出栈直到碰到左括号</span></span><br><span class="line">            <span class="keyword">char</span> popChar = stack.pop();</span><br><span class="line">            <span class="keyword">while</span> (popChar != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                resultCharacterList.add(popChar);</span><br><span class="line">                popChar = stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (countCharsItem == <span class="string">&#x27;*&#x27;</span> || countCharsItem == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 运算符优先级高于栈内的（或栈空）要入栈，否则从堆栈中他拿出所有优先级更高或一样的运算符（或直到括号），再将当前的入栈</span></span><br><span class="line">            <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                stack.push(countCharsItem);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> popChar = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (popChar == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                resultCharacterList.add(popChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(popChar);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(countCharsItem);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (countCharsItem == <span class="string">&#x27;+&#x27;</span> || countCharsItem == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 当符号为加减时除非栈空或者最上层为左括号, </span></span><br><span class="line">            <span class="comment">// 否则都要出栈直到栈空或者最上层为左括号为止，之后将符号入栈</span></span><br><span class="line">            <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                stack.push(countCharsItem);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> popChar = stack.pop();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (popChar == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    stack.push(popChar);</span><br><span class="line">                    stack.push(countCharsItem);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resultCharacterList.add(popChar);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                    stack.push(countCharsItem);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                popChar = stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 剩余符号依次出栈</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">        resultCharacterList.add(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultCharacterList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getResult</span> <span class="params">(List&lt;Character&gt; list)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; characterStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    list.forEach(item -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(item)) &#123;</span><br><span class="line">            <span class="comment">// 如果为数字则入栈</span></span><br><span class="line">            characterStack.push(Integer.parseInt(String.valueOf(item)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> number1 = characterStack.pop();</span><br><span class="line">            <span class="keyword">int</span> number2 = characterStack.pop();</span><br><span class="line">            <span class="keyword">switch</span> (item) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    characterStack.push(Math.addExact(number2, number1));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    characterStack.push(Math.subtractExact(number2, number1));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    characterStack.push(Math.multiplyExact(number2, number1));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    characterStack.push(Math.floorDiv(number2, number1));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> characterStack.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1-二叉树特点"><a href="#1-二叉树特点" class="headerlink" title="1. 二叉树特点"></a>1. 二叉树特点</h2><p><img src="%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20210630110521010.png" alt="image-20210630110521010"></p>
<ol>
<li>二叉树作为一个搜索树，其仅有一个根节点</li>
<li>二叉树所有的节点最多有两个子节点，一左一右</li>
<li>左子节点包括其子孙都小于父节点，父节点 小于 右子节点及其子孙，这一特性对于所有节点都成立</li>
</ol>
<h2 id="2-数据查找"><a href="#2-数据查找" class="headerlink" title="2. 数据查找"></a>2. 数据查找</h2><h3 id="2-1-实现"><a href="#2-1-实现" class="headerlink" title="2.1 实现"></a>2.1 实现</h3><p>如果现在要查找 <code>7</code> 这个值</p>
<p>首先与根节点比较： 4 &lt; <code>7</code> ，因此继续与右子节点比较</p>
<img src="数据结构/image-20210630111925697.png" alt="image-20210630111155594" style="zoom: 50%;" />



<p>与根节点右子节点比较： 6 &lt; <code>7</code> ，因此查找节点 6 的右子节点</p>
<img src="数据结构/image-20210630111844288.png" alt="image-20210630111255777" style="zoom:50%;" />

<p>与节点 6 的右子节点比较：<code>7</code> = 7，输出</p>
<blockquote>
<p>整个过程共比较三次，即 树的高度 次</p>
</blockquote>
<h3 id="2-2-与线性数据结构比较（时间复杂度）"><a href="#2-2-与线性数据结构比较（时间复杂度）" class="headerlink" title="2.2 与线性数据结构比较（时间复杂度）"></a>2.2 与线性数据结构比较（时间复杂度）</h3><p>比如链表</p>
<img src="数据结构/image-20210630112254200.png" alt="image-20210630112254200" style="zoom:67%;" />



<p>此时如果同样需要查找<code>7</code>的话，需要从头开始，一个一个编译，一直到最后的 7<br>总共需要查找 7 次</p>
<p>而如果存在非常多的数据时：<br>二叉树中每层会有 <code>2^n</code> 个节点</p>
<img src="数据结构/image-20210630112803512.png" alt="image-20210630112803512" style="zoom:67%;" />



<p>转换成链表的话：</p>
<p>节点数为： 1 + 2 + 4 + …… + 2^n = 2^(n+1)-1</p>
<p>反过来的话就是：log2(m + 1) - 1 = n</p>
<blockquote>
<p>即：<br>链表时间复杂度为：O(n)<br>二叉树时间复杂度为：O(log(n))</p>
</blockquote>
<h2 id="3-平衡二叉树"><a href="#3-平衡二叉树" class="headerlink" title="3. 平衡二叉树"></a>3. 平衡二叉树</h2><blockquote>
<p>定义：任何节点的左子树和右子树的高度差不超过1，就可以成为平衡二叉树</p>
</blockquote>
<h3 id="3-1-二叉树平衡的好处"><a href="#3-1-二叉树平衡的好处" class="headerlink" title="3.1 二叉树平衡的好处"></a>3.1 二叉树平衡的好处</h3><p>二叉树不平衡的极致为线性结构的树，其时间复杂度为O(n)</p>
<img src="数据结构/image-20210630113948720.png" alt="image-20210630113948720" style="zoom:67%;" />

<p>将其转换成一个平衡二叉树后，时间复杂度为O(log(n))</p>
<img src="数据结构/image-20210630114137729.png" alt="image-20210630114137729" style="zoom:67%;" />

<p>而非极致的二叉树时间复杂度处于二者之间</p>
<p>O(n) &lt; 二叉树 &lt; O(log(n))</p>
<blockquote>
<p>所以：平衡二叉树为二叉树查询中最优的解</p>
</blockquote>
<h3 id="3-2-如何保持平衡状态-AVL树"><a href="#3-2-如何保持平衡状态-AVL树" class="headerlink" title="3.2 如何保持平衡状态  AVL树"></a>3.2 如何保持平衡状态  AVL树</h3><h4 id="3-2-0-不平衡类型确认"><a href="#3-2-0-不平衡类型确认" class="headerlink" title="3.2.0 不平衡类型确认"></a>3.2.0 不平衡类型确认</h4><p>在该二叉树中插入数字 1</p>
<img src="数据结构/image-20210630133105571.png" alt="image-20210630133105571" style="zoom:67%;" />

<p>插入后的二叉树如图：</p>
<img src="数据结构/image-20210630133758172.png" alt="image-20210630133721869" style="zoom:67%;" />

<p>此时节点9的左子树有三层，而右子树只有一层，变的不平衡了</p>
<p>现在从插入的节点1 出发向上追寻最近的不平衡子树的根节点</p>
<p>可以看出节点3 与 节点6 均为平衡节点，继续向上找，节点9为不平衡节点，</p>
<p>因此节点9需要进行调整。</p>
<p>调整类型确认：</p>
<p>查看 由节点9 到 节点1 的路径，可以看出均在父节点左侧，即为：左左类型</p>
<img src="数据结构/image-20210703140705762.png" alt="image-20210703140705762" style="zoom:67%;" />

<h4 id="3-2-1-左左类型调整"><a href="#3-2-1-左左类型调整" class="headerlink" title="3.2.1 左左类型调整"></a>3.2.1 左左类型调整</h4><img src="数据结构/image-20210703140705762.png" alt="image-20210703140705762" style="zoom: 50%;" />

<p>将 不平衡节点及其两个子节点单独提出，<br>然后进行右旋，<br>也就是将 不平衡节点的左子节点6 作为根节点</p>
<img src="数据结构/image-20210703141830811.png" alt="image-20210703141830811" style="zoom: 50%;" />

<p>然后将剩余的节点1、3、7插入树中</p>
<img src="数据结构/image-20210703141930165.png" alt="image-20210703141930165" style="zoom:50%;" />



<h4 id="3-2-2-左右类型调整"><a href="#3-2-2-左右类型调整" class="headerlink" title="3.2.2 左右类型调整"></a>3.2.2 左右类型调整</h4><img src="数据结构/image-20210703142101713.png" alt="image-20210703142101713" style="zoom:50%;" />

<p>将节点3、5、7左旋</p>
<p>调整剩下的6<br><code>此时树变为左左类型不平衡树</code></p>
<img src="数据结构/image-20210703142321072.png" alt="image-20210703142321072" style="zoom:50%;" />

<p>将节点7、9、11右旋</p>
<img src="数据结构/image-20210703142446526.png" alt="image-20210703142446526" style="zoom:50%;" />

<h4 id="3-2-3-右右类型调整"><a href="#3-2-3-右右类型调整" class="headerlink" title="3.2.3 右右类型调整"></a>3.2.3 右右类型调整</h4><img src="数据结构/image-20210703145248535.png" alt="image-20210703145248535" style="zoom:50%;" />

<p>与左左类型类似，<br>先将节点5、6、9左旋<br>然后将剩余的节点插入树中</p>
<img src="数据结构/image-20210703145337808.png" alt="image-20210703145337808" style="zoom:50%;" />



<h4 id="3-2-4-右左类型"><a href="#3-2-4-右左类型" class="headerlink" title="3.2.4 右左类型"></a>3.2.4 右左类型</h4><img src="数据结构/image-20210703145451047.png" alt="image-20210703145451047" style="zoom:50%;" />

<p>先将节点8、11、13右旋，<br>调整节点7的位置<br><code>此时树变为右右类型不平衡树</code></p>
<img src="数据结构/image-20210703145557911.png" alt="image-20210703145557911" style="zoom:50%;" />

<p>然后将节点5、6、8左旋，最后调整剩余节点的位置</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/04/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/0.%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="OOP七大原则"><a href="#OOP七大原则" class="headerlink" title="OOP七大原则"></a>OOP七大原则</h1><a id="more"></a>

<p><code>开闭原则</code>：对扩展开放，对修改关闭。</p>
<p><code>里氏替换原则</code>：继承必须确保超类所拥有的性质在子类中仍然成立。</p>
<p>子类尽量不修改父类的实现而是对父类方法进行拓展</p>
<p><code>依赖倒置原则</code>：要面向接口编程，不要面向实现编程。</p>
<p>尽量先写接口，然后在依照接口写实现</p>
<p><code>单一职责原则</code>：控制类的粒度大小、将对象解耦、提高其内聚性。</p>
<p>单一的类只做一件事</p>
<p><code>接口隔离原则</code>：要为各个类建立它们需要的专用接口。</p>
<p><code>迪米特法则</code>：只与你的直接朋友交谈，不跟“陌生人”说话。</p>
<p>尽量不要越级调用，如：A、B、C三个类，A调用B， B调用C，若A想要调用C时，尽量不要直接调用而是 通过调用B来调用C（个人考虑可能原因为：通过B调用C可能会有一些隐藏的操作，A直接调用C时可能会考虑不到或更加繁琐）</p>
<p><code>合成复用原则</code>：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p>
<p>身体类与头类的关系，头类中存在一个字段为身体类，即have a，二者关系为组合关系</p>
<p>猫类与动物类的关系，二者为继承关系，即is a，二者关系为继承关系</p>
<h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><h2 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h2><p>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p>
<h2 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2.  结构型模式"></a>2.  结构型模式</h2><p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、dialing模式</p>
<h2 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3.  行为型模式"></a>3.  行为型模式</h2><p>模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2021/04/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><a id="more"></a>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>单例模式最重要的思想，构造器私有化</p>
<h2 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.demoengin.sign;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例</span></span><br><span class="line"><span class="comment"> * 服务器加载时就将对象创建出来</span></span><br><span class="line"><span class="comment"> * 缺点：消耗内存资源</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能该类资源很多，造成空间浪费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hungry <span class="title">getHungry</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h2><h3 id="未加锁时"><a href="#未加锁时" class="headerlink" title="未加锁时"></a>未加锁时</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 懒汉式单例</span></span><br><span class="line"><span class="comment">// 单线程下该模式没有问题，但是多线程并发时，可能会创建多个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getLazyMan</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="keyword">null</span>) lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 多线程测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                LazyMan.getLazyMan();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 懒汉式单例</span></span><br><span class="line"><span class="comment">// 单线程下该模式没有问题，但是多线程并发时，可能会创建多个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getLazyMan</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        创建对象不是一个原子性操作</span></span><br><span class="line"><span class="comment">                        1. 分配内存空间</span></span><br><span class="line"><span class="comment">                        2. 执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                        3. 把这个对象指向这个空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        问题：若线程1进入线程，在内存中执行顺序为132，即先指向空间在初始化对象，</span></span><br><span class="line"><span class="comment">                        那么当线程1执行完3，正在执行操作2时，</span></span><br><span class="line"><span class="comment">                        线程2进来了，此时lazyMan != null 但是lazyMan还没有完成构造</span></span><br><span class="line"><span class="comment">                        此时需要在lazyMan对象上添加修饰词volatile</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多线程测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                LazyMan.getLazyMan();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="双重判断的作用"><a href="#双重判断的作用" class="headerlink" title="双重判断的作用"></a>双重判断的作用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTwo</span></span>&#123;</span><br><span class="line">	<span class="comment">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span> </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingletonTwo instance = <span class="keyword">null</span>;	</span><br><span class="line">	<span class="comment">/* 私有构造方法，防止被实例化 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTwo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//位置1</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//位置2</span></span><br><span class="line">            <span class="keyword">synchronized</span> (instance) &#123;</span><br><span class="line">                <span class="comment">//位置3</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//位置4</span></span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonTwo();  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设线程A和B作为第一批调用者同时或几乎同时调用静态工厂方法getInstance:</p>
<p>1）因为A和B是第一批调用者，当它们进入静态工厂方法时，instance变量是null。因此它们几乎同时到达位置2。</p>
<ol start="2">
<li> 假设A线程先进入 synchronized (instance)，到达位置3，这时由于同步机制，线程B无法到达位置3，只能在位置2等待。</li>
</ol>
<p>3）线程A执行instance = new SingletonTwo()语句，使得instance引用指向一个对象。此时线程B还在位置2上等待。</p>
<p>4）线程A退出synchronized (instance)，返回SingletonTwo对象，退出静态工厂方法。</p>
<p>5）线程B进入 synchronized (instance)块，达到位置3，此时instance已经不为null，因此线程B退出synchronized (instance)，</p>
<p> 返回SingletonTwo对象（线程A所创建的SingletonTwo对象），退出静态工厂方法。</p>
<p>到此为止，线程A和B得到同一个SingletonTwo对象。</p>
<blockquote>
<p>第一个if判断的作用：是为了提高程序的效率，当SingletonTwo对象被创建以后，再获取SingletonTwo对象时就不用去验证同步代码块的锁及后面的代码，直接返回SingletonTwo对象。</p>
<p>第二个if判断的作用：是为了解决多线程下的安全性问题，也就是保证对象的唯一。如果没有第二个if判断，在上面介绍的步骤5处，线程B进入synchronized (instance)块，不用去验证instance是否为null，就会直接创建一个SingletonTwo新对象，这样整个程序运行下来就有可能创建多个实例。</p>
</blockquote>
<h2 id="静态内部类实现"><a href="#静态内部类实现" class="headerlink" title="静态内部类实现"></a>静态内部类实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 公共静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Holder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Holder <span class="title">getHolder</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerHolder.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Holder HOLDER = <span class="keyword">new</span> Holder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="破坏单例模式"><a href="#破坏单例模式" class="headerlink" title="破坏单例模式"></a>破坏单例模式</h1><p>以懒汉模式为例</p>
<h2 id="1-使用反射修改构造器权限，直接调用构造器"><a href="#1-使用反射修改构造器权限，直接调用构造器" class="headerlink" title="1. 使用反射修改构造器权限，直接调用构造器"></a>1. 使用反射修改构造器权限，直接调用构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建第一个对象</span></span><br><span class="line">    LazyMan lazyMan1 = LazyMan.getLazyMan();</span><br><span class="line">    <span class="comment">// 获取类构造器</span></span><br><span class="line">    Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 修改权限</span></span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 通过反射获得的构造器创建对象</span></span><br><span class="line">    LazyMan lazyMan2 = constructor.newInstance();</span><br><span class="line">    System.out.println(lazyMan1.hashCode());    <span class="comment">// 1028214719</span></span><br><span class="line">    System.out.println(lazyMan2.hashCode());    <span class="comment">// 500977346</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法构造函数中添加判断，若对象存在则抛出异常，将检测提升为三重检测</span></span><br><span class="line"><span class="comment">//        private LazyMan () &#123;</span></span><br><span class="line"><span class="comment">//            synchronized (LazyMan.class) &#123;</span></span><br><span class="line"><span class="comment">//                if (lazyMan != null) &#123;</span></span><br><span class="line"><span class="comment">//                    throw new RuntimeException(&quot;直接调用构造器异常&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-均使用反射，不使用提供的方法进行创建"><a href="#2-均使用反射，不使用提供的方法进行创建" class="headerlink" title="2. 均使用反射，不使用提供的方法进行创建"></a>2. 均使用反射，不使用提供的方法进行创建</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    LazyMan lazyMan1 = constructor.newInstance();</span><br><span class="line">    LazyMan lazyMan2 = constructor.newInstance();</span><br><span class="line">    System.out.println(lazyMan1.hashCode());    <span class="comment">// 1028214719</span></span><br><span class="line">    System.out.println(lazyMan2.hashCode());    <span class="comment">// 500977346</span></span><br><span class="line">        <span class="comment">// 解决方法：添加一个非当前对象的变量作为标识</span></span><br><span class="line"><span class="comment">//        private static boolean redGreenLight = true;</span></span><br><span class="line"><span class="comment">//        private LazyMan () &#123;</span></span><br><span class="line"><span class="comment">//            synchronized (LazyMan.class) &#123;</span></span><br><span class="line"><span class="comment">//                if (redGreenLight) &#123;</span></span><br><span class="line"><span class="comment">//                    redGreenLight = false;</span></span><br><span class="line"><span class="comment">//                &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                    throw new RuntimeException(&quot;直接调用构造器异常&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="3-双重反射，既修改构造器权限又修改关键变量权限"><a href="#3-双重反射，既修改构造器权限又修改关键变量权限" class="headerlink" title="3. 双重反射，既修改构造器权限又修改关键变量权限"></a>3. 双重反射，既修改构造器权限又修改关键变量权限</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 使用反射获取字段</span></span><br><span class="line">Field redGreenLight = LazyMan.class.getDeclaredField(<span class="string">&quot;redGreenLight&quot;</span>);</span><br><span class="line"><span class="comment">// 修改字段权限</span></span><br><span class="line">redGreenLight.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">LazyMan lazyMan1 = constructor.newInstance();</span><br><span class="line"><span class="comment">// 修改字段值</span></span><br><span class="line">redGreenLight.set(LazyMan.class, <span class="keyword">true</span>);</span><br><span class="line">LazyMan lazyMan2 = constructor.newInstance();</span><br><span class="line">System.out.println(lazyMan1.hashCode());    <span class="comment">// 1028214719</span></span><br><span class="line">System.out.println(lazyMan2.hashCode());    <span class="comment">// 500977346</span></span><br></pre></td></tr></table></figure>


<p>解决方法： 枚举Enum</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2021/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%20%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>​    实现了创建者和调用者的分离</p>
<h2 id="详细分类"><a href="#详细分类" class="headerlink" title="详细分类"></a>详细分类</h2><p>​    <code>简单工厂模式</code>：用来生产同一等级结构中的任意产品(对于增加新的产品，需要修改已有代码)</p>
<p>​    虽然某种程度上不符合设计原则，但实际使用最多</p>
<p>​    <code>工厂方法模式</code>：用来生产同一等级结构中的固定产品(支持增加任意产品)</p>
<p>​    不修改已有类的前提下，通过增加新的工厂实现拓展</p>
<p>​    <code>抽象工厂模式</code>：围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。</p>
<p>​    不增加产品，可以增加产品族</p>
<h2 id="主要依据的OOP原则"><a href="#主要依据的OOP原则" class="headerlink" title="主要依据的OOP原则"></a>主要依据的OOP原则</h2><p>​    <code>开闭原则</code>：对扩展开放，对修改关闭。</p>
<p>​    <code>依赖倒置原则</code>：要面向接口编程，不要面向实现编程。</p>
<p>​    <code>迪米特法则</code>：只与你的直接朋友交谈，不跟“陌生人”说话。</p>
<h2 id="核心本质"><a href="#核心本质" class="headerlink" title="核心本质"></a>核心本质</h2><p>​    实例化对象不使用new，用工厂方法代替。</p>
<p>​    将选择实现类，创建对象统一管理和控制，从而将调用者跟实现类解耦。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>存在五菱与红旗两种车</p>
<p>若消费者想要买车，最原始的方法就是消费者自己造车，及new 对象</p>
<p>若造车需要非常多的参数时，消费者就需要自己填这非常多的参数</p>
<h2 id="简单工厂模式（静态工厂模式）"><a href="#简单工厂模式（静态工厂模式）" class="headerlink" title="简单工厂模式（静态工厂模式）"></a>简单工厂模式（静态工厂模式）</h2><p>现在添加一个车工厂的中间类，</p>
<p>消费者只需要与车工厂进行对接，</p>
<p>不用管车工厂是怎样造车的</p>
<p>这样大大方便了消费者</p>
<p><img src="image-20210409113650829.png" alt="image-20210409113650829"></p>
<p>各种类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuling</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;五菱宏光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hongqi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红旗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>工厂代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单工厂模式（静态工厂模式）</span></span><br><span class="line"><span class="comment">// 优点：客户可以直接获取需要的类，而不需要知道获取该类具体的实现</span></span><br><span class="line"><span class="comment">// 可能创建该类需要提供大量的信息，使用工厂模式可能只需要提供少部分的信息即可</span></span><br><span class="line"><span class="comment">// 缺点：当需要增加一个新的产品时，如果不许改代码是做不到的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span> <span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;五菱&quot;</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;红旗&quot;</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Hongqi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>客户获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarFactory.getCar(<span class="string">&quot;五菱&quot;</span>).name();</span><br><span class="line">        CarFactory.getCar(<span class="string">&quot;红旗&quot;</span>).name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>若需要横向拓展车种类时，那么若使用简单工厂模式时肯定是要修改工厂类的代码的</p>
<p><img src="image-20210410220805498.png" alt="image-20210410220805498"></p>
<table>
<thead>
<tr>
<th>复杂度</th>
<th>占优势的工厂模式</th>
</tr>
</thead>
<tbody><tr>
<td>结构复杂度</td>
<td>simple（简单工厂模式）</td>
</tr>
<tr>
<td>代码复杂度</td>
<td>simple（简单工厂模式）</td>
</tr>
<tr>
<td>编辑复杂度</td>
<td>simple（简单工厂模式）</td>
</tr>
<tr>
<td>管理复杂度</td>
<td>simple（简单工厂模式）</td>
</tr>
<tr>
<td>根据设计原则</td>
<td>工厂方法模式</td>
</tr>
<tr>
<td>根据实际业务</td>
<td>简单工厂模式</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 车父类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 车工厂父类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 五菱车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuling</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;五菱宏光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 五菱车工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WlingFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红旗车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hongqi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红旗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红旗车工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HongqiFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hongqi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户</span></span><br><span class="line"><span class="comment">// 工厂方法模式</span></span><br><span class="line"><span class="comment">// 为每个车添加车工厂，用户需要车时调用该车的车工厂获取车</span></span><br><span class="line"><span class="comment">// 需要横向扩展时（如：添加摩拜车），只需要添加：</span></span><br><span class="line"><span class="comment">// 1. 摩拜车类继承车类，重写车方法</span></span><br><span class="line"><span class="comment">// 2. 摩拜车工厂类继承工厂类，重写工厂方法</span></span><br><span class="line"><span class="comment">// 即可在不修改其他类的前提下横向拓展</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> WlingFactory().getCar();</span><br><span class="line">        Car car2 = <span class="keyword">new</span> HongqiFactory().getCar();</span><br><span class="line"></span><br><span class="line">        car.name();</span><br><span class="line">        car2.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2021/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.%20%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="抽象工厂模式（工厂工厂模式）"><a href="#抽象工厂模式（工厂工厂模式）" class="headerlink" title="抽象工厂模式（工厂工厂模式）"></a>抽象工厂模式（工厂工厂模式）</h1><a id="more"></a>

<p><strong>核心本质：</strong></p>
<ul>
<li><p>实例化对象不使用new，用工厂方法代替</p>
</li>
<li><p>将选择实现类，创建对象同意管理和控制，从而将调用者跟我们的实现类解耦</p>
</li>
</ul>
<p><strong>抽象工厂模式：</strong></p>
<ul>
<li> 围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂。</li>
</ul>
<p><strong>定义：</strong></p>
<ul>
<li>抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类</li>
</ul>
<p><strong>适用场景：</strong></p>
<ul>
<li>客户端(应用层)不依赖于产品类实例如何被创建、实现等细节</li>
<li>强调一系列相关的产品对象(属于同一产品族) 一起使用创建对象需要大量的重复代码</li>
<li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>
<li>将一个系列的产品统-到一起创建</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难; .</p>
</li>
<li><p>增加了系统的抽象性和理解难度</p>
</li>
</ul>
<p><img src="image-20210414182856125.png" alt="image-20210414182856125"></p>
<h2 id="产品族和产品等级"><a href="#产品族和产品等级" class="headerlink" title="产品族和产品等级"></a>产品族和产品等级</h2><p><img src="image-20210414183227600.png" alt="image-20210414183227600"></p>
<p>​    同一产品族的产品都是由同一工厂生产的</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="image-20210414192228075.png" alt="image-20210414192228075"></p>
<p>若需要添加一个笔记本产品</p>
<p>那么仅需在抽象产品工厂中添加笔记本的产品</p>
<p>具体笔记本的生产让小米和华为两个厂自己实现</p>
<p>而小米和华为两个厂则继续向下实现笔记本的生产</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPhoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shotDown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小米手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiPhone</span> <span class="keyword">implements</span> <span class="title">IPhoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;小米手机&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shotDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 华为手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhone</span> <span class="keyword">implements</span> <span class="title">IPhoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;华为手机&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shotDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由器产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shotDown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openWifi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小米路由器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiRouter</span> <span class="keyword">implements</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;小米路由器&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shotDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openWifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 华为路由器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiRouter</span> <span class="keyword">implements</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;华为路由器&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shotDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openWifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(NAME + <span class="string">&quot;开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品工厂</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">IPhoneProduct <span class="title">createPhoneProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IRouterProduct <span class="title">createRouterProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiFactory</span> <span class="keyword">implements</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPhoneProduct <span class="title">createPhoneProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaomiPhone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRouterProduct <span class="title">createRouterProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaomiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> <span class="keyword">implements</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPhoneProduct <span class="title">createPhoneProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiPhone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRouterProduct <span class="title">createRouterProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------小米系列产品------------&quot;</span>);</span><br><span class="line">        IProductFactory xiaomiFactory = <span class="keyword">new</span> XiaomiFactory();</span><br><span class="line">        IPhoneProduct xiaomiFactoryPhoneProduct = xiaomiFactory.createPhoneProduct();</span><br><span class="line">        xiaomiFactoryPhoneProduct.start();</span><br><span class="line">        xiaomiFactoryPhoneProduct.call();</span><br><span class="line"></span><br><span class="line">        IRouterProduct xiaomiFactoryRouterProduct = xiaomiFactory.createRouterProduct();</span><br><span class="line">        xiaomiFactoryRouterProduct.start();</span><br><span class="line">        xiaomiFactoryRouterProduct.openWifi();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------华为系列产品------------&quot;</span>);</span><br><span class="line">        IProductFactory huaweiFactory = <span class="keyword">new</span> HuaweiFactory();</span><br><span class="line">        IPhoneProduct huaweiPhoneProduct = huaweiFactory.createPhoneProduct();</span><br><span class="line">        huaweiPhoneProduct.start();</span><br><span class="line">        huaweiPhoneProduct.call();</span><br><span class="line"></span><br><span class="line">        IRouterProduct huaweiRouterProduct = huaweiFactory.createRouterProduct();</span><br><span class="line">        huaweiRouterProduct.start();</span><br><span class="line">        huaweiRouterProduct.openWifi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat</title>
    <url>/2021/02/25/%E8%BD%AF%E4%BB%B6/Navicat/</url>
    <content><![CDATA[<h2 id="Navicat快捷键"><a href="#Navicat快捷键" class="headerlink" title="Navicat快捷键"></a>Navicat快捷键</h2><a id="more"></a>

<blockquote>
<h4 id="执行选中的sql语句-run"><a href="#执行选中的sql语句-run" class="headerlink" title="执行选中的sql语句  run"></a>执行选中的sql语句  run</h4></blockquote>
<p>Ctrl + shift + R</p>
<blockquote>
<h4 id="执行窗口的sql语句"><a href="#执行窗口的sql语句" class="headerlink" title="执行窗口的sql语句"></a>执行窗口的sql语句</h4></blockquote>
<p>Ctrl + R</p>
<blockquote>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4></blockquote>
<p>Ctrl + /</p>
<blockquote>
<h4 id="解除注释"><a href="#解除注释" class="headerlink" title="解除注释"></a>解除注释</h4></blockquote>
<p>Ctrl + shift + /</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>idea</title>
    <url>/2021/03/09/%E8%BD%AF%E4%BB%B6/idea/</url>
    <content><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><a id="more"></a>

<h2 id="1-快捷键搜索"><a href="#1-快捷键搜索" class="headerlink" title="1. 快捷键搜索"></a>1. 快捷键搜索</h2><p><img src="image-20210429092907560.png" alt="image-20210429092907560"></p>
<h2 id="2-列举类中所有的方法"><a href="#2-列举类中所有的方法" class="headerlink" title="2. 列举类中所有的方法"></a>2. 列举类中所有的方法</h2><p>eclips中使用：</p>
<p>File Structure    Ctrl + F3 / Ctrl + O</p>
<h2 id="3-代码自动缩进行-格式整理"><a href="#3-代码自动缩进行-格式整理" class="headerlink" title="3. 代码自动缩进行(格式整理)"></a>3. 代码自动缩进行(格式整理)</h2><p>settings –&gt; Keymap –&gt; Main menu –&gt; Code –&gt; Auto-Indent Lines</p>
<p><img src="image-20210309145729038.png" alt="image-20210309145729038"></p>
<h2 id="4-搜索"><a href="#4-搜索" class="headerlink" title="4. 搜索"></a>4. 搜索</h2><h3 id="4-1-搜索项目中所有类"><a href="#4-1-搜索项目中所有类" class="headerlink" title="4.1 搜索项目中所有类"></a>4.1 搜索项目中所有类</h3><p>double shift</p>
<h3 id="4-2-全局搜索Search-Everywhere"><a href="#4-2-全局搜索Search-Everywhere" class="headerlink" title="4.2. 全局搜索Search Everywhere"></a>4.2. 全局搜索Search Everywhere</h3><p><img src="idea/image-20210705185649501.png" alt="image-20210705185649501"></p>
<h2 id="5-查看类的继承结构"><a href="#5-查看类的继承结构" class="headerlink" title="5. 查看类的继承结构"></a>5. 查看类的继承结构</h2><p>F4</p>
<h1 id="查看UML类图"><a href="#查看UML类图" class="headerlink" title="查看UML类图"></a>查看UML类图</h1><h2 id="1-开启"><a href="#1-开启" class="headerlink" title="1. 开启"></a>1. 开启</h2><p>ctrl + shift + alt + u</p>
<p><img src="image-20210414181238581.png" alt="image-20210414181238581"></p>
<h2 id="2-构成"><a href="#2-构成" class="headerlink" title="2.  构成"></a>2.  构成</h2><p>虚线箭头表示实现 implements</p>
<p>实线箭头表示集成extends</p>
<p><img src="image-20210414181617752.png" alt="image-20210414181617752"></p>
<p>fields    字段</p>
<p>constructors    构造函数</p>
<p>methods    方法</p>
<p>properties    类属性</p>
<p>Inner Classes    内置类</p>
<h2 id="3-使用快捷键"><a href="#3-使用快捷键" class="headerlink" title="3. 使用快捷键"></a>3. 使用快捷键</h2><p>alt    放大镜</p>
<p>ctrl + 左键    拖动</p>
<h1 id="清除idea缓存"><a href="#清除idea缓存" class="headerlink" title="清除idea缓存"></a>清除idea缓存</h1><p><img src="image-20210309165824345.png" alt="image-20210309165824345"></p>
<h2 id="项目引入依赖文件夹中明明有仍然报找不到"><a href="#项目引入依赖文件夹中明明有仍然报找不到" class="headerlink" title="项目引入依赖文件夹中明明有仍然报找不到"></a>项目引入依赖文件夹中明明有仍然报找不到</h2><p>原因可能为idea缓存问题，清除缓存即可</p>
<h1 id="idea直接连接数据库"><a href="#idea直接连接数据库" class="headerlink" title="idea直接连接数据库"></a>idea直接连接数据库</h1><p><img src="image-20210507183953783.png" alt="image-20210507183953783"></p>
<p><img src="image-20210507184045664.png" alt="image-20210507184045664"></p>
<p><img src="image-20210507184104430.png" alt="image-20210507184104430"></p>
<h1 id="多项目启动展示-Group-Tabs"><a href="#多项目启动展示-Group-Tabs" class="headerlink" title="多项目启动展示-Group Tabs"></a>多项目启动展示-Group Tabs</h1><p><img src="image-20210312093529999.png" alt="image-20210312093529999"></p>
<p>未打钩时</p>
<p><img src="image-20210312093617360.png" alt="image-20210312093617360"></p>
<p>打钩时</p>
<p><img src="image-20210312093643838.png" alt="image-20210312093643838"></p>
<h1 id="项目启动报错"><a href="#项目启动报错" class="headerlink" title="项目启动报错"></a>项目启动报错</h1><p>错误重现，用run模式启动项目的时候没出现此问题，但是使用debug模式下启动项目的时候就出现此问题。</p>
<p><img src="903105852599.png" alt="img"></p>
<p><strong>解决方案！</strong></p>
<p>  修改项目下 .idea\workspace.xml，找到标签 <strong><component name="PropertiesComponent"></strong> ， 在标签里加一行 </p>
<p><strong><property name="dynamic.classpath" value="true" /></strong></p>
<h1 id="多级目录展示问题"><a href="#多级目录展示问题" class="headerlink" title="多级目录展示问题"></a>多级目录展示问题</h1><p>合并展示，问题：创建新目录时若该目录下没有其他文件则文件夹名会合并并使用.分隔</p>
<p><img src="image-20210430102944901.png" alt="image-20210430102944901"></p>
<p>取消该展示模式：取消勾选compact middle packages</p>
<p><img src="image-20210430103116382.png" alt="image-20210430103116382"></p>
<h1 id="修改已打开文件的展示"><a href="#修改已打开文件的展示" class="headerlink" title="修改已打开文件的展示"></a>修改已打开文件的展示</h1><p><img src="image-20210616152612213.png" alt="image-20210616152612213"></p>
<h1 id="查看文件在电脑中的位置"><a href="#查看文件在电脑中的位置" class="headerlink" title="查看文件在电脑中的位置"></a>查看文件在电脑中的位置</h1><p><img src="idea/image-20210621185716467.png" alt="image-20210621185716467"></p>
]]></content>
      <categories>
        <category>软件</category>
        <category>idea</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>进度</title>
    <url>/2021/02/23/%E8%BF%9B%E5%BA%A6/1.%20%E8%BF%9B%E5%BA%A6/</url>
    <content><![CDATA[<p>​    <del>——</del></p>
<a id="more"></a>

<h1 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h1><p>程序 = 数据结构 + 算法； 程序猿</p>
<p>程序 = 面向对象 + 框架； 码农</p>
<p>我曾七次鄙视自己的灵魂：<br>第一次，当它本可进取时，却故作谦卑；<br>第二次，当它在空虚时，用爱来填充；<br>第三次，在困难和容易之间，它选择了容易；<br>第四次，它犯了错，却借由别人也会犯错来宽慰自己；<br>第五次，它自由软弱，却把它认为是生命的坚韧；<br>第六次，当它鄙夷一张丑恶的嘴脸时，却不知那正是自己面具中的一副；<br>第七次，它侧身于生活的污泥中，虽不甘心，却又畏首畏尾</p>
<p><del>git    2021-03-01</del></p>
<p><del>nginx 2021-03-31</del></p>
<p>设计模式</p>
<p><del>单例模式    2021-04-08</del></p>
<p><del>工厂模式  2021-04-14</del></p>
<p>其他</p>
<p><del>mysql 2021-04-27</del></p>
<p><del>mybitesplus</del></p>
<p><del>redis 2021-06-09</del></p>
<p>JUC</p>
<p>SpringBoot   </p>
<p>2021-07-29  <a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=20&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV19K4y1L7MT?p=20&amp;spm_id_from=pageDriver</a></p>
<p>2021-08-04  <a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=25">https://www.bilibili.com/video/BV19K4y1L7MT?p=25</a></p>
<p>SpringCloud 阿里巴巴</p>
<p>Serializable接口作用</p>
<p>RPC</p>
<p>Dubbo</p>
<p>数据库读写分离</p>
<p>xxl-job</p>
<p>kafka</p>
<p>==docker   p9 5.00==</p>
<p>多线程详解</p>
<p>注解和反射</p>
<p>k8s-Kubernetes</p>
<h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总."></a>汇总.</h1><h2 id="汇总-1"><a href="#汇总-1" class="headerlink" title="汇总"></a>汇总</h2><p>Memcache    内存缓存集群</p>
<p>敏捷开发、极限编程、协同开发</p>
<h2 id="需要掌握的数据库："><a href="#需要掌握的数据库：" class="headerlink" title="需要掌握的数据库："></a>需要掌握的数据库：</h2><p>KV数据库：redis</p>
<p>文档数据库：MongoDB</p>
<p>列存储数据库：HBase</p>
<p>图关系数据库：Neo4j</p>
<h2 id="没有什么是加一层解决不了的"><a href="#没有什么是加一层解决不了的" class="headerlink" title="没有什么是加一层解决不了的"></a>没有什么是加一层解决不了的</h2><h2 id="去IOE"><a href="#去IOE" class="headerlink" title="去IOE"></a>去IOE</h2><p>推荐文章：  阿里云的这群疯子：<a href="https://baijiahao.baidu.com/s?id=1614470478683083554&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1614470478683083554&amp;wfr=spider&amp;for=pc</a></p>
<p>I（IBM，服务器提供商，他们提供的服务器俗称“小型机”）</p>
<p>O（Oracle，数据库提供商，他们的软件是著名的“甲骨文商业数据库”）</p>
<p>E（EMC，存储设备提供商，他们提供的是“集中式存储”）。</p>
<p>一个问题是太贵。</p>
<p>那时候小型机价格大概是从几十万到百万人民币；商业数据库软件费用差不多几千万，外加一大笔维护费。王坚 08 年刚来阿里时就给马云算了算，按照这样的速度“剁手”，光是买机器和软件就足够让阿里破产。阿里得找到一种成本更低的技术架构。</p>
<p>另一个问题是不好用。</p>
<p>阿里在08-09年的时候，业务增长速度实在太快。每年都是十几二十倍，IOE 虽然都是美国公司，但事实证明美国的月亮也不会更圆。它们的系统并没有经受过服务几亿人这么大规模的考验，此时已经变得非常难用了。</p>
]]></content>
      <categories>
        <category>进度</category>
      </categories>
      <tags>
        <tag>进度</tag>
      </tags>
  </entry>
  <entry>
    <title>单词</title>
    <url>/2021/03/05/%E8%BF%9B%E5%BA%A6/2.%20%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><a id="more"></a>

<p>JetBrains</p>
<p>SpringSecurity        java权限框架</p>
<p>Security                    安全</p>
<p>authentication        身份认证</p>
<p>concurrent              并发的，一致的</p>
<p>unmodifiable           无法改变的</p>
<p>Collection                 集合</p>
<p>Single                        单独</p>
<p>Declared                   宣布的，公布的</p>
<p>factory                      工厂</p>
<p>instance                    实例</p>
<p>router                        路由</p>
<p>single                        单一</p>
<p>sign                            签名</p>
<p>boot                            启动，靴子</p>
<p>druid   [ˈdruːɪd]     jdbc线程池</p>
<p>Features                    特征、特点</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>runnable                    可运行的</p>
<p>blocked                      阻塞的</p>
<p>terminated                结束</p>
<p>Monitor                     管程，JAVA中称为锁，程序中称为监视器 </p>
<p>daemon                     守护，守护线程</p>
<p>Synchronized            同步的</p>
<p>reentrant lock          可重入锁</p>
<p>native                        当地的，土著，java与本地C代码进行互操作</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>exists                         存在</p>
<p>expire                        到期</p>
<p>flush                            冲洗</p>
<p>member                    成员，部位，redis查询集合中的值</p>
<p>score                            分数</p>
<p>sentinel                    哨兵</p>
<p>template                    模板</p>
<p>master/slave            主 / 从</p>
<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>product                    产品</p>
<p>rollback                    回滚</p>
<p>point                         指向</p>
<p>explain                     解释，说明  分析sql性能</p>
<p>ACID</p>
<p>Atomicity（原子性）</p>
<p>Consistency（一致性）</p>
<p>Isolation（隔离性）</p>
<p>Durability（持久性）</p>
<p>ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；</p>
<p>ISOLATIONREADUNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；</p>
<p>ISOLATIONREADCOMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别； ISOLATIONREPEATABLEREAD：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别； ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</p>
<p>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。 </p>
<p>不可重复读 ：是指在一个事务内，多次读同一数据。</p>
<p>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>RDB    redis database    指定时间对数据进行快照存储</p>
<p>AOF    append only file    每收到写的命令都通过write函数追加到文件中</p>
<h2 id="😱-🧐"><a href="#😱-🧐" class="headerlink" title="😱  🧐"></a>😱  🧐</h2><p>method        方法</p>
<p>framework        框架</p>
<p>field             字段</p>
<p>parameter    参数</p>
<p>constructor    构造方法</p>
<p>local variable    局部变量</p>
<p>annotation    注释、注解</p>
<p>package        包</p>
<p>generate        生成</p>
<p>deploy        部署</p>
<p>menu        菜单</p>
<p>category    类别</p>
<p>business     业务、事务</p>
<p>tag             标签</p>
<p>destroy        销毁</p>
<p>release         稳定版本  </p>
<p>debug         内部测试版本</p>
<p>exist          存在</p>
<p>component    组件</p>
<p>engine          引擎</p>
<p>schema        计划的提纲</p>
<p>studio             工作室</p>
<p>operation    log    操作 日志</p>
<p>middle          中部</p>
<p>concurrent      并发</p>
<p>arguments     论点</p>
<p>empty         空的</p>
<p>prototype      原型</p>
<p>instance        例子、实例</p>
<p>front         前面</p>
<p>common        常见的</p>
<p>community    社区</p>
<p>configuration    配置</p>
<p>Suppress     抑制；镇压；废止 </p>
<p>Warnings        警告</p>
<p>declared        公开的</p>
<p>cycle        周期</p>
<p>tail            跟踪</p>
<p>detail        详情</p>
<p>Elastic         弹性</p>
<p>Search        搜索</p>
<p>stack        堆栈</p>
<p>Ranking        排名</p>
<p>addr            地址</p>
<p>Beats        心跳</p>
<p>observer        观察者</p>
<p>subject        主题</p>
<p>upstream        上流</p>
<h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><p>broker        经纪人(服务器)</p>
<p>topic            主题</p>
<p>partition        分隔、隔断、分区</p>
<p>leader        领导</p>
<p>follower        跟随者</p>
<p>producer        生产者</p>
<p>consumer    消费者</p>
<p>cluster        集群</p>
<p>software        软件</p>
<p>unique        唯一</p>
<p>upper respiratory infection    上呼吸道感染</p>
<h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>shard        切片，碎片</p>
<p>pretty        漂亮的，美观的</p>
<p>bulk            大量的</p>
<p>zookeeper</p>
<p>event        事件</p>
<p>access        访问</p>
<p>scheme        方案</p>
<p>valid            有效的</p>
<p>await        等待</p>
<p>expire        期满，超时</p>
<p>cyclic        循环        sai ke lei ke </p>
<p>barrier        屏障        bai rui er</p>
<p>atomic        原子的</p>
<p>grep            正则表达式</p>
<p>transaction    事务</p>
<p>acquire        获取</p>
<p>release        释放</p>
<p>core            核心</p>
<p>current        现在的</p>
<p>register        登记</p>
<p>notify        通知</p>
<p>arguments     论据、论点</p>
<p>site            网站</p>
<p>apologize     道歉</p>
<p>insult        侮辱</p>
<p>truth            真理</p>
<p>westerns        西部的  西方？</p>
<p>difference     不同</p>
<p>human rights    人权</p>
<p>How dare they    他们怎么敢</p>
<p>feel ashame    感到羞耻</p>
<p>tax             税收</p>
<p>technology    技术</p>
<p>splunk        si pu lan ke</p>
<p>Thymeleaf        thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMaker等， 它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比， Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用。</p>
<p>开启某个功能@Enablexxx</p>
]]></content>
      <categories>
        <category>进度</category>
      </categories>
      <tags>
        <tag>进度</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2021/03/08/%E8%BF%9B%E5%BA%A6/3.%20%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><a id="more"></a>

<blockquote>
<h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象?"></a>什么是面向对象?</h3></blockquote>
<p>对比面向过程，是两种不同的处理问题的角度:</p>
<p>面向过程更注重事情的每一个步骤及顺序, 面向对象更注重事情有哪些参与者(对象)、及各自需要做什么比如:洗衣机洗衣服</p>
<p>面向过程会将任务拆解成一系列的步骤(函数)，1. 打开洗衣机—&gt;2.放衣—&gt;3.放洗衣—-&gt;4. 清洗—–&gt;5.烘干</p>
<p>面向对象会拆出人和洗衣机两个对象:</p>
<p>人: 打开洗衣机、放衣服、放洗衣粉</p>
<p>洗衣机: 清洗、烘干</p>
<p>从以上例子能看出，==面向过程比较直接高效==,而==面向对象更易于复用、扩展和维护==</p>
<blockquote>
<h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3></blockquote>
<p>==封装==：封装的意义，在于明确标识出允许外部使用的所有成员函数和数据项<br>外部调用无需修改或者关心内部实现</p>
<ol>
<li><code>javabean</code>的属性私有，提供get\set对外访问， 因为属性的赋值或者获取逻辑只能由<code>javabean</code>本身决定。而不能<br>由外部胡乱修改</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 该类name属性有自身的命名规范，明显不能由外部直接赋值</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">&quot;姓_&quot;</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>orm框架</p>
<p>操作数据库时，操作者不需要关心链接如何建立，sql如何执行，只需引入mybatis，调用方法即可</p>
</li>
</ol>
<p>==继承==：继承基类的方法，并做出自己的改变或扩展</p>
<p>子类共性的方法或者属性直接使用父类的,而不需要自己再定义，只需扩展自己个性化的</p>
<p>==多态==：基于对象所属类的不同,外部对同一个方法的调用,实际执行的逻辑不同。</p>
<h2 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h2>]]></content>
      <categories>
        <category>进度</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>其他</title>
    <url>/2021/03/08/%E8%BF%9B%E5%BA%A6/4.%20%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<p>脱敏处理</p>
<a id="more"></a>

<p>js宏观任务和微观任务</p>
<p>线性代数和数据结构算法</p>
<p>文件、输入输出流、数据库连接、网络连接、内存使用后都要释放资源</p>
]]></content>
  </entry>
  <entry>
    <title>项目</title>
    <url>/2021/03/31/%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="修改项目名"><a href="#修改项目名" class="headerlink" title="修改项目名"></a>修改项目名</h1><a id="more"></a>

<h2 id="1-修改项目文件夹名"><a href="#1-修改项目文件夹名" class="headerlink" title="1. 修改项目文件夹名"></a>1. 修改项目文件夹名</h2><p><img src="image-20210331161549183.png" alt="image-20210331161549183"></p>
<h2 id="2-修改pom-xml中的artifactId"><a href="#2-修改pom-xml中的artifactId" class="headerlink" title="2. 修改pom.xml中的artifactId"></a>2. 修改pom.xml中的artifactId</h2><p><img src="image-20210331161229291.png" alt="image-20210331161229291"></p>
<h2 id="3-修改Project中的名称"><a href="#3-修改Project中的名称" class="headerlink" title="3. 修改Project中的名称"></a>3. 修改Project中的名称</h2><p><img src="image-20210331161307053.png" alt="image-20210331161307053"></p>
<p><img src="image-20210331161335636.png" alt="image-20210331161335636"></p>
<p><img src="image-20210331161356632.png" alt="image-20210331161356632"></p>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="错误-找不到或无法加载主类-com-xxx-xxx-Application"><a href="#错误-找不到或无法加载主类-com-xxx-xxx-Application" class="headerlink" title="错误: 找不到或无法加载主类 com.xxx.xxx.Application"></a>错误: 找不到或无法加载主类 com.xxx.xxx.Application</h2><p>将maven清空重新编译，在IDEA编译器中分别执行以下命令：<br>mvn clean compile<br>mvn install</p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>cron表达式</title>
    <url>/2021/02/25/java/%E5%89%8D%E5%90%8E%E7%AB%AF/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>　　<strong>一、结构</strong></p>
<p>　　corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</p>
<p>​    <a id="more"></a></p>
<p>　　<strong>二、各字段的含义</strong></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒（Seconds）</td>
<td>0~59的整数</td>
<td>, - * /   四个字符</td>
</tr>
<tr>
<td>分（<em>Minutes</em>）</td>
<td>0~59的整数</td>
<td>, - * /   四个字符</td>
</tr>
<tr>
<td>小时（<em>Hours</em>）</td>
<td>0~23的整数</td>
<td>, - * /   四个字符</td>
</tr>
<tr>
<td>日期（<em>DayofMonth</em>）</td>
<td>1~31的整数（但是你需要考虑你月的天数）</td>
<td>,- * ? / L W C   八个字符</td>
</tr>
<tr>
<td>月份（<em>Month</em>）</td>
<td>1~12的整数或者 JAN-DEC</td>
<td>, - * /   四个字符</td>
</tr>
<tr>
<td>星期（<em>DayofWeek</em>）</td>
<td>1~7的整数或者 SUN-SAT （1=SUN）</td>
<td>, - * ? / L C #   八个字符</td>
</tr>
<tr>
<td>年(可选，留空)（<em>Year</em>）</td>
<td>1970~2099</td>
<td>, - * /   四个字符</td>
</tr>
</tbody></table>
<p>　　<strong>注意事项：</strong></p>
<p>　　每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p>
<p>　　（1）<em>：表示匹配该域的任意值。假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</p>
<p>　　（2）?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</p>
<p>　　（3）-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p>
<p>　　（4）/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. </p>
<p>　　（5）,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p>
<p>　　（6）L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p>
<p>　　（7）W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p>
<p>　　（8）LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p>
<p>　　（9）#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p>
<p>　　<strong>三、常用表达式例子</strong></p>
<p>　　（1）<strong>0 0 2 1 * ? *</strong>  表示在每月的1日的凌晨2点调整任务</p>
<p>　　（2）<strong>0 15 10 ? * MON-FRI</strong>  表示周一到周五每天上午10:15执行作业</p>
<p>　　（3）<strong>0 15 10 ? 6L 2002-2006</strong>  表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p>
<p>　　（4）<strong>0 0 10,14,16 * * ?</strong>  每天上午10点，下午2点，4点 </p>
<p>　　（5）<strong>0 0/30 9-17 * * ?</strong>  朝九晚五工作时间内每半小时 </p>
<p>　　（6）<strong>0 0 12 ? * WED</strong>   表示每个星期三中午12点 </p>
<p>　　（7）<strong>0 0 12 * * ?</strong>  每天中午12点触发 </p>
<p>　　（8）<strong>0 15 10 ? * *</strong>   每天上午10:15触发 </p>
<p>　　（9）<strong>0 15 10 * * ?</strong>   每天上午10:15触发 </p>
<p>　　（10）<strong>0 15 10 * * ? *</strong>   每天上午10:15触发 </p>
<p>　　（11）<strong>0 15 10 * * ? 2005</strong>   2005年的每天上午10:15触发 </p>
<p>　　（12）<strong>0 * 14 * * ?</strong>   在每天下午2点到下午2:59期间的每1分钟触发 </p>
<p>　　（13）<strong>0 0/5 14 * * ?</strong>   在每天下午2点到下午2:55期间的每5分钟触发 </p>
<p>　　（14）<strong>0 0/5 14,18 * * ?</strong>   在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </p>
<p>　　（15）<strong>0 0-5 14 * * ?</strong>   在每天下午2点到下午2:05期间的每1分钟触发 </p>
<p>　　（16）<strong>0 10,44 14 ? 3 WED</strong>   每年三月的星期三的下午2:10和2:44触发 </p>
<p>　　（17）<strong>0 15 10 ? * MON-FRI</strong>   周一至周五的上午10:15触发 </p>
<p>　　（18）<strong>0 15 10 15 * ?</strong>   每月15日上午10:15触发 </p>
<p>　　（19）<strong>0 15 10 L * ?</strong>   每月最后一日的上午10:15触发 </p>
<p>　　（20）<strong>0 15 10 ? * 6L</strong>   每月的最后一个星期五上午10:15触发 </p>
<p>　　（21）<strong>0 15 10 ? * 6L 2002-2005</strong>  2002年至2005年的每月的最后一个星期五上午10:15触发 </p>
<p>　　（22）<strong>0 15 10 ? * 6#3</strong>  每月的第三个星期五上午10:15触发</p>
<p>　　</p>
<p>　　<strong>注：</strong></p>
<p>　　（1）有些子表达式能包含一些范围或列表</p>
<p>　　例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”</p>
<p>“*”字符代表所有可能的值</p>
<p>　　因此，“<em>”在子表达式（月）里表示每个月的含义，“</em>”在子表达式（天（星期））表示星期的每一天</p>
<p>　　“/”字符用来指定数值的增量<br>　　例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟<br>在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样</p>
<p>　　“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值<br>　　当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”</p>
<p>　　“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写<br>　　但是它在两个子表达式里的含义是不同的。<br>　　在天（月）子表达式中，“L”表示一个月的最后一天<br>　　在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT</p>
<p>　　如果在“L”前有具体的内容，它就具有其他的含义了</p>
<p>　　例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五<br>　　注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题</p>
]]></content>
      <tags>
        <tag>定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2021/02/25/java/%E5%89%8D%E5%90%8E%E7%AB%AF/%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="前端请求后端跨域"><a href="#前端请求后端跨域" class="headerlink" title="前端请求后端跨域"></a>前端请求后端跨域</h1><h2 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h2><p>问题描述中一般带有 CORS 字眼</p>
<p><img src="image-20210601105804794.png" alt="image-20210601105804794"></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-添加拦截器"><a href="#1-添加拦截器" class="headerlink" title="1. 添加拦截器"></a>1. 添加拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xatali.signplatform.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.utils.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; widthList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        widthList = Arrays.asList(<span class="string">&quot;/merchant/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求对象</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">//2.获取响应对象</span></span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PUT, OPTIONS, DELETE, TRACE, PATCH, HEAD&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// OPTIONS 请求直接放行，OPTIONS请求也需要设置返回体格式否则也会报错</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (widthList.contains(request.getServletPath()))</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">        String header = ((HttpServletRequest) servletRequest).getHeader(<span class="string">&quot;x-token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(header) || redisUtils.get(header) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.setStatus(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.2.如何令牌合法，则放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="2-添加注解开放接口"><a href="#2-添加注解开放接口" class="headerlink" title="2. 添加注解开放接口"></a>2. 添加注解开放接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600)</span></span><br></pre></td></tr></table></figure>


<h1 id="Spring-Security跨域"><a href="#Spring-Security跨域" class="headerlink" title="Spring Security跨域"></a>Spring Security跨域</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 解决跨域问题</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.cors().disable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 开放 OPTIONS 类型的请求</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">    web.ignoring().antMatchers(HttpMethod.OPTIONS, <span class="string">&quot;/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="返回体跨域"><a href="#返回体跨域" class="headerlink" title="返回体跨域"></a>返回体跨域</h1><p>当请求可以到达后端，而请求返回时，前端依然报跨域的错，此时可能是请求体的问题，需要设置请求体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要在请求体重设置 Access-Control-Allow-Origin</span></span><br><span class="line">httpServletResponse.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>java</category>
        <category>前后端</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>部署</title>
    <url>/2021/03/08/java/%E9%83%A8%E7%BD%B2/vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="vue项目部署"><a href="#vue项目部署" class="headerlink" title="vue项目部署"></a>vue项目部署</h1><a id="more"></a>

<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>当项目中涉及页面切换时：</p>
<p>当跳转至外部页面时，使用  window.open(“/SeparateSystem”, ‘_self’);</p>
<p>当进行组件跳转时，使用  this.$router.push({path: ‘/SeparateSystem’})</p>
<h3 id="vue-config-js文件"><a href="#vue-config-js文件" class="headerlink" title="vue.config.js文件"></a>vue.config.js文件</h3><p>修改配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">publicPath: <span class="string">&#x27;./&#x27;</span>,	<span class="comment">// 资源路径</span></span><br><span class="line">assetsDir: <span class="string">&#x27;static&#x27;</span>, 	<span class="comment">// 静态资源存储路径</span></span><br><span class="line">outputDir: <span class="string">&#x27;sign&#x27;</span>,		<span class="comment">// 打包后项目名</span></span><br><span class="line">productionSourceMap:<span class="literal">false</span>,</span><br><span class="line">lintOnSave: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>
<p>全部配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    assetsDir: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    outputDir: <span class="string">&#x27;sign&#x27;</span>,</span><br><span class="line">    productionSourceMap:<span class="literal">false</span>,</span><br><span class="line">    lintOnSave: <span class="literal">true</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">3001</span>, <span class="comment">// 端口号</span></span><br><span class="line">        host: process.env.HOST || <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">//配置自动启动浏览器,</span></span><br><span class="line">        hot: <span class="literal">false</span>,</span><br><span class="line">        inline:<span class="literal">false</span>, <span class="comment">//控制是否热更新</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// target: &#x27;http://192.168.11.121:8081&#x27;,  //要跨域的域名(本地)</span></span><br><span class="line">                target:<span class="string">&#x27;http://192.168.11.110:9001&#x27;</span>, <span class="comment">//(云)</span></span><br><span class="line">                ws: <span class="literal">true</span>, <span class="comment">// 是否启用websockets</span></span><br><span class="line">                secure: <span class="literal">false</span>, <span class="comment">// 使用的是http协议则设置为false，https协议则设置为true</span></span><br><span class="line">                changOrigin: <span class="literal">true</span>,  <span class="comment">//是否允许跨域</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//scss变量文件配置,在路径scss中声明的变量可在全局进行使用</span></span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            sass: &#123;</span><br><span class="line">                prependData: <span class="string">`@import &quot;@/assets/css/variable.scss&quot;;`</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><p>修改 mode 为 hash</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mode: <span class="string">&#x27;hash&#x27;</span>,</span><br></pre></td></tr></table></figure>


<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>可直接将项目放置在服务器上</p>
<p>如：/usr/local/sign</p>
<p>然后在nginx中添加映射，主要配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /sign &#123;</span><br><span class="line">    <span class="built_in">alias</span>     /usr/<span class="built_in">local</span>/sign;</span><br><span class="line">    autoindex on;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<p>nginx所有配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">	keepalive_timeout  100;</span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 1000m;</span><br><span class="line">	upstream history_server &#123;</span><br><span class="line">		server localhost:8080;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location  / &#123;</span><br><span class="line">			root   /usr/<span class="built_in">local</span>/dist;</span><br><span class="line">			index  index.html;</span><br><span class="line">		&#125;</span><br><span class="line">		location  /admin &#123;</span><br><span class="line">			<span class="built_in">alias</span>   /usr/<span class="built_in">local</span>/admin;</span><br><span class="line">			index  index.html;</span><br><span class="line">		&#125;</span><br><span class="line">		location  /ydwy &#123;</span><br><span class="line">			<span class="built_in">alias</span>   /usr/<span class="built_in">local</span>/<span class="built_in">test</span>;</span><br><span class="line">			index  index.html;</span><br><span class="line">		&#125;</span><br><span class="line">		location /images/ &#123;</span><br><span class="line">			<span class="built_in">alias</span>     /opt/;</span><br><span class="line">			autoindex on;</span><br><span class="line">		&#125;  </span><br><span class="line">		location /sign &#123;</span><br><span class="line">			<span class="built_in">alias</span>     /usr/<span class="built_in">local</span>/sign;</span><br><span class="line">			autoindex on;</span><br><span class="line">		&#125;  </span><br><span class="line">		location /theChangeWithoutWorry &#123;</span><br><span class="line"></span><br><span class="line">			rewrite ^/theChangeWithoutWorry/(.*) /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">			proxy_pass http://history_server/;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		location /TheChangeWithoutWorryAdmin &#123;</span><br><span class="line"></span><br><span class="line">			rewrite ^/theChangeWithoutWorry/(.*) /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">				proxy_pass http://history_server/;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">			proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">			proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">			proxy_redirect off;</span><br><span class="line">			proxy_read_timeout 300;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> ( <span class="variable">$request_method</span> = OPTIONS ) &#123;</span><br><span class="line">				<span class="built_in">return</span> 200 <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment"># 允许跨越</span></span><br><span class="line">			add_header <span class="string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">			<span class="comment"># 允许的请求方法</span></span><br><span class="line">			add_header <span class="string">&quot;Access-Control-Allow-Methods&quot;</span> <span class="string">&quot;GET, POST, OPTIONS, PUT, HEAD, PATCH, DELETE&quot;</span>;</span><br><span class="line">			<span class="comment"># 头部中允许的参数</span></span><br><span class="line">			add_header <span class="string">&quot;Access-Control-Allow-Headers&quot;</span> <span class="string">&quot;Content-Type, Authorization, authorization, X-Requested-With, Session-Id, id&quot;</span>;</span><br><span class="line"></span><br><span class="line">			error_page   500 502 503 504  /50x.html;</span><br><span class="line">			location = /50x.html &#123;</span><br><span class="line">				root   html;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="vue代理设置"><a href="#vue代理设置" class="headerlink" title="vue代理设置"></a>vue代理设置</h1><p>当vue 项目全局不存在以下设置时：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// axios.defaults.baseURL = &quot;http://192.168.11.110:9001&quot;</span></span><br><span class="line"><span class="comment">// axios.defaults.baseURL = &quot;http://123.60.220.148:9001&quot;</span></span><br><span class="line"><span class="comment">// axios.defaults.withCredentials = true;</span></span><br></pre></td></tr></table></figure>


<p>其会经过 vue.config.js 中的 module.exports 的 proxy</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    assetsDir: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    outputDir: <span class="string">&#x27;sign&#x27;</span>,</span><br><span class="line">    productionSourceMap:<span class="literal">false</span>,</span><br><span class="line">    lintOnSave: <span class="literal">true</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">3001</span>, <span class="comment">// 端口号</span></span><br><span class="line">        host: process.env.HOST || <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">//配置自动启动浏览器,</span></span><br><span class="line">        hot: <span class="literal">false</span>,</span><br><span class="line">        inline:<span class="literal">false</span>, <span class="comment">//控制是否热更新</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// target: &#x27;http://192.168.11.121:8081&#x27;,  //要跨域的域名(本地)</span></span><br><span class="line">                target: <span class="string">&#x27;http://123.60.220.148:9001&#x27;</span>, <span class="comment">//(云)</span></span><br><span class="line">                ws: <span class="literal">true</span>, <span class="comment">// 是否启用websockets</span></span><br><span class="line">                secure: <span class="literal">false</span>, <span class="comment">// 使用的是http协议则设置为false，https协议则设置为true</span></span><br><span class="line">                changOrigin: <span class="literal">true</span>,  <span class="comment">//是否允许跨域</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//scss变量文件配置,在路径scss中声明的变量可在全局进行使用</span></span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            sass: &#123;</span><br><span class="line">                prependData: <span class="string">`@import &quot;@/assets/css/variable.scss&quot;;`</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="项目部署https和http问题"><a href="#项目部署https和http问题" class="headerlink" title="项目部署https和http问题"></a>项目部署https和http问题</h1><p>当前端项目如vue使用<code>nginx</code>代理的域名进行访问时，使用的协议为https：</p>
<p>前端项目访问路径<code>https://xxx.xxx.com.cn/sign/#/login</code>；</p>
<p>此时前端访问后端项目接口时就也得使用https协议访问：</p>
<p>后端项目与前段项目在一个服务器上部署；</p>
<p>后端接口路径为<code>http://192.168.11.110:9001</code>；</p>
<p>服务器nginx中添加代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /signapi &#123;</span><br><span class="line">    rewrite ^/signapi/(.*) /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    proxy_pass http://localhost:9001/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后端接口路径修改为<code>https://xxx.xxx.com.cn/signapi/</code>；</p>
<p>nginx会匹配 /signapi 并将其代理到服务器的 <code>http://localhost:9001/</code></p>
<p><img src="image-20210730104653231.png" alt="image-20210730104653231"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>部署</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中添加图片</title>
    <url>/2021/02/21/%E5%8D%9A%E5%AE%A2/hexo/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>在hexo根目录下执行如下命令</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-asset-image</span><br></pre></td></tr></table></figure>


<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开在hexo根目录下的 _config.yml 配置文件，找到 post_asset_folder 属性，默认为 false 改为 true</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>此时再执行命令 <code>hexo n test</code> 创建新的文章，</p>
<p>在 <code>source/_posts</code> 中会生成文章 <code>test.md</code> 和同名文件夹 <code>test</code>我们将文章中所使用到的将图片资源均放在 <code>test</code> 中，这时就可以在文章中使用相对路径引用图片资源了<br> <code>[img_name](img_name.jpg)  #文章中的图片资源路径格式</code></p>
<h5 id="创建后再将生成的文件及用来存放图片的文件夹移动到文件夹中，图片依旧可以加载，可以此进行视觉分类"><a href="#创建后再将生成的文件及用来存放图片的文件夹移动到文件夹中，图片依旧可以加载，可以此进行视觉分类" class="headerlink" title="创建后再将生成的文件及用来存放图片的文件夹移动到文件夹中，图片依旧可以加载，可以此进行视觉分类"></a>创建后再将生成的文件及用来存放图片的文件夹移动到文件夹中，图片依旧可以加载，可以此进行视觉分类</h5><h5 id="首次进行图片上传可能会失败，原因未知"><a href="#首次进行图片上传可能会失败，原因未知" class="headerlink" title="首次进行图片上传可能会失败，原因未知"></a>首次进行图片上传可能会失败，原因未知</h5><p><img src="image-20210221172514240.png"></p>
]]></content>
      <tags>
        <tag>博客-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用</title>
    <url>/2021/02/24/%E5%8D%9A%E5%AE%A2/Typora/Typora%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="typora修改简单颜色样式"><a href="#typora修改简单颜色样式" class="headerlink" title="typora修改简单颜色样式"></a>typora修改简单颜色样式</h2><blockquote>
<h4 id="进入-视图-gt-开发者模式"><a href="#进入-视图-gt-开发者模式" class="headerlink" title="进入 视图 &gt; 开发者模式"></a>进入 视图 &gt; 开发者模式</h4></blockquote>
<a id="more"></a>

<p>会显示类似于浏览器的开发者模式窗口</p>
<p><img src="image-20210224100817244.png" alt="image-20210224100817244"></p>
<p>此时选择想要修改样式的内容</p>
<p><img src="image-20210224101056830.png" alt="image-20210224101056830"></p>
<p>修改完毕后右键Copy link address复制文件路径</p>
<p><img src="image-20210224101242695.png" alt="image-20210224101242695"></p>
<blockquote>
<h4 id="查找文件路径"><a href="#查找文件路径" class="headerlink" title="查找文件路径"></a>查找文件路径</h4></blockquote>
<p>  一般文件会有带盘符的完整路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">file:<span class="comment">///E:/6-17/workapp/util/Typora/resources/app//style/window.css</span></span><br></pre></td></tr></table></figure>


<p> 有的文件则以typora:开头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typora: 表示在typora安装目录中，一般为：Typora\resources\app</span></span><br><span class="line"><span class="comment">// userData 可看做style目录</span></span><br><span class="line">typora:<span class="comment">//userData\themes\github.css</span></span><br></pre></td></tr></table></figure>


<p>此时需要</p>
<p><img src="image-20210224103451712.png" alt="image-20210224103451712"></p>
<p>此时直接进入 typora://userData\themes 中</p>
<blockquote>
<h4 id="修改文件内容"><a href="#修改文件内容" class="headerlink" title="修改文件内容"></a>修改文件内容</h4></blockquote>
<p>根据行数及选择器名修改样式内容保存即可</p>
]]></content>
      <tags>
        <tag>博客-Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用</title>
    <url>/2021/02/21/%E5%8D%9A%E5%AE%A2/hexo/hexo%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="可以在md文章中添加-lt-more-gt-标签达成折叠文章的目的"><a href="#可以在md文章中添加-lt-more-gt-标签达成折叠文章的目的" class="headerlink" title="可以在md文章中添加&lt;!--more--&gt;标签达成折叠文章的目的"></a>可以在md文章中添加<code>&lt;!--more--&gt;</code>标签达成折叠文章的目的</h3><p>​    标签不能放置在文章开头，否则会被无视</p>
<a id="more"></a>



<h3 id="source-posts中的文件使用文件夹划分并不会达成分级的效果"><a href="#source-posts中的文件使用文件夹划分并不会达成分级的效果" class="headerlink" title="\source_posts中的文件使用文件夹划分并不会达成分级的效果"></a>\source_posts中的文件使用文件夹划分并不会达成分级的效果</h3><p>但可以依靠分包进行视觉上的区分</p>
<h3 id="可以不用添加标号，上传后文章目录会自动添加"><a href="#可以不用添加标号，上传后文章目录会自动添加" class="headerlink" title="可以不用添加标号，上传后文章目录会自动添加"></a>可以不用添加标号，上传后文章目录会自动添加</h3><h2 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h2><h3 id="md头的作用"><a href="#md头的作用" class="headerlink" title="md头的作用"></a>md头的作用</h3><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。支援多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分类  创建分类页 hexo new page categories</span></span><br><span class="line">categories: hexo</span><br><span class="line"><span class="comment">// 标签  创建标签页 hexo new page tags</span></span><br><span class="line">type: tags </span><br></pre></td></tr></table></figure>


<h3 id="hexo页面文章使用时间排序，最早的文章会放到最下边，"><a href="#hexo页面文章使用时间排序，最早的文章会放到最下边，" class="headerlink" title="hexo页面文章使用时间排序，最早的文章会放到最下边，"></a>hexo页面文章使用时间排序，最早的文章会放到最下边，</h3><p>所以可以通过修改头部的时间来对文章进行排序</p>
<h3 id="文件名并没有用，页面中最大的标题为文件头中title后的内容"><a href="#文件名并没有用，页面中最大的标题为文件头中title后的内容" class="headerlink" title="文件名并没有用，页面中最大的标题为文件头中title后的内容"></a>文件名并没有用，页面中最大的标题为文件头中title后的内容</h3><h3 id="将Hexo设置成中文"><a href="#将Hexo设置成中文" class="headerlink" title="将Hexo设置成中文"></a>将Hexo设置成中文</h3><p>很多文档和博客都将language设置成zh-Hans，结果登录个人站一直不能显示中文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">subtitle: Welcome</span><br><span class="line">description: you can enjoy a grander sight，if you climb to a greater height</span><br><span class="line">keywords:</span><br><span class="line">author: RedeeMi</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: </span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>
<p>找到next文件夹下的languages文件夹，看到zh-CN.yml，所以选择把languages设为zh-CN<br><img src="https://img-blog.csdnimg.cn/20201216200852675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMzE2OTEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: RedeeMi的个人站</span><br><span class="line">subtitle: Welcome</span><br><span class="line">description: you can enjoy a grander sight，if you climb to a greater height</span><br><span class="line">keywords:</span><br><span class="line">author: RedeeMi</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: </span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>
<p>如果还没有显示为中文，clean后再登录即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>


<h2 id="Hexo-next主题添加"><a href="#Hexo-next主题添加" class="headerlink" title="Hexo next主题添加"></a>Hexo next主题添加</h2><h3 id="Hexo-next主题添加访问统计"><a href="#Hexo-next主题添加访问统计" class="headerlink" title="Hexo next主题添加访问统计"></a>Hexo next主题添加访问统计</h3><h5 id="注：不同主题添加统计的方式不同"><a href="#注：不同主题添加统计的方式不同" class="headerlink" title="注：不同主题添加统计的方式不同"></a>注：不同主题添加统计的方式不同</h5><h4 id="1-打开next主题配置文件-themes-next-config-yml，搜索找到busuanzi-count，把enable设置为true"><a href="#1-打开next主题配置文件-themes-next-config-yml，搜索找到busuanzi-count，把enable设置为true" class="headerlink" title="1. 打开next主题配置文件\themes\next\_config.yml，搜索找到busuanzi_count，把enable设置为true"></a>1. 打开next主题配置文件\themes\next\_config.yml，搜索找到<strong>busuanzi_count</strong>，把enable设置为true</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Show Views / Visitors of the website / page with busuanzi.#展示访问数</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  total_visitors: true   #统计访客数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true    #统计访问数</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true   #统计文章阅读数</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>


<h4 id="2-同样是在next主题配置文件-themes-next-config-yml下，搜索footer，在它底下添加counter，设值为true"><a href="#2-同样是在next主题配置文件-themes-next-config-yml下，搜索footer，在它底下添加counter，设值为true" class="headerlink" title="2. 同样是在next主题配置文件\themes\next\_config.yml下，搜索footer，在它底下添加counter，设值为true"></a>2. 同样是在next主题配置文件\themes\next\_config.yml下，搜索<strong>footer</strong>，在它底下添加counter，设值为true</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 统计  </span><br><span class="line">counter: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>


<h4 id="3-来到themes-next-layout-partials，找到footer-swig文件，打开编辑，在底下添加代码"><a href="#3-来到themes-next-layout-partials，找到footer-swig文件，打开编辑，在底下添加代码" class="headerlink" title="3. 来到themes\next\layout\_partials，找到footer.swig文件，打开编辑，在底下添加代码"></a>3. 来到themes\next\layout\_partials，找到<strong>footer.swig</strong>文件，打开编辑，在底下添加代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>




<h3 id="Hexo-next主题添加搜索"><a href="#Hexo-next主题添加搜索" class="headerlink" title="Hexo next主题添加搜索"></a>Hexo next主题添加搜索</h3><h4 id="1-安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令："><a href="#1-安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令：" class="headerlink" title="1. 安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令："></a>1. 安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>


<h4 id="2-全局配置文件-config-yml，新增如下内容："><a href="#2-全局配置文件-config-yml，新增如下内容：" class="headerlink" title="2.全局配置文件_config.yml，新增如下内容："></a>2.全局配置文件_config.yml，新增如下内容：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 添加搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br></pre></td></tr></table></figure>


<h4 id="3-hexo主题配置文件（-themes-next-config-yml），修改local-search的enable为true："><a href="#3-hexo主题配置文件（-themes-next-config-yml），修改local-search的enable为true：" class="headerlink" title="3.hexo主题配置文件（\themes\next\_config.yml），修改local_search的enable为true："></a>3.hexo主题配置文件（\themes\next\_config.yml），修改local_search的enable为true：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: <span class="number">1</span></span><br></pre></td></tr></table></figure>


<h3 id="Hexo-NexT主题下开启其他菜单项，比如分类、标签、关于"><a href="#Hexo-NexT主题下开启其他菜单项，比如分类、标签、关于" class="headerlink" title="Hexo NexT主题下开启其他菜单项，比如分类、标签、关于"></a>Hexo NexT主题下开启其他菜单项，比如分类、标签、关于</h3><p>首先打开主题下的配置文件_config.yml，然后搜索menu找到如下配置项，将about、tags、categories前的#号去掉，就开启了关于、标签和分类标签，当然还有其他菜单项也可以开启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Menu Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> When running the site <span class="keyword">in</span> a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Usage: `Key: /link/ || icon`</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Key is the name of menu item. If the translation <span class="keyword">for</span> this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Value before `||` delimiter is the target link.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Value after `||` delimiter is the name of FontAwesome icon. If icon (with or without delimiter) is not specified, question icon will be loaded.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> External url should start with http:// or https://</span></span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line"><span class="meta">  #</span><span class="bash">schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>重新生成部署后，可以看到新增的菜单项，但是单击后会报如下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Cannot GET /about/</span><br><span class="line">Cannot GET /tags/</span><br><span class="line">Cannot GET /categories/</span><br></pre></td></tr></table></figure>

<p>这是因为你还需运行如下命令新建相关页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>


<p>运行结果如下，会再source文件下创建about、tags、categories文件夹，每个文件夹下还会创建一个index.md文件表示关于、标签页分类页面，编辑这三个MarkDown文件可以自定义这三个页面的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\hexo\blog&gt;hexo new page &quot;about&quot;</span><br><span class="line">INFO  Created: D:\hexo\blog\source\about\index.md</span><br><span class="line"></span><br><span class="line">D:\hexo\blog&gt;hexo new page &quot;tags&quot;</span><br><span class="line">INFO  Created: D:\hexo\blog\source\tags\index.md</span><br><span class="line"></span><br><span class="line">D:\hexo\blog&gt;hexo new page &quot;categories&quot;</span><br><span class="line">INFO  Created: D:\hexo\blog\source\categories\index.md</span><br></pre></td></tr></table></figure>


<p>还差最后一步，打开各页面对应的index.md文件，编辑如下内容，title和date是默认生成的，增加type即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: about</span><br><span class="line">date: 2019-06-25 19:16:17</span><br><span class="line"></span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">title: about</span><br><span class="line">date: 2019-06-25 19:16:17</span><br><span class="line"></span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">title: about</span><br><span class="line">date: 2019-06-25 19:16:17</span><br><span class="line"></span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Hexo-分类文章进行分级"><a href="#Hexo-分类文章进行分级" class="headerlink" title="Hexo 分类文章进行分级"></a>Hexo 分类文章进行分级</h3><p>添加分类页面成功后</p>
<p>文章添加<code>categories: 分类1</code>即可添加分类</p>
<p>添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">- 笔记</span><br><span class="line">- javascript</span><br><span class="line">- 面向对象编程</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">category: </span><br><span class="line">- 笔记</span><br><span class="line">- javascript</span><br><span class="line">- 面向对象编程</span><br></pre></td></tr></table></figure>
<p>即可进行分类分级</p>
]]></content>
      <tags>
        <tag>博客-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo指令</title>
    <url>/2021/02/21/%E5%8D%9A%E5%AE%A2/hexo/hexo%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>​    </p>
<h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>​    hexo new “文章名称”</p>
<a id="more"></a>

<p>​    或</p>
<p>​    hexo n “文章名称”</p>
<h3 id="清理页面"><a href="#清理页面" class="headerlink" title="清理页面"></a>清理页面</h3><p>hexo clean</p>
<h3 id="生成页面-generate"><a href="#生成页面-generate" class="headerlink" title="生成页面 (generate)"></a>生成页面 (generate)</h3><p>​    hexo g </p>
<h3 id="本地预览页面（show）"><a href="#本地预览页面（show）" class="headerlink" title="本地预览页面（show）"></a>本地预览页面（show）</h3><p>​    hexo s </p>
<h3 id="部署发布-deploy"><a href="#部署发布-deploy" class="headerlink" title="部署发布 (deploy)"></a>部署发布 (deploy)</h3><p>​    hexo d</p>
<h3 id="生成标签页面-页面文章头部需要添加-type-tags"><a href="#生成标签页面-页面文章头部需要添加-type-tags" class="headerlink" title="生成标签页面  页面文章头部需要添加  type: tags"></a>生成标签页面  页面文章头部需要添加  type: tags</h3><h3 id="文章通过添加（tags-标签）来添加标签"><a href="#文章通过添加（tags-标签）来添加标签" class="headerlink" title="文章通过添加（tags: 标签）来添加标签"></a>文章通过添加（tags: 标签）来添加标签</h3><p>​    hexo new page 标签</p>
<h3 id="生成分类页面-头部需要添加-type-categoriese"><a href="#生成分类页面-头部需要添加-type-categoriese" class="headerlink" title="生成分类页面  头部需要添加  type: categoriese"></a>生成分类页面  头部需要添加  type: categoriese</h3><h3 id="文章通过添加（categoriese-分类）来添加分类"><a href="#文章通过添加（categoriese-分类）来添加分类" class="headerlink" title="文章通过添加（categoriese: 分类）来添加分类"></a>文章通过添加（categoriese: 分类）来添加分类</h3><p>​    hexo new page 分类</p>
]]></content>
      <tags>
        <tag>博客-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加分类及标签</title>
    <url>/2021/02/21/%E5%8D%9A%E5%AE%A2/hexo/hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h1 id="Hexo-添加分类及标签"><a href="#Hexo-添加分类及标签" class="headerlink" title="Hexo 添加分类及标签"></a>Hexo 添加分类及标签</h1><p>生成的新文件夹都在source下也就是和放文章的文件夹一块 以下所有命令都是在博客文件目录下执行</p>
<a id="more"></a>

<h4 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1. 创建“分类”选项"></a>1. 创建“分类”选项</h4><p>生成“分类”页并添加tpye属性,进入博客目录。执行下方命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-04-22 14:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加type: “categories”到内容中，添加后是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>保存并关闭文件。</p>
<p>给文章添加“categories”属性</p>
<p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>
<h4 id="2-创建“标签”选项"><a href="#2-创建“标签”选项" class="headerlink" title="2. 创建“标签”选项"></a>2. 创建“标签”选项</h4><p>生成“标签”页并添加tpye属性，<code>页面进入标签页默认找tags目录</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-04-22 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加type: “tags”到内容中，添加后是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-04-24 15:40:24</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>保存并关闭文件。</p>
<p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: 2019-04-24 15:40:24</span><br><span class="line">categories: - Hexo</span><br><span class="line">tags: - 博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用</title>
    <url>/2021/03/05/%E6%8A%80%E6%9C%AF/Docker/Docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><a id="more"></a>

<blockquote>
<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示docker版本信息</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示docker更加详细的信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 帮助命令  或者docker <span class="built_in">help</span></span></span><br><span class="line">docker 命令 --help</span><br></pre></td></tr></table></figure>


<p>官网命令文档</p>
<p>网址：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p>
<p><img src="image-20210305181538559.png" alt="image-20210305181538559"></p>
<blockquote>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3></blockquote>
<blockquote>
<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3></blockquote>
]]></content>
      <categories>
        <category>技术</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装</title>
    <url>/2021/03/02/%E6%8A%80%E6%9C%AF/Docker/Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><a id="more"></a>

<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=793314303,480081697&fm=26&gp=0.jpg" alt="img"></p>
<p><strong>镜像（image）：</strong></p>
<p>docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像 ==&gt; run ==&gt; tomcat1容器（提供服务器），通过这个镜像可以创建多个容器（最终服务或者项目运行就是在容器中的）</p>
<p><strong>容器（container）：</strong></p>
<p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的。</p>
<p>可以将容器理解为一个简易的Linux系统</p>
<p>基本命令：启动、停止、删除</p>
<p><strong>仓库（repository）：</strong></p>
<p>仓库就是存放镜像的地方</p>
<p>仓库分为共有仓库和私有仓库</p>
<p>Docker Hub (默认)</p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote>
<h3 id="卸载旧的版本"><a href="#卸载旧的版本" class="headerlink" title="卸载旧的版本"></a>卸载旧的版本</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">            docker-client \</span><br><span class="line">            docker-client-latest \</span><br><span class="line">            docker-common \</span><br><span class="line">            docker-latest \</span><br><span class="line">            docker-latest-logrotate \</span><br><span class="line">            docker-logrotate \</span><br><span class="line">            docker-engine</span><br></pre></td></tr></table></figure>


<blockquote>
<h3 id="需要的安装包"><a href="#需要的安装包" class="headerlink" title="需要的安装包"></a>需要的安装包</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>


<blockquote>
<h3 id="设置镜像的仓库"><a href="#设置镜像的仓库" class="headerlink" title="设置镜像的仓库"></a>设置镜像的仓库</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo   # 国外镜像仓库</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">	https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>


<blockquote>
<p>更新yum软件包索引</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line">// centos8可能需要使用</span><br><span class="line">yum makecache timer</span><br></pre></td></tr></table></figure>




<blockquote>
<h3 id="安装docker相关的内容"><a href="#安装docker相关的内容" class="headerlink" title="安装docker相关的内容"></a>安装docker相关的内容</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker-ce 社区版本  ee企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>


<blockquote>
<p>安装报错</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: </span><br><span class="line"> Problem: problem with installed package buildah-1.15.1-2.module_el8.3.0+475+c50ce30b.x86_64</span><br><span class="line"></span><br><span class="line">  - package buildah-1.15.1-2.module_el8.3.0+475+c50ce30b.x86_64 requires runc &gt;= 1.0.0-26, but none of the providers can be installed</span><br><span class="line">  - package buildah-1.16.7-4.module_el8.3.0+699+d61d9c41.x86_64 requires runc &gt;= 1.0.0-26, but none of the providers can be installed</span><br><span class="line">  - package containerd.io-1.4.3-3.1.el8.x86_64 conflicts with runc provided by runc-1.0.0-68.rc92.module_el8.3.0+475+c50ce30b.x86_64</span><br><span class="line">  - package containerd.io-1.4.3-3.1.el8.x86_64 obsoletes runc provided by runc-1.0.0-68.rc92.module_el8.3.0+475+c50ce30b.x86_64</span><br><span class="line">  - package containerd.io-1.4.3-3.1.el8.x86_64 conflicts with runc provided by runc-1.0.0-70.rc92.module_el8.3.0+699+d61d9c41.x86_64</span><br><span class="line">  - package containerd.io-1.4.3-3.1.el8.x86_64 obsoletes runc provided by runc-1.0.0-70.rc92.module_el8.3.0+699+d61d9c41.x86_64</span><br><span class="line">  - cannot install the best candidate for the job</span><br><span class="line">  - package runc-1.0.0-56.rc5.dev.git2abd837.module_el8.3.0+569+1bada2e4.x86_64 is filtered out by modular filtering</span><br><span class="line">  - package runc-1.0.0-64.rc10.module_el8.3.0+479+69e2ae26.x86_64 is filtered out by modular filtering</span><br><span class="line">    (try to add &#x27;--allowerasing&#x27; to command line to replace conflicting packages or &#x27;--skip-broken&#x27; to skip uninstallable packages or &#x27;--nobest&#x27; to use not only best candidate packages)</span><br></pre></td></tr></table></figure>


<p>解决方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看是否安装podman</span></span><br><span class="line">rpm -q podman</span><br><span class="line">podman-1.4.2-5.module_el8.1.0+237+63e26edc.x86_64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除Podman</span></span><br><span class="line">dnf remove podman</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 未解决时</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入下面的命令继续安装：</span></span><br><span class="line">yum install --allowerasing docker-ce</span><br></pre></td></tr></table></figure>


<blockquote>
<h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker是否启动成功(查看版本信息)</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p><img src="image-20210304190851060.png" alt="image-20210304190851060"></p>
<blockquote>
<h3 id="运行hello-world"><a href="#运行hello-world" class="headerlink" title="运行hello-world"></a>运行hello-world</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker run hello-world</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 提示未寻找到hello-world镜像</span></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 执行pull远程拉取官方library/hello-world镜像</span></span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示拉取成功</span></span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:7e02330c713f93b1d3e4c5003350d0dbe215ca269dd1d84a4abc577908344b30</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行hello-world表示docker安装成功</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>


<blockquote>
<h3 id="查看下载的hello-world镜像在不在"><a href="#查看下载的hello-world镜像在不在" class="headerlink" title="查看下载的hello-world镜像在不在"></a>查看下载的hello-world镜像在不在</h3></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">hello-world   latest    bf756fb1ae65   14 months ago   13.3kB</span><br></pre></td></tr></table></figure>


<blockquote>
<h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><p>docker默认工作路径： /var/lib/docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载docker</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除文件目录</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>


<h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><ol>
<li><p>页面：<a href="https://homenew.console.aliyun.com/">https://homenew.console.aliyun.com</a></p>
<p><img src="image-20210305165612518.png" alt="image-20210305165612518"></p>
</li>
<li><p>找到镜像加速地址</p>
</li>
</ol>
<p><img src="image-20210305165715379.png" alt="image-20210305165715379"></p>
<pre><code>3. 配置使用</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://lz60pcen.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>


<h2 id="回顾HelloWorld的流程"><a href="#回顾HelloWorld的流程" class="headerlink" title="回顾HelloWorld的流程"></a>回顾HelloWorld的流程</h2><p><img src="image-20210305170945074.png" alt="qq登录的https://www.processon.com"></p>
<h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><h4 id="Docker是怎么工作的"><a href="#Docker是怎么工作的" class="headerlink" title="Docker是怎么工作的"></a>Docker是怎么工作的</h4><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问</p>
<p><img src="image-20210305173655204.png" alt="image-20210305173655204"></p>
<p>Linux服务器中可能存在多个客户端，客户端连接到后台的守护进程，通过守护进程操作docker容器中的资源，容器与虚拟机之间互相隔离，容器相当于一个小的Linux虚拟机，在其中运行的服务相对于整个linux服务器是独立的，如localhost:8080，这个8080在外界是无法访问的，同理容器与容器之间也是相互隔离的，若要在linux服务器中访问容器中的内容需要做一个联通</p>
<h4 id="Docker为什么比虚拟机快"><a href="#Docker为什么比虚拟机快" class="headerlink" title="Docker为什么比虚拟机快"></a>Docker为什么比虚拟机快</h4><ol>
<li>docker有着比虚拟机更少的抽象层</li>
<li>docker利用的是宿主机的内核，vm需要的是Guest OS</li>
</ol>
<p><img src="image-20210305173901308.png" alt="image-20210305173901308"></p>
<p>所以说，新建一个容器的时候，docker不需要像一个虚拟机一样重新加载一个操作系统内核，虚拟机是加载Guest OS，分钟级别的，而docker是利用宿主机的操作系统，省略了这个复杂的过程，为秒级。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker概念</title>
    <url>/2021/03/02/%E6%8A%80%E6%9C%AF/Docker/Docker%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h2><a id="more"></a>

<p>入门</p>
<ul>
<li><p>Docker概述</p>
</li>
<li><p>Docker安装</p>
</li>
<li><p>Docker命令</p>
<ul>
<li>镜像</li>
<li>容器</li>
<li>操作</li>
<li>……</li>
</ul>
</li>
<li><p>==Docker镜像==</p>
</li>
<li><p>==容器数据卷==</p>
</li>
</ul>
<p>构建镜像</p>
<ul>
<li>DockerFile</li>
</ul>
<p>基于网络</p>
<ul>
<li>Docker网络原理</li>
<li>IDEA整合Docker</li>
</ul>
<p>集群</p>
<ul>
<li>Docker Compose</li>
<li>Docker Swarm</li>
</ul>
<p>持续编程持续部署</p>
<ul>
<li>CI/CD Jenkins</li>
</ul>
<h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><blockquote>
<h3 id="Docker为什么出现"><a href="#Docker为什么出现" class="headerlink" title="Docker为什么出现"></a>Docker为什么出现</h3></blockquote>
<ol>
<li>一款产品：开发 – 上线，应用环境，应用配置</li>
<li>开发 – 运维。问题：我在我的电脑上可以运行！版本更新，导致服务不可用！对于运维来说，考验就十分大</li>
<li>环境配置十分麻烦，每台机器都要部署环境(集群Redis、ES、Hadoop……)，费时费力</li>
</ol>
<p>​    发布项目时，将项目带着环境一起发布(jar + (Redis + Mysql + jdk + ES))，项目带上环境安装打包！</p>
<p>​    </p>
<p>​    java —- apk —- 发布（应用商店） —- 客户使用apk —- 安装即可使用</p>
<p>​    java开发 —- jar + 环境 —- 打包项目带上环境 —- Docker仓库（类似于商店）—- 客户可直接下载发布的镜像 —- 直接运行即可</p>
<p>​    Docker的思想来自于集装箱</p>
<p>​    <img src="image-20210302155750048.png" alt="image-20210302155750048"></p>
<p>​    </p>
<p>​    多个应用使用的都是同一套环境可能存在端口冲突等问题</p>
<p>​    ==隔离==：Docker核心思想，打包装箱，每个箱子都是互相隔离的，即每个应用使用各自的环境</p>
<h2 id="Docker资源"><a href="#Docker资源" class="headerlink" title="Docker资源"></a>Docker资源</h2><p>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p>
<p><img src="image-20210302163351910.png" alt="image-20210302163351910"></p>
<p>官方文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p>
<p>Docker hub(类似于github的仓库)：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h2 id="Docker作用"><a href="#Docker作用" class="headerlink" title="Docker作用"></a>Docker作用</h2><blockquote>
<p>在容器技术出现前，都是使用的虚拟机技术，虚拟机和Docker的容器技术都是==虚拟化技术==</p>
</blockquote>
<p>虚拟机技术：在windows中装一个VMware，通过这个软件虚拟出来一台或多台电脑(特点：笨重，与真实的电脑是一样的)</p>
<p>容器技术：隔离，镜像，十分小巧，仅需运行镜像即可</p>
<blockquote>
<p>虚拟机技术</p>
</blockquote>
<p><img src="image-20210302172210980.png" alt="image-20210302172210980"></p>
<p>在windows中装一个VMware，通过这个软件虚拟出来一台或多台电脑(特点：笨重，与真实的电脑是一样的)</p>
<p>虚拟机技术缺点：</p>
<ol>
<li>资源占用十分多</li>
<li>冗余步骤多</li>
<li>启动慢</li>
</ol>
<blockquote>
<p>容器化技术</p>
</blockquote>
<p>==容器化技术不是模拟一个完整的操作系统==</p>
<p> <img src="image-20210302172812341.png" alt="image-20210302172812341">    </p>
<p>与虚拟机技术比较：</p>
<ul>
<li>传统虚拟机，虚拟出一套硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li>
<li>容器内的应用直接运行在宿主机的内核中，容器是没有自己的内核的，也没有虚拟硬件，所以就轻便了</li>
<li>每个容器之间互相隔离，每个容器内都有一个属于自己的文件系统，互不影响。</li>
</ul>
<blockquote>
<p>DevOps（开发、运维）</p>
</blockquote>
<p><strong>应用更快速的交付和部署</strong></p>
<p>传统：一堆帮助文档，安装程序</p>
<p>Docker：打包镜像发布测试，一键运行</p>
<p><strong>更便捷的升级和扩缩容</strong></p>
<p>项目打包成一个镜像后，若需要从服务器A 扩展到 服务器B，仅需要在服务器B上运行镜像文件即可</p>
<p><strong>更简单的系统运维</strong></p>
<p>在容器化之后，开发与测试环境都是高度一致的</p>
<p><strong>更高效的计算资源利用</strong></p>
<p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例，服务器性能可以被压榨极致。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK-stack说明</title>
    <url>/2021/03/17/%E6%8A%80%E6%9C%AF/ELK%20stack/0.%20ELK-stack%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><a id="more"></a>

<p>官网</p>
<p><a href="https://www.elastic.co/cn/what-is">https://www.elastic.co</a></p>
<p>官方详细说明</p>
<p><a href="https://www.elastic.co/cn/what-is">https://www.elastic.co/cn/what-is</a></p>
<p>文件存储：</p>
<p>G:\软件\编程\分布式集群\ELK\资料-Elastic Stack 从入门到实践</p>
<h2 id="ELK概念"><a href="#ELK概念" class="headerlink" title="ELK概念"></a>ELK概念</h2><p><strong>需求背景：</strong></p>
<ul>
<li>业务发展越来越庞大，服务器越来越多</li>
<li>各种访问日志、应用日志、错误日志量越来越多，导致运维人员无法很好的去管理日志</li>
<li>开发人员排查问题，需要到服务器上查日志，不方便</li>
<li>运营人员需要一些数据，需要我们运维到服务器上分析日志</li>
</ul>
<p><strong>为什么要用到ELK：</strong></p>
<p>一般我们需要进行日志分析场景：直接在日志文件中 grep、awk 就可以获得自己想要的信息。但在规模较大也就是日志量多而复杂的场景中，此方法效率低下，面临问题包括日志量太大如何归档、文本搜索太慢怎么办、如何多维度查询。需要集中化的日志管理，所有服务器上的日志收集汇总。常见解决思路是建立集中式日志收集系统，将所有节点上的日志统一收集，管理，访问。</p>
<p>大型系统通常都是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。</p>
<p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p>
<ul>
<li>收集－能够采集多种来源的日志数据</li>
<li>传输－能够稳定的把日志数据传输到中央系统</li>
<li>存储－如何存储日志数据</li>
<li>分析－可以支持 UI 分析</li>
<li>警告－能够提供错误报告，监控机制</li>
</ul>
<p>而ELK则提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。是目前主流的一种日志系统。</p>
<p><strong>ELK简介：</strong></p>
<p>ELK是三个开源软件的缩写，分别为：Elasticsearch 、 Logstash以及Kibana , 它们都是开源软件。不过现在还新增了一个Beats，它是一个轻量级的日志收集处理工具(Agent)，Beats占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具，目前由于原本的ELK Stack成员中加入了 Beats 工具所以已改名为Elastic Stack。</p>
<p>Elastic Stack包含：</p>
<ul>
<li>Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。详细可参考<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">Elasticsearch权威指南</a></li>
<li>Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</li>
<li>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</li>
<li>Beats在这里是一个轻量级日志采集器，其实Beats家族有6个成员，早期的ELK架构中使用Logstash收集、解析日志，但是Logstash对内存、cpu、io等资源消耗比较高。相比 Logstash，Beats所占系统的CPU和内存几乎可以忽略不计</li>
</ul>
<p>ELK Stack （5.0版本之后）–&gt; Elastic Stack == （ELK Stack + Beats）。目前Beats包含六种工具：</p>
<ul>
<li>Packetbeat： 网络数据（收集网络流量数据）</li>
<li>Metricbeat： 指标 （收集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li>
<li>Filebeat： 日志文件（收集文件数据）</li>
<li>Winlogbeat： windows事件日志（收集 Windows 事件日志数据）</li>
<li>Auditbeat：审计数据 （收集审计日志）</li>
<li>Heartbeat：运行时间监控 （收集系统运行时的数据）</li>
</ul>
<p>关于x-pack工具：</p>
<ul>
<li>x-pack对Elastic Stack提供了安全、警报、监控、报表、图表于一身的扩展包，是收费的，所以本文不涉及x-pack的安装</li>
</ul>
<p>ELK架构图：</p>
<p><img src="clipboard.png" alt="img"></p>
<p>首先beat采集数据，之后可以有两条途径：1. 直接发送elasticsearch储存起来；2. 发送logstash经过logstash处理后发送给elasticsearch</p>
<p>最后在kibana进行数据可视化</p>
<p><img src="928160625881.png" alt="img"></p>
<p><img src="clipboard.png" alt="img"></p>
<h2 id="安装部署结构"><a href="#安装部署结构" class="headerlink" title="安装部署结构"></a>安装部署结构</h2><p>存在多个应用服务器AppServer，每个服务器上都要安装Logstash用来上传本机的日志存储到ElasticSearch(现使用beats进行文件收集)，为保险起见应部署多个ElasticSearch服务器(防止挂了)，Kibana获取ElasticSearch服务器中存储的数据整理成页面供用户查看</p>
<p>用户查看时，查看Logstash服务器什么也不能查到，查看ElasticSearch服务器，查看到的是一大堆日志不够立体，查看Kibana可以看到整理过的数据页面</p>
<h3 id="Elasticsearch-核心"><a href="#Elasticsearch-核心" class="headerlink" title="Elasticsearch (核心)"></a>Elasticsearch (核心)</h3><p>Elasticsearch基于java ,是个开源分布式搜索引擎,它的特点有:分布式,零配置,自动发现,索引自动分片,索引副本机制, restful风格接口,多数据源,自动搜索负载等。</p>
<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题。</p>
<p>Elasticsearch (yi la si tei ke se chi) 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p>
<p>Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于 2010 年首次发布。Elasticsearch 以其简单的 REST 风格 API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana），目前 Elastic Stack 包括一系列丰富的轻量型数据采集代理，这些代理统称为 Beats，可用来向 Elasticsearch 发送数据。</p>
<p>与mysql的区别：mysql更倾向于做数据的持久化存储及管理，即CRUD，若单表达到百万级以上的数据，需要进行检索及查询，将会非常慢</p>
<p>mysql支持事务查询，而Elasticsearch不支持，需要实现事务功能时会很麻烦</p>
<h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>Logstash基于java ,是一个开源的用于收集，分析和存储日志的工具。</p>
<h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>Kibana基于nodejs ,也是一个开源和免费的工 具, Kibana可以为Logstash和ElasticSearch提供的日志分析友好的Web界面,可以汇总、分析和搜索重要数据日志。</p>
<h3 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h3><p>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch ，然后进行后续的数据分析活动。</p>
<p>Packetbeat：是一个网络数据包分析器，于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，期持ICMP (V4 and Vv6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议；</p>
<p>Filebeat：用于监控、收集服务器日志文件，其已取代logstash、forwarder；</p>
<p>Metricbeat：可定期获取外部系统的监控指标信息，可以监控、收集Apache、HAProxy、 MongoDBMySQL、 Nginx、 PostgreSQL、 Redis、 System、 Zookeeper等服务；</p>
<p>Winlogbeat：用于监控、收集Windows系统的日志信息；</p>
<h2 id="ELK多种架构及优劣"><a href="#ELK多种架构及优劣" class="headerlink" title="ELK多种架构及优劣"></a>ELK多种架构及优劣</h2><p><strong>1</strong>  <strong>架构一 Elasticsearch + Logstash + Kibana</strong></p>
<p>如图1，这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。建议供学习者和小规模集群使用。</p>
<p>此架构首先由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web Portal方便的对日志查询，并根据数据生成报表（详细过程和配置在此省略）。</p>
<p><img src="clipboard-1615972315837.png" alt="img"></p>
<p>图1 ELK架构一</p>
<p><strong>2</strong>  <strong>架构二 引入消息队列</strong></p>
<p>第二种架构（图2）引入了消息队列机制，位于各个节点上的Logstash Agent先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。</p>
<p><img src="ip_image003.jpeg" alt="img"></p>
<p>图2 ELK架构二</p>
<p>这种架构适合于较大集群的解决方案，但由于Logstash中心节点和Elasticsearch的负荷会比较重，可将他们配置为集群模式，以分担负荷，这种架构的优点在于引入了消息队列机制，均衡了网络传输，从而降低了网络闭塞尤其是丢失数据的可能性，但依然存在Logstash占用系统资源过多的问题。</p>
<p><strong>3</strong>  <strong>架构三 引入Logstash-forwarder</strong></p>
<p>第三种架构（图3）引入了Logstash-forwarder。首先，Logstash-forwarder将日志数据搜集并统一发送给主节点上的Logstash，Logstash分析、过滤日志数据后发送至Elasticsearch存储，并由Kibana最终将数据呈现给用户。</p>
<p><img src="ip_image005.jpeg" alt="img"></p>
<p>图3 ELK架构三</p>
<p>这种架构解决了Logstash在各计算机点上占用系统资源较高的问题。经测试得出，相比Logstash，Logstash-forwarder所占用系统CPU和MEM几乎可以忽略不计。另外，Logstash-forwarder和Logstash间的通信是通过SSL加密传输，起到了安全保障。如果是较大集群，用户亦可以如结构三那样配置logstash集群和Elasticsearch集群，引入High Available机制，提高数据传输和存储安全。更主要的配置多个Elasticsearch服务，有助于搜索和数据存储效率。但在此种架构下发现Logstash-forwarder和Logstash间通信必须由SSL加密传输，这样便有了一定的限制性。</p>
<p><strong>4</strong>  <strong>架构三 将Logstash-forwarder替换为Beats</strong></p>
<p>第四种架构（图4），将Logstash-forwarder替换为Beats。经测试，Beats满负荷状态所耗系统资源和Logstash-forwarder相当，但其扩展性和灵活性有很大提高。Beats platform目前包含有Packagebeat、Topbeat和Filebeat三个产品，均为Apache 2.0 License。同时用户可根据需要进行二次开发。</p>
<p><img src="ip_image006.jpeg" alt="img"></p>
<p>图4 ELK架构四</p>
<p>这种架构原理基于第三种架构，但是更灵活，扩展性更强。同时可配置Logstash 和Elasticsearch 集群用于支持大集群系统的运维日志数据监控和查询。</p>
<p>不管采用上面哪种ELK架构，都包含了其核心组件，即：Logstash、Elasticsearch 和Kibana。当然这三个组件并非不能被替换，只是就性能和功能性而言，这三个组件已经配合的很完美，是密不可分的。各系统运维中究竟该采用哪种架构，可根据现实情况和架构优劣而定。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch及Head安装</title>
    <url>/2021/03/17/%E6%8A%80%E6%9C%AF/ELK%20stack/1.%20Elasticsearch%E5%8F%8AHead%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><a id="more"></a>

<ol>
<li>config 文件夹下的 elasticsearch.yml 文件中的network.host可设置允许访问的网络</li>
</ol>
<ol start="2">
<li><p>启动报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535] </span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决：在/etc/security/limits.conf文件中添加，(前边的*必须存在)</span> </span><br><span class="line">* soft nofile 65536 </span><br><span class="line">* hard nofile 131072 </span><br><span class="line">* soft nproc 2048 </span><br><span class="line">* hard nproc 4096 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[2]: max number of threads [1024] for user [elsearch] is too low, increase to at least [4096] </span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决：修改/etc/security/limits.d/90-nproc.conf</span> </span><br><span class="line">soft nproc 1024 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 为</span> </span><br><span class="line">soft nproc 4096 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[3]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk </span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决： config文件夹中 elasticsearch.yml 文件最后边添加</span> </span><br><span class="line">bootstrap.system_call_filter: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[4]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured </span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决： config文件夹中 elasticsearch.yml 文件</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置以下三者，最少其一</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">[discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes]</span> </span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;] # 这里的node-1为node.name配置的值，同时需要放开node.name</span><br></pre></td></tr></table></figure>


</li>
</ol>
<blockquote>
<p> 最好添加：</p>
<p>indices.fielddata.cache.size:  20%</p>
<p>防止缓存满却未及时清理导致报错</p>
<p>修改完后最好使用exit退出登录，然后重新登录</p>
</blockquote>
<p>其余报错解决方法：        <a href="https://www.cnblogs.com/zhi-leaf/p/8484337.html">https://www.cnblogs.com/zhi-leaf/p/8484337.html</a></p>
<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于 2010 年首次发布。Elasticsearch 以其简单的 REST 风格 API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana），目前 Elastic Stack 包括一系列丰富的轻量型数据采集代理，这些代理统称为 Beats，可用来向 Elasticsearch 发送数据。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>​    网址</p>
<p>​    <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
<h3 id="单机版安装"><a href="#单机版安装" class="headerlink" title="单机版安装"></a>单机版安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建elsearch用户，Elasticsearch不支持root用户运行</span> </span><br><span class="line">useradd elsearch </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压安装包</span> </span><br><span class="line">tar -zxvf elasticsearch-7.10.2-linux-x86_64.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改config文件夹中的 elasticsearch.yml 文件</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 network.host 为0.0.0.0，意为任一网络均可访问</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明:在Elasticsearch中如果，network.host不是localhost或者127.0.0.1的话，就会认为是生产环境，</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 会对elasticsearch启动的要求比较高，我们的测试环境不一定能够满足，一股情况下需要修改2处配置，如下:</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 修改config文件夹中的 jvm.options 文件，</span></span><br><span class="line">-Xms1g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始堆内存</span></span><br><span class="line">-Xmx1g</span><br><span class="line"><span class="meta">#</span><span class="bash">最大堆内存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为</span> </span><br><span class="line">-Xms128m</span><br><span class="line">-Xmx128m </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 切换回root用户，修改一个进程在VMAs(虚拟内存区域)创建内存映射最大数量</span> </span><br><span class="line">vim /etc/sysctl.conf </span><br><span class="line">vm.max_map_count=655360 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 使配置生效</span> </span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p>启动需要依赖jdk, 解决方法为:</p>
<ol>
<li>开放根目录下的jdk权限，</li>
<li>在elsearch角色下安装jdk并配置在.bash_profile中</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动ES服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接启动</span></span><br><span class="line">./elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动</span></span><br><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure>
<p><img src="clipboard.png" alt="img"></p>
<p>表示安装并启动成功</p>
<h2 id="head工具的安装及实用"><a href="#head工具的安装及实用" class="headerlink" title="head工具的安装及实用"></a>head工具的安装及实用</h2><p>由于ES官方并没有为ES提供界面管理工具,仅仅是提供了后台的服务。elasticsearch-head是一 个为ES开发的一个页</p>
<p>面客户端工具,其源码托管于GitHub ,地址为: <a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p>
<p>head提供了4种安装方式:</p>
<p>● 源码安装,通过npm run start启动(不推荐)</p>
<p>● 通过docker安装 (推荐)</p>
<p>● 通过chrome插件安装 (推荐)</p>
<p>● 通过ES的plugin方式安装 (不推荐)</p>
<h3 id="chrome商店的方式安装-需要翻墙"><a href="#chrome商店的方式安装-需要翻墙" class="headerlink" title="chrome商店的方式安装(需要翻墙)"></a>chrome商店的方式安装(需要翻墙)</h3><p>google应用商店</p>
<p><a href="https://chrome.google.com/webstore/category/extensions?hl=zh">https://chrome.google.com/webstore/category/extensions?hl=zh</a></p>
<p>搜索</p>
<p>elasticsearch head 安装</p>
<p>修改Elasticsearch连接地址即可连接</p>
<p><img src="clipboard.png" alt="img"></p>
<h3 id="通过docker安装（不会）"><a href="#通过docker安装（不会）" class="headerlink" title="通过docker安装（不会）"></a>通过docker安装（不会）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span> </span><br><span class="line">docker pull mobz/elasticsearch-head:5 </span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器</span> </span><br><span class="line">docker create --name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5 </span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器</span> </span><br><span class="line">docker start elasticsearch-head</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意: 由于前后端分离开发,所以会存在跨域问题,需要在服务端做CORS的配置,如下:</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过chrome插件的方式安装不存在该问题。</span></span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">http.cors.enabled: true http.cors.allow-origin:&quot;*&quot; </span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>技术</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch基本使用</title>
    <url>/2021/04/06/%E6%8A%80%E6%9C%AF/ELK%20stack/2.%20Elasticsearch%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><a id="more"></a>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>● 索引( index )是Elasticsearch对逻辑数据的逻辑存储,所以它可以分为更小的部分。</p>
<p>● 可以把索引看成关系型数据库的表 ,索引的结构是为快速有效的全文索引准备的,特别是它不存储原始值。</p>
<p>● Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上,每个索引有一或多个分片(shard) ,每个分片可以有多个副    本( replica )。</p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>●  存储在Elasticsearch中的主要实体叫文档 ( document )。用关系型数据库来类比的话, 一个文档相当于数据库表中的一行记录。</p>
<p>● Elasticsearch和MongoDB中的文档类似,都可以有不同的结构,但Elasticsearch的文档中,相同字段必须有相同类型。</p>
<p>● 文档由多个字段组成,每个字段可能多次出现在一 个文档里,这样的字段叫多值字段( multivalued ).</p>
<p>● 每个字段的类型,可以是文本、数值、日期等。字段类型也可以是复杂类型, -个字段包含其他子文档或者数组。</p>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>● 所有文档写进索引之前都会先进行分析,如何将输入的文本分割为词条、哪些词条又会被过滤,这种行为叫做映射(mapping)。一般由用户自己定义规则。</p>
<h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><p>● 在Elasticsearch中, 一个索引对象可以存储很多不同用途的对象。例如,一个博客应用程序可以保存文章和评论。</p>
<p>● 每个文档可以有不同的结构。</p>
<p>● 同的文档类型不能为相同的属性设置不同的类型。例如,在同一索引中的所有文档类型中，一个叫title的字段必须具有相同的类型。</p>
<h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p><code>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。</code></p>
<h2 id="创建非结构化的索引-创建删除索引库"><a href="#创建非结构化的索引-创建删除索引库" class="headerlink" title="创建非结构化的索引(创建删除索引库)"></a>创建非结构化的索引(创建删除索引库)</h2><p>在Lucene中,创建索引是需要定义字段名称以及字段的类型的，在Elasticsearch中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在Elasticsearch底层会进行结构化操作，此操作对用户是透明的。</p>
<p>创建空索引:</p>
<p>可使用 postman 进行测试</p>
<p><img src="clipboard.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 插入索引 </span><br><span class="line">PUT /haoke </span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;index&quot;: &#123;</span><br><span class="line">                    &quot;number_of_shards&quot;: &quot;2&quot;,    # 分片数</span><br><span class="line">                    &quot;number_of_replicas&quot;: &quot;0&quot;   # 副本数</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除索引 </span><br><span class="line">DELETE /haoke</span><br></pre></td></tr></table></figure>


<h2 id="向创建的索引库中插入数据"><a href="#向创建的索引库中插入数据" class="headerlink" title="向创建的索引库中插入数据"></a>向创建的索引库中插入数据</h2><p><code>POST   url/&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;</code></p>
<h3 id="指定id"><a href="#指定id" class="headerlink" title="指定id"></a>指定id</h3><p><code>POST   url/&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user/1001</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:1001,</span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">  &quot;age&quot;:20,</span><br><span class="line">  &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>查看数据</p>
<p><img src="clipboard.png" alt="img"></p>
<h3 id="不指定id"><a href="#不指定id" class="headerlink" title="不指定id"></a>不指定id</h3><p><code>POST   url/&#123;索引&#125;/&#123;类型&#125;</code></p>
<p>若不指定 {id} 则会自动生成一个id并返回</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:1002,</span><br><span class="line">  &quot;name&quot;:&quot;李四&quot;,</span><br><span class="line">  &quot;age&quot;:21,</span><br><span class="line">  &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="clipboard.png" alt="img"></p>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><h3 id="全部更新"><a href="#全部更新" class="headerlink" title="全部更新"></a>全部更新</h3><p><code>删除原来的文档，插入新文档</code></p>
<p><code>PUT     url/&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user/1001</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:1002,</span><br><span class="line">  &quot;name&quot;:&quot;张三1&quot;,</span><br><span class="line">  &quot;age&quot;:25,</span><br><span class="line">  &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="局部更新"><a href="#局部更新" class="headerlink" title="局部更新"></a>局部更新</h3><p><code>删除原来的文档，插入新文档</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST     url/&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;/_update	使用doc将数据打包</span><br><span class="line"></span><br><span class="line">192.168.88.128:9200/haoke/user/1001/_update</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">	&quot;age&quot;:25</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p><code>DELETE         url/&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user/1001</span><br></pre></td></tr></table></figure>


<p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p>
<p>不会每一个都去删除，减小了磁盘的压力</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="单条查询"><a href="#单条查询" class="headerlink" title="单条查询"></a>单条查询</h3><p><code>GET   url/&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user/1001</span><br></pre></td></tr></table></figure>


<h3 id="多条查询"><a href="#多条查询" class="headerlink" title="多条查询"></a>多条查询</h3><p><code>GET   url/&#123;索引&#125;/&#123;类型&#125;/_search</code></p>
<p><code>仅能查询10条数据，多条时，需要进行分页</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user/_search</span><br></pre></td></tr></table></figure>


<h3 id="关键字搜索"><a href="#关键字搜索" class="headerlink" title="关键字搜索"></a>关键字搜索</h3><p><code>GET   url/&#123;索引&#125;/&#123;类型&#125;/_search?q=字段名:数据</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.128:9200/haoke/user/_search?q=age:21</span><br></pre></td></tr></table></figure>


<h2 id="DSL搜索"><a href="#DSL搜索" class="headerlink" title="DSL搜索"></a>DSL搜索</h2><p><code>POST    url/&#123;索引&#125;/&#123;类型&#125;/_search</code></p>
<p>Elasticsearch提供丰富且灵活的查询语言叫做DSL查询(Query DSL),它允许你构建更加复杂、强大的查询。</p>
<p>DSL(Domain Specific Language特定领域语言)以JSON请求体的形式出现。</p>
<p>详细介绍</p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/full-body-search.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/full-body-search.html</a></p>
<p><a href="https://blog.csdn.net/u014646662/article/details/89010759">https://blog.csdn.net/u014646662/article/details/89010759</a></p>
<h3 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123; #match只是查询的一种</span><br><span class="line">            &quot;age&quot; : 20</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 参数可传入多个，使用 ， 或空格分隔</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;李四,zookeeper&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 为汉字时将会筛选字段中含有传入汉字的对象，为英文时，会返回可将字段完整提取出来的对象，如</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kibana-cc 可通过kibana或cc查询得到</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 张三 可通过查询 张 获得</span></span><br></pre></td></tr></table></figure>


<h3 id="多条件范围查询"><a href="#多条件范围查询" class="headerlink" title="多条件范围查询"></a>多条件范围查询</h3><p><code>sex为男 中过滤age大于22</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;gt&quot;: 22</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;must&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="高亮显示-highlight"><a href="#高亮显示-highlight" class="headerlink" title="高亮显示 highlight"></a>高亮显示 highlight</h2><p><code>查询条件后面添加 heightlight 对象，其中fields中的字段表示高亮显示的内容</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">     &quot;match&quot;: &#123;</span><br><span class="line">       &quot;name&quot;: &quot;kibana&quot;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 高亮字段</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">     &quot;fields&quot;: &#123;</span><br><span class="line">       &quot;name&quot;: &#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>查询结果中将会有特殊标记(&lt;em&gt;&lt;/em&gt;)的字段，供前端做高亮处理</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;took&quot;: 6,</span><br><span class="line">&quot;timed_out&quot;: false,</span><br><span class="line">&quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 2,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 1,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 1.1374959,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;twPYQXcBYpuk6qbRaJeI&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.1374959,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;id&quot;: 1006,</span><br><span class="line">          &quot;name&quot;: &quot;kibana-cc&quot;,</span><br><span class="line">          &quot;age&quot;: 50,</span><br><span class="line">          &quot;sex&quot;: &quot;女&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;highlight&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: [</span><br><span class="line">            &quot;&lt;em&gt;kibana&lt;/em&gt;-cc&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="聚合（统计）-aggregations"><a href="#聚合（统计）-aggregations" class="headerlink" title="聚合（统计） aggregations"></a>聚合（统计） aggregations</h2><p>以提供字段为条件将数据分组返回每组的数量，类似于group by</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_interests&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>返回</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 101,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 2,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 7,</span><br><span class="line">          &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1.0,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">            &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">            &quot;_id&quot;: &quot;swOsQXcBYpuk6qbR0pcc&quot;,</span><br><span class="line">            &quot;_score&quot;: 1.0,</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">              &quot;id&quot;: 1002,</span><br><span class="line">              &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">              &quot;age&quot;: 21,</span><br><span class="line">              &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    // 聚合后统计的数据</span><br><span class="line">    &quot;aggregations&quot;: &#123;</span><br><span class="line">        &quot;all_interests&quot;: &#123;</span><br><span class="line">          &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">          &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">          &quot;buckets&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;key&quot;: 21,</span><br><span class="line">              &quot;doc_count&quot;: 3</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;key&quot;: 25,</span><br><span class="line">              &quot;doc_count&quot;: 2</span><br><span class="line">           &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;key&quot;: 20,</span><br><span class="line">              &quot;doc_count&quot;: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;key&quot;: 50,</span><br><span class="line">              &quot;doc_count&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>juc</title>
    <url>/2021/08/05/%E6%8A%80%E6%9C%AF/JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0.%20juc/</url>
    <content><![CDATA[<h1 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h1><a id="more"></a>

<p>![image-20210804190400298](0. juc/image-20210804190400298.png)</p>
<h1 id="JUC概述"><a href="#JUC概述" class="headerlink" title="JUC概述"></a>JUC概述</h1><h2 id="1-什么是JUC"><a href="#1-什么是JUC" class="headerlink" title="1. 什么是JUC"></a>1. 什么是JUC</h2><p>在Java中，线程部分是一个重点，本篇文章说的JUC也是关于线程的。JUC就是<code>java.util.concurrent</code>工具包的简称。这是一个处理线程的工具包，JDK1.5开始出现的。</p>
<blockquote>
<p>java在线文档<br><a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></p>
</blockquote>
<h2 id="2-进程与线程"><a href="#2-进程与线程" class="headerlink" title="2. 进程与线程"></a>2. 进程与线程</h2><p><strong>进程</strong>( Process )是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>
<p><strong>线程</strong>( thread )是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
<p>以360杀毒为例：</p>
<p>打开360杀毒，即在电脑中开启了一个进程（360杀毒就是一个进程）；</p>
<p>在360杀毒有非常多的功能，如：木马查杀、电脑清理等，这些功能就可以看成是不同的线程；</p>
<p><strong>总结来说：</strong></p>
<p>进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程——资源分配的最小单位。</p>
<p>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程——程序执行的最小单位。</p>
<h2 id="3-线程的状态"><a href="#3-线程的状态" class="headerlink" title="3. 线程的状态 *"></a>3. 线程的状态 *</h2><p>Thread.State  枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新建</span></span><br><span class="line">    NEW，</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备就绪</span></span><br><span class="line">    RUNNABLE，</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞</span></span><br><span class="line">    BLOCKED，</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待（不见不散，不来就会一直等）</span></span><br><span class="line">    WAITING，</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待（过时不候）</span></span><br><span class="line">    TIMED_WAITING，</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-wait和sleep"><a href="#4-wait和sleep" class="headerlink" title="4. wait和sleep"></a>4. wait和sleep</h2><ol>
<li>sleep是Thread的静态方法；wait是Object的方法，任何对象实例都能调用；</li>
<li>sleep不会释放锁，也不需要占用锁；wait会释放锁，但调用它的前提是当前线程占有锁（即代码要在Synchronized中）；</li>
<li>他们都可以被interrupted方法中断；</li>
</ol>
<h2 id="5-并发和并行"><a href="#5-并发和并行" class="headerlink" title="5. 并发和并行"></a>5. 并发和并行</h2><h3 id="5-1-串行模式"><a href="#5-1-串行模式" class="headerlink" title="5.1 串行模式"></a>5.1 串行模式</h3><p>多个任务一个一个执行</p>
<h3 id="5-2-并行模式"><a href="#5-2-并行模式" class="headerlink" title="5.2 并行模式"></a>5.2 并行模式</h3><p>多个任务同时执行</p>
<h3 id="5-3-并发与并行"><a href="#5-3-并发与并行" class="headerlink" title="5.3 并发与并行"></a>5.3 并发与并行</h3><p><strong>并发</strong>：同一时刻多个线程在访问同一个资源</p>
<p>​    例如：春运抢票、电商秒杀…，一个人做两条流水线的工作</p>
<p><strong>并行</strong>：多项工作一起执行，之后再汇总</p>
<p>​    例如：泡泡面，电水壶烧水的同时撕调料倒入桶中，两个人做两条流水线的工作</p>
<h2 id="6-管程"><a href="#6-管程" class="headerlink" title="6. 管程"></a>6. 管程</h2><blockquote>
<p>Monitor JAVA中称为锁，程序中称为监视器<br>是一种同步机制，保证同一个时间，只有一个线程能去访问被保护的资源（数据或代码）</p>
</blockquote>
<p>JVM中的同步基于进入和退出进行操作的，使用管程对象实现的</p>
<p>JVM要进行同步操作，要基于Monitor对象，来实现的，即进入某线程时要加锁，退出某线程要解锁</p>
<h2 id="7-用户线程和守护线程"><a href="#7-用户线程和守护线程" class="headerlink" title="7. 用户线程和守护线程"></a>7. 用户线程和守护线程</h2><p><strong>用户线程：</strong>平时锁用到的线程基本都是用户线程；</p>
<p><strong>守护线程：</strong>用在后台中的特殊线程，比如垃圾回收；设置线程为守护线程<code>thread.setDaemon(true);</code></p>
<p>主线程结束了，用户线程还在运行，JVM存活</p>
<p>主线程结束时，若不存在用户线程都是守护线程，则JVM结束</p>
<p>即守护线程是不会影响JVM结束的线程，JVM不会因为守护线程的存活而放弃关闭</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个线程并为线程命名为aa</span></span><br><span class="line">    Thread aa = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::&quot;</span> + Thread.currentThread().isDaemon());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;， <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置线程aa为守护线程</span></span><br><span class="line">    aa.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 启动aa线程</span></span><br><span class="line">    aa.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;::over&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h1><h2 id="1-Synchronized关键字"><a href="#1-Synchronized关键字" class="headerlink" title="1. Synchronized关键字"></a>1. Synchronized关键字</h2><blockquote>
<p>自动上锁和解锁<br>当一个线程访问被synchronized修饰的资源时，其会自动上锁，调用完成后会自动释放锁，别的线程会抢到</p>
</blockquote>
<h3 id="1-1-Synchronized作用范围"><a href="#1-1-Synchronized作用范围" class="headerlink" title="1.1 Synchronized作用范围"></a>1.1 Synchronized作用范围</h3><p>Synchronized是java中的关键字，是一种同步锁。它修饰的对象有以下几种：</p>
<ol>
<li><p>修饰一个<code>代码块</code>，被修饰的代码块称为同步语句块（放置于方法中，该方法不能用static修饰），其作用的范围是大括号括起来的代码，作用的对象是调用这个代码块的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:: am in&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>修饰一个<code>方法</code>，被修饰的方法被称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:: am in&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然可以使用synchronized来定义方法，但synchronized并不属于方法定义的一部分，因此， synchronized关键字不能被继承。如果在父类中的某个方法使用了synchronized关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的，而必须显式地在子类的这个方法中加上synchronized关键字才可以。当然，还可以在子类方法中调用父类中相应的方法，这样虽然子类中的方法不是同步的，但子类调用了父类的同步方法，因此子类的方法也就相当于同步了。</p>
</li>
</ol>
<ol start="3">
<li><p>修饰一个<code>静态方法</code>，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:: am in&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><p>修饰一个<code>类</code>，其作用的范围是synchronized后面括号括起来的部分，作用的对象是这个类的所有对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynThread02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynThread02.class) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="1-2-注"><a href="#1-2-注" class="headerlink" title="1.2 注"></a>1.2 注</h3><p>注：当synchronized修饰某一资源时，其余多条线程操作统一资源时才会上锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (str) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: am in&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: am out&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用方式1：可以看出每条线程访问的都是同一个str对象因此，加锁有效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynThread03 synThread03 = <span class="keyword">new</span> SynThread03();</span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            synThread03.fun1(str);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread-<span class="number">0</span> :: am in</span><br><span class="line">Thread-<span class="number">2</span> :: am in</span><br><span class="line">Thread-<span class="number">0</span> :: am out</span><br><span class="line">Thread-<span class="number">2</span> :: am out</span><br><span class="line">Thread-<span class="number">1</span> :: am in</span><br><span class="line">Thread-<span class="number">1</span> :: am out</span><br></pre></td></tr></table></figure>
<p>调用方式2：每条线程访问的都是不同的str对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynThread03 synThread03 = <span class="keyword">new</span> SynThread03();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">            synThread03.fun1(str);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread-<span class="number">0</span> :: am in</span><br><span class="line">Thread-<span class="number">2</span> :: am in</span><br><span class="line">Thread-<span class="number">1</span> :: am in</span><br><span class="line">Thread-<span class="number">2</span> :: am out</span><br><span class="line">Thread-<span class="number">0</span> :: am out</span><br><span class="line">Thread-<span class="number">1</span> :: am out</span><br></pre></td></tr></table></figure>


<h3 id="1-3-多线程编程步骤"><a href="#1-3-多线程编程步骤" class="headerlink" title="1.3 多线程编程步骤"></a>1.3 多线程编程步骤</h3><h4 id="1-3-1-创建资源类，在资源类中创建属性和操作方法"><a href="#1-3-1-创建资源类，在资源类中创建属性和操作方法" class="headerlink" title="1.3.1 创建资源类，在资源类中创建属性和操作方法"></a>1.3.1 创建资源类，在资源类中创建属性和操作方法</h4><h4 id="1-3-2-创建多个线程，调用资源类的操作方法"><a href="#1-3-2-创建多个线程，调用资源类的操作方法" class="headerlink" title="1.3.2 创建多个线程，调用资源类的操作方法"></a>1.3.2 创建多个线程，调用资源类的操作方法</h4><h3 id="1-4-Synchronized实现卖票"><a href="#1-4-Synchronized实现卖票" class="headerlink" title="1.4 Synchronized实现卖票"></a>1.4 Synchronized实现卖票</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卖票:三个售票员最终卖出三十张票</span></span><br><span class="line"><span class="comment"> * 1. 创建资源类，定义属性和操作方法</span></span><br><span class="line"><span class="comment"> * 2. 创建多个线程，调用资源类的操作方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynThread04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> sell = ticket.sell();</span><br><span class="line">                        <span class="keyword">if</span> (!sell) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 操作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否有票可以卖</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 节点，卖出第&quot;</span> + (count--) + <span class="string">&quot;张票，剩余：&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-Lock接口"><a href="#2-Lock接口" class="headerlink" title="2. Lock接口"></a>2. Lock接口</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><blockquote>
<p>手动实现上锁和解锁<br>为锁和等待条件提供一个框架的接口和类，它不同于内置同步和监视器。</p>
</blockquote>
<p><img src="image-20210806150239956.png" alt="image-20210806150239956"></p>
<h3 id="2-2-Lock锁与synchronized的比较"><a href="#2-2-Lock锁与synchronized的比较" class="headerlink" title="2.2 Lock锁与synchronized的比较"></a>2.2 Lock锁与synchronized的比较</h3><p>Lock锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对象。Lock 提供了比synchronized更多的功能。</p>
<ul>
<li>Lock是一个<code>接口</code>，而synchronized是Java中的关键字， synchronized是内置的语言实现;。</li>
<li>synchronized在发生异常时，会<code>自动释放线程占有的锁</code>，因此不会导致死锁现象发生;而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁;</li>
<li>Lock可以<code>让等待锁的线程响应中断</code>，而synchronized却不行，使用synchronized时，等待的线程会一直等待 下去，不能够响应中断;</li>
<li>通过Lock<code>可以知道有没有成功获取锁</code>，而synchronized却无法办到。</li>
<li>Lock可以<code>提高多个线程进行读操作的效率</code>。</li>
</ul>
<p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争非常激烈时（有大量线程同时竞争），此时Lock的性能要远远优于synchronized</p>
<h3 id="2-3-可重入锁-ReentrantLock-实现卖票"><a href="#2-3-可重入锁-ReentrantLock-实现卖票" class="headerlink" title="2.3 可重入锁 ReentrantLock - 实现卖票"></a>2.3 可重入锁 ReentrantLock - 实现卖票</h3><p>例如：上厕所排队，一个人进入<code>上锁</code>，出来后<code>解锁</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTicket ticket = <span class="keyword">new</span> LockTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">40</span>; index++) &#123;</span><br><span class="line">                ticket.sell();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;， String.valueOf(<span class="number">1</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">40</span>; index++) &#123;</span><br><span class="line">                ticket.sell();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;， String.valueOf(<span class="number">2</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">40</span>; index++) &#123;</span><br><span class="line">                ticket.sell();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;， String.valueOf(<span class="number">3</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockTicket</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建可重入锁 ********</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 上锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是否有票可以卖</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 节点，卖出第&quot;</span> + (count--) + <span class="string">&quot;张票，剩余：&quot;</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>当使用Lock上锁时，若解锁前的逻辑中出现问题，则会无法正常释放锁</p>
<p>此时可以使用 <code>try &#123;&#125; finally &#123;&#125;</code> 进行解锁操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 逻辑</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h1><p>p8  3:25</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>juc</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger</title>
    <url>/2021/05/11/%E6%8A%80%E6%9C%AF/Swagger/0.%20Swagger/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<h2 id="1-前后端分离"><a href="#1-前后端分离" class="headerlink" title="1. 前后端分离"></a>1. 前后端分离</h2><p>目前很好的实现：</p>
<p>VUE + SpringBoot</p>
<p>后端时代：前端只用管理静态页面；html ==&gt; 后端。模板引擎  JSP </p>
<p>前后端分离时代：</p>
<ul>
<li><p>后端：后端控制层，服务层，数据访问层</p>
</li>
<li><p>前端：前端控制层，视图层</p>
</li>
<li><ul>
<li>伪造后端数据，mock假数据。</li>
</ul>
</li>
<li><p>前后端交互 ==&gt; API</p>
</li>
<li><p>前后端相互独立，松耦合</p>
</li>
<li><p>前后端可以部署在不同的服务器上</p>
</li>
</ul>
<p>产生一个问题：</p>
<ul>
<li>前后端集成联调，前后端无法及时协商</li>
</ul>
<p>解决方案：</p>
<ul>
<li><p>首先指定schema[计划的提纲]，实时更新最新API，降低集成的风险</p>
</li>
<li><p>早些年：制定word计划文档</p>
</li>
<li><p>前后端分离</p>
</li>
<li><ul>
<li>前端测试后端接口：postman</li>
<li>后端提供接口，需要实时更新最新的消息及改动</li>
</ul>
</li>
</ul>
<h2 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h2><p>Api框架</p>
<p>RestFul Api文档在线自动生成工具 =&gt; Api文档与API定义同步更新</p>
<p>直接运行，可以在线测试API接口</p>
<p>支持多种语言：（java，python…）</p>
<p>官网</p>
<p><a href="https://swagger.io/">https://swagger.io/</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Swagger</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm介绍</title>
    <url>/2021/03/08/%E6%8A%80%E6%9C%AF/JVM/jvm%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="JVM探究"><a href="#JVM探究" class="headerlink" title="JVM探究"></a>JVM探究</h2><a id="more"></a>

<ul>
<li>对<code>JVM</code>的理解，<code>java8</code>虚拟机和之前的变化更新</li>
<li>什么是<code>OOM</code>，什么是栈溢出<code>StackOverFlowError</code>？怎么分析？</li>
<li><code>JVM</code>常用的调优参数</li>
<li>内存快照如何抓取，怎么分析<code>Dump</code>文件</li>
<li>谈谈<code>JVM</code>中，类加载器的认识</li>
</ul>
<h3 id="JVM位置"><a href="#JVM位置" class="headerlink" title="JVM位置"></a>JVM位置</h3><p>java虚拟机 位于操作系统上</p>
<p><img src="image-20210309093518232.png" alt="image-20210309093518232"></p>
<h3 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h3><p><img src="image-20210310152333062.png" alt="image-20210310152333062"></p>
<p>​    </p>
<ol>
<li><p>垃圾集中区域： 主要是在堆里面，方法区占少量</p>
</li>
<li><p>所谓的<code>JVM调优</code>其实99%都是在<code>方法区及堆</code>中，而其中的99%则是在<code>堆</code>中</p>
</li>
<li><p>栈中绝对不能有垃圾，栈中的东西用完就弹出去了，栈中有垃圾代表程序崩了，Main方法首先进栈，其余方法之后入栈，执行万一个弹出一个，若栈中有垃圾则影响方法弹出</p>
</li>
<li><p>方法区是一个特殊的堆</p>
</li>
</ol>
<p>​    </p>
<p>​    </p>
<ol>
<li>类加载器</li>
<li>双亲委派机制</li>
<li>沙箱安全机制</li>
<li>Native</li>
<li>PC寄存器</li>
<li>方法区</li>
<li>堆、栈</li>
<li>三种JVM</li>
<li>新生区、老年区</li>
<li>永久区</li>
<li>堆内存调优</li>
<li>GC<ol>
<li>常用算法</li>
</ol>
</li>
<li>JMM</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger使用</title>
    <url>/2021/05/11/%E6%8A%80%E6%9C%AF/Swagger/1.%20Swagger%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>需要springbox</p>
<ul>
<li>swagger2</li>
<li>ui</li>
</ul>
<p>SpringBoot集成Swagger</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="新版swagger-3-0-0，可能存在依赖冲突等问题，推荐使用旧版的"><a href="#新版swagger-3-0-0，可能存在依赖冲突等问题，推荐使用旧版的" class="headerlink" title="新版swagger  3.0.0，可能存在依赖冲突等问题，推荐使用旧版的"></a>新版swagger  3.0.0，可能存在依赖冲突等问题，推荐使用旧版的</h3><h4 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.0版本后需添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="2-添加配置文件"><a href="#2-添加配置文件" class="headerlink" title="2. 添加配置文件"></a>2. 添加配置文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.swaggerdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>     <span class="comment">// 开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>访问页面：</p>
<p><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></p>
<h3 id="旧版2-9-2"><a href="#旧版2-9-2" class="headerlink" title="旧版2.9.2"></a>旧版2.9.2</h3><h4 id="1-依赖-1"><a href="#1-依赖-1" class="headerlink" title="1. 依赖"></a>1. 依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="2-添加配置文件-1"><a href="#2-添加配置文件-1" class="headerlink" title="2. 添加配置文件"></a>2. 添加配置文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.swaggerdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>     <span class="comment">// 开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>访问页面：</p>
<p><a href="http://localhost:9001/swagger-ui.html">http://localhost:9001/swagger-ui.html</a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="1-Swagger的bean实例Docket"><a href="#1-Swagger的bean实例Docket" class="headerlink" title="1. Swagger的bean实例Docket"></a>1. Swagger的bean实例Docket</h2><h3 id="Docket源码"><a href="#Docket源码" class="headerlink" title="Docket源码"></a><strong>Docket源码</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Docket</span><span class="params">(DocumentationType documentationType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Swagger信息</span></span><br><span class="line">    <span class="keyword">this</span>.apiInfo = ApiInfo.DEFAULT;</span><br><span class="line">    <span class="keyword">this</span>.groupName = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.genericsNamingStrategy = <span class="keyword">new</span> DefaultGenericTypeNamingStrategy();</span><br><span class="line">    <span class="keyword">this</span>.applyDefaultResponseMessages = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.host = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>.pathMapping = Optional.empty();</span><br><span class="line">    <span class="keyword">this</span>.apiSelector = ApiSelector.DEFAULT;</span><br><span class="line">    <span class="keyword">this</span>.enableUrlTemplating = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.vendorExtensions = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">this</span>.globalRequestParameters = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">this</span>.documentationType = documentationType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="使用-Bean注入一个Docket对象"><a href="#使用-Bean注入一个Docket对象" class="headerlink" title="使用@Bean注入一个Docket对象"></a><strong>使用@Bean注入一个Docket对象</strong></h3><p>DocumentationType源码中有三个实例对象，此处选择 SWAGGER_2 对象</p>
<p><img src="clipboard.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置Swagger的Docket的bean实例</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此处需要传入一个DocumentationType对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-配置Swagger信息"><a href="#2-配置Swagger信息" class="headerlink" title="2. 配置Swagger信息"></a>2. 配置Swagger信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Profiles;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置要显示的swagger环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取项目运行环境</span></span><br><span class="line">        <span class="keyword">boolean</span> b = environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            此处需要传入一个DocumentationType对象</span></span><br><span class="line"><span class="comment">            Docket方法</span></span><br><span class="line"><span class="comment">                apiInfo     设置展示页面信息</span></span><br><span class="line"><span class="comment">                enable      是否启用swagger</span></span><br><span class="line"><span class="comment">                select      设置扫描规则</span></span><br><span class="line"><span class="comment">                groupName   配置组名，可通过配置多个Docket对象，每个docket扫描不同的包，来区分不同的人开发的组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">// 设置展示页面信息</span></span><br><span class="line">                .apiInfo(getApiInfo())</span><br><span class="line">                <span class="comment">// 是否启用swagger</span></span><br><span class="line">                .enable(b)</span><br><span class="line">                <span class="comment">// 自定义组名(单个)</span></span><br><span class="line">                .groupName(<span class="string">&quot;自定义组名1&quot;</span>)</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    .select()</span></span><br><span class="line"><span class="comment">                        .paths()</span></span><br><span class="line"><span class="comment">                        .apis()</span></span><br><span class="line"><span class="comment">                        .build()</span></span><br><span class="line"><span class="comment">                    paths、apis和build均为select方法下的方法</span></span><br><span class="line"><span class="comment">                    RequestHandlerSelectors 配置扫描接口的方式</span></span><br><span class="line"><span class="comment">                        none 都不扫描</span></span><br><span class="line"><span class="comment">                        any 所有都扫描</span></span><br><span class="line"><span class="comment">                        basePackage 通过路径的方式</span></span><br><span class="line"><span class="comment">                        withClassAnnotation  通过类注解</span></span><br><span class="line"><span class="comment">                        withMethodAnnotation 通过方法注解</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .select().apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span><br><span class="line">                <span class="comment">// 使用路径进行过滤(使用uri访问路径而不是包路径)</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/hello/**&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可通过配置多个组来扫描不同的开发者的包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;开发者&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">getApiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;https://www.hao123.com/&quot;</span>, <span class="string">&quot;2323032461@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">                <span class="string">&quot;描述&quot;</span>,</span><br><span class="line">                <span class="string">&quot;版本1.0&quot;</span>,</span><br><span class="line">                <span class="comment">// 团队url</span></span><br><span class="line">                <span class="string">&quot;https://www.hao123.com/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="comment">// 许可证</span></span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="comment">// 许可证url</span></span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-使用Swagger页面中的Models列出接口中提到的实体类的信息"><a href="#3-使用Swagger页面中的Models列出接口中提到的实体类的信息" class="headerlink" title="3. 使用Swagger页面中的Models列出接口中提到的实体类的信息"></a>3. 使用Swagger页面中的Models列出接口中提到的实体类的信息</h2><p>要将实体类中的信息添加到Models中需要两个条件：</p>
<ol>
<li><p>需要接口中返回值或者参数中存在该实体类，该类将会被扫描如swagger中</p>
</li>
<li><p>该类中的属性必须为public或者有该属性的set方法此时该类的属性信息才能被扫入swagger中</p>
</li>
</ol>
<p>给实体类及其中属性添加说明信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Api(value = &quot;注释&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体类：User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>技术</category>
        <category>Swagger</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>druid</title>
    <url>/2021/02/22/%E6%8A%80%E6%9C%AF/druid/druid/</url>
    <content><![CDATA[<h1 id="SpringBoot整合druid"><a href="#SpringBoot整合druid" class="headerlink" title="SpringBoot整合druid"></a>SpringBoot整合druid</h1><a id="more"></a>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment">#      初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#       最小连接池数量</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#        最大连接池数量</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment">#        获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># 状态监控</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">      <span class="comment"># 监控过滤器</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">exclusions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;*.js&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;*.gif&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;*.jpg&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;*.png&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;*.css&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;*.ico&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/druid/*&quot;</span></span><br><span class="line">      <span class="comment"># druid 监控页面</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="comment">#        是否开启监控</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#        监控路径</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="comment">#        是否可以重置数据</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#        登录密码</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">root</span></span><br><span class="line">        <span class="comment">#        登录名</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">&quot;SELECT 1 FROM DUAL &quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h2><p><a href="http://localhost:9002/druid/sql.html">http://localhost:9002/druid/sql.html</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>druid</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2021/02/23/%E6%8A%80%E6%9C%AF/git/git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="git项目搭建"><a href="#git项目搭建" class="headerlink" title="git项目搭建"></a>git项目搭建</h2><h3 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h3><a id="more"></a>

<p><img src="image-liucheng.png"></p>
<h3 id="本地搭建仓库"><a href="#本地搭建仓库" class="headerlink" title="本地搭建仓库"></a>本地搭建仓库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>提示初始化一个空的git库在<code>G:/test/test/.git/</code></p>
<p><img src="image-20210224090517320.png" alt="image-20210224090517320"></p>
<p>此时运行命令的位置会有</p>
<p><img src="image-20210224090651065.png" alt="image-20210224090651065"></p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 克隆整个项目及其整个代码历史(版本信息)</span><br><span class="line"># https:<span class="operator">/</span><span class="operator">/</span>gitee.com<span class="operator">/</span>kuangstudy<span class="operator">/</span>openclass.git</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>


<h2 id="git文件操作"><a href="#git文件操作" class="headerlink" title="git文件操作"></a>git文件操作</h2><blockquote>
<h3 id="文件4种状态"><a href="#文件4种状态" class="headerlink" title="文件4种状态"></a>文件4种状态</h3></blockquote>
<ul>
<li><strong>Untracked</strong>: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add</code> 状态变为<code>Staged</code></li>
<li><strong>Unmodify</strong>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为<code>Modified</code>. 如果使用<code>git rm</code>移出版本库, 则成为<code>Untracked</code>文件</li>
<li><strong>Modified</strong>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code>可进入暂存<code>staged</code>状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到<code>unmodify</code>状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改</li>
<li><strong>Staged</strong>: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<code>Unmodify</code>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<code>Modified</code></li>
</ul>
<blockquote>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line"># 提交所有文件到暂存区  </span><br><span class="line">git add . </span><br><span class="line">    </span><br><span class="line"># 提交暂存区的内容到本地仓库</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="使用该命令查看本地新搭建的项目时，显示内容为："><a href="#使用该命令查看本地新搭建的项目时，显示内容为：" class="headerlink" title="使用该命令查看本地新搭建的项目时，显示内容为："></a>使用该命令查看本地新搭建的项目时，显示内容为：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前在master分支</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前未进行提交</span></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前无任何内容需要提交</span></span><br><span class="line"><span class="function">nothing to <span class="title">commit</span> <span class="params">(create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span></span></span><br></pre></td></tr></table></figure>
<p>​    </p>
<h4 id="新建文件hello-txt-再使用该命令查看，显示内容为："><a href="#新建文件hello-txt-再使用该命令查看，显示内容为：" class="headerlink" title="新建文件hello.txt 再使用该命令查看，显示内容为："></a>新建文件hello.txt 再使用该命令查看，显示内容为：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示未跟踪的文件</span></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未添加任何提交但是目前有未跟踪的文件</span></span><br><span class="line"><span class="function">nothing added to commit but untracked files <span class="title">present</span> <span class="params">(use <span class="string">&quot;git add&quot;</span> to track)</span></span></span><br></pre></td></tr></table></figure>


<h4 id="git-add-（提交所有文件到暂存区）"><a href="#git-add-（提交所有文件到暂存区）" class="headerlink" title="git add . （提交所有文件到暂存区）"></a>git add . （提交所有文件到暂存区）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要提交的更改</span></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">		<span class="comment">// 提示有新文件  hello.txt</span></span><br><span class="line">        <span class="keyword">new</span> file:   hello.txt</span><br></pre></td></tr></table></figure>


<h4 id="git-commit-m-（提交暂存区的内容到本地仓库）"><a href="#git-commit-m-（提交暂存区的内容到本地仓库）" class="headerlink" title="git commit -m （提交暂存区的内容到本地仓库）"></a>git commit -m （提交暂存区的内容到本地仓库）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有东西需要提交，工作树是干净的</span></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>


<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中,比如数据库文件,临时文件,设计文件等<br>在主目录下建立”.gitignore”文件,此文件有如下规则: </p>
<ol>
<li>忽略文件中的空行或以井号( # )开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如:星号(* )代表任意多个字符,问号( ? )代表-个字符,方括号( [abc] )代表可选字符范围,<br>大括号( string1，string2，…. )代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号(!) , 表示例外规则,将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符 (/) ,表示要忽略的文件在此目录下,而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符(1) , 表示要忽略的是此目录下该名称的子目录,而非文件(默认文件或目录都忽略)。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt		#忽略所有. txt结尾的文件</span><br><span class="line">!lib.txt	#但lib.txt除外</span><br><span class="line">/temp 		#仅忽路项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/		#忽略bui1d/目录下的所有文件</span><br><span class="line">doc<span class="comment">/*.txt	#忽略 doc/notes.txt 但不包括doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>


<h2 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h2><blockquote>
<h3 id="github-是有墙的，比较慢，在国内的话一般使用-gitee-，公司中有时候会搭建自己的-gitlib-服务器"><a href="#github-是有墙的，比较慢，在国内的话一般使用-gitee-，公司中有时候会搭建自己的-gitlib-服务器" class="headerlink" title="==github==是有墙的，比较慢，在国内的话一般使用==gitee==，公司中有时候会搭建自己的==gitlib==服务器"></a>==github==是有墙的，比较慢，在国内的话一般使用==gitee==，公司中有时候会搭建自己的==gitlib==服务器</h3></blockquote>
<p>设置本机绑定SSH公钥，实现免密登录</p>
<ol>
<li>位于<code>C:\Users\Administrator\.ssh</code>目录下</li>
</ol>
<p><img src="image-20210226143025211.png" alt="image-20210226143025211"></p>
<ol start="2">
<li>生成公钥</li>
</ol>
<p>ssh-keygen -t rsa</p>
<ol start="3">
<li>生成后产生两个文件，<code>以pub结尾的为公钥，另外一个为私钥</code></li>
</ol>
<p><img src="image-20210226143143961.png" alt="image-20210226143143961"></p>
<ol start="4">
<li>将公钥粘如码云 设置 -&gt; 安全设置 -&gt; SSH公钥</li>
</ol>
<h2 id="idea集成git"><a href="#idea集成git" class="headerlink" title="idea集成git"></a>idea集成git</h2><blockquote>
<h3 id="新项目中集成git"><a href="#新项目中集成git" class="headerlink" title="新项目中集成git"></a>新项目中集成git</h3></blockquote>
<ol>
<li><p>在码云中创建项目并拉到本地</p>
</li>
<li><p>新建项目</p>
</li>
<li><p>将码云中拉取得项目的内容全部复制到新建的项目中</p>
<p><img src="image-20210226165218143.png" alt="image-20210226165218143"></p>
</li>
</ol>
<blockquote>
<h3 id="提交代码到远程"><a href="#提交代码到远程" class="headerlink" title="提交代码到远程"></a>提交代码到远程</h3></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;修改&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交到远程  </span></span><br><span class="line"><span class="comment">// 提交到指定分支： git push origin master</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>


<h2 id="GIT分支"><a href="#GIT分支" class="headerlink" title="GIT分支"></a>GIT分支</h2><p>多个分支并行执行(不重合)，代码就不冲突，也就是同时存在多个版本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 刷新分支</span><br><span class="line">git remote update origin --prune</span><br><span class="line"></span><br><span class="line"># 查看本地分支所关联的远程分支</span><br><span class="line">git remote -v</span><br><span class="line">    </span><br><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line">    </span><br><span class="line"># 新建分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line">    </span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">git merge [branch]</span><br><span class="line">    </span><br><span class="line"># 删除分支</span><br><span class="line">git branch -d [branch]</span><br><span class="line">    </span><br><span class="line"># 删除远程分支</span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>


<p>==master主分支应该非常稳定,用来发布新版本, 一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作,工作完后,比如: 要发布,或者说dev分支代码稳定后可以合并到主分支master上来。==</p>
<h2 id="GIT其他命令"><a href="#GIT其他命令" class="headerlink" title="GIT其他命令"></a>GIT其他命令</h2><h3 id="remote-远程仓库操作"><a href="#remote-远程仓库操作" class="headerlink" title="remote 远程仓库操作"></a>remote 远程仓库操作</h3><p>origin为远端仓库的别名，方便操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地分支所关联的远程分支</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置远程仓库的地址</span></span><br><span class="line">git remote set-url origin http://xxx/xxx.git</span><br></pre></td></tr></table></figure>


<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p>
<p>而<code>git pull</code> 则是将远程主机的最新内容拉下来后直接合并，即：<code>git pull = git fetch + git merge</code>，这样可能会产生冲突，需要手动解决。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用问题</title>
    <url>/2021/03/05/%E6%8A%80%E6%9C%AF/git/git%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="提交过大文件到线上仓库，删除该文件无法提交的问题"><a href="#提交过大文件到线上仓库，删除该文件无法提交的问题" class="headerlink" title="提交过大文件到线上仓库，删除该文件无法提交的问题"></a>提交过大文件到线上仓库，删除该文件无法提交的问题</h2><a id="more"></a>

<blockquote>
<p>报错提示</p>
</blockquote>
<p>remote: error: File: 68c625d7c4c72d644859123e74957a00701ca947 128.78 MB, exceeds 100.00 MB.<br>remote: Use command below to see the filename:<br>remote: git rev-list –objects –all | grep 68c625d7c4c72d644859123e74957a00701ca947<br>remote: Please remove the file from history and try again.</p>
<blockquote>
<p>解决方法</p>
</blockquote>
<ol>
<li>使用<code>git clone uri</code>重新拉取一份项目    </li>
<li>使用新项目中的<code>.git</code>替换报错项目中的<code>.git</code>文件夹，存在<code>.gitee</code>文件夹时也一并替换</li>
<li>重新执行提交代码命令即可</li>
</ol>
<h2 id="刷新分支"><a href="#刷新分支" class="headerlink" title="刷新分支"></a>刷新分支</h2><p>git remote update origin –prune</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>git安装及配置</title>
    <url>/2021/02/22/%E6%8A%80%E6%9C%AF/git/git%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="淘宝镜像安装地址"><a href="#淘宝镜像安装地址" class="headerlink" title="淘宝镜像安装地址"></a>淘宝镜像安装地址</h3><p><a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p>
<a id="more"></a>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>需要先清理环境变量，再删除文件</p>
<h3 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关于git所有的配置</span></span><br><span class="line">git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统配置</span></span><br><span class="line">git config --system --list</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 用户自身的配置   其中用户名和邮箱是必须配置的</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>


<h4 id="所有的配置文件，其实都保存在本地"><a href="#所有的配置文件，其实都保存在本地" class="headerlink" title="所有的配置文件，其实都保存在本地"></a><code>所有的配置文件，其实都保存在本地</code></h4><h4 id="设置用户名和邮箱-用户标识，必要"><a href="#设置用户名和邮箱-用户标识，必要" class="headerlink" title="设置用户名和邮箱(用户标识，必要)"></a>设置用户名和邮箱(用户标识，必要)</h4><h5 id="本地git配置文件位置"><a href="#本地git配置文件位置" class="headerlink" title="本地git配置文件位置"></a>本地git配置文件位置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --system 系统级 旧版位置   </span></span><br><span class="line"><span class="comment">// 新版为位于 Git\mingw64\etc\gitconfig</span></span><br><span class="line">Git\mingw64\etc\gitconfig</span><br><span class="line">    </span><br><span class="line"><span class="comment">// --global 用户配置</span></span><br><span class="line">C:\Users\Administrator\.gitconfig</span><br></pre></td></tr></table></figure>


<h5 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// 配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&quot;</span>    </span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>技术</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git概念</title>
    <url>/2021/02/22/%E6%8A%80%E6%9C%AF/git/git%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>什么是版本控制、版本迭代、版本管理器</p>
<a id="more"></a>

<p>​        <code>版本控制</code>( Revision control )是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录,备份以便恢复以前的版本的软件工程技术。<br>​    ●  实现跨区域多人协同开发<br>​    ●  追踪和记载一个或者多个文件的历史记录<br>​    ●  组织和保护你的源代码和文档<br>​    ●  统计工作量<br>​    ●  并行开发、提高开发效率<br>​    ●  跟踪记录整个软件的开发过程<br>​    ●  减轻开发人员的负担,节省时间,同时降低人为错误<br>简单说就是用于管理多人协同开发项目的技术。</p>
<h4 id="手动控制版"><a href="#手动控制版" class="headerlink" title="手动控制版"></a>手动控制版</h4><p><img src="image-20210222092842985.png"></p>
<h3 id="版本控制-1"><a href="#版本控制-1" class="headerlink" title="版本控制"></a>版本控制</h3><p>版本控制包括：检入检出控制、分支和合并、历史记录。</p>
<p>1．检入检出控制<br>        软件开发人员对源文件的修改不能在软件配置管理库中进行，对源文件的修改依赖于基本的文件系统并在各自的工作空间下进行。为了方便软件开发，需要不同的软件开发人员组织各自的工作空间。一般说来，不同的工作空间由不同的目录表示，而对工作空间的访问，由文件系统提供的文件访问权限加以控制。访问控制需要管理各个人员存取或修改一个特定软件配置对象的权限。开发人员能够从库中取出对应项目的配置项进行修改，并检入到软件配置库中，对版本进行“升级”；配置管理人员可以确定多余配置项并删除。同步控制的实质是版本的检入检出控制。检入就是把软件配置项从用户的工作环境存入到软件配置库的过程，检出就是把软件配置项从软件配置库中取出的过程。检人是检出的逆过程。同步控制可用来确保由不同的人并发执行的修改不会产生混乱。</p>
<p>2．分支和合并<br>        版本分支(以一个已有分支的特定版本为起点，但是独立发展的版本序列)的人工方法就是从主版本——称为主干上拷贝一份，并做上标记。在实行了版本控制后，版本的分支也是一份拷贝，这时的拷贝过程和标记动作由版本控制系统完成。版本合并(来自不同分支的两个版本合并为其中一个分支的新版本)有两种途径，一是将版本A的内容附加到版本B中；另一种是合并版本A和版本B的内容，形成新的版本C。</p>
<p>3．历史记录<br>        版本的历史记录有助于对软件配置项进行审核，有助于追踪问题的来源。历史记录包括版本号、版本修改时间、版本修改者、版本修改描述等最基本的内容，还可以有其他一些辅助性内容，比如版本的文件大小和读写属性。</p>
<h3 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h3><p>​    ●  Git<br>​    ●  SVN ( Subversion )<br>​    ●  CVS ( Concurrent Versions System )<br>​    ●  VSS ( Micorosoft Visual SourceSafe )<br>​    ●  TFS ( Team Foundation Server )<br>​    ●  Visual Studio Online</p>
<h3 id="GIT与SVN的区别"><a href="#GIT与SVN的区别" class="headerlink" title="GIT与SVN的区别"></a>GIT与SVN的区别</h3><h4 id="本地版本控制-如RCS"><a href="#本地版本控制-如RCS" class="headerlink" title="本地版本控制(如RCS)"></a>本地版本控制(如RCS)</h4><p>​        记录每次更新，对每个版本做一个快照，如将每次更新做备份然后按日期排版仅适用于个人</p>
<p><img src="image-20210222093134728.png"></p>
<h4 id="集中版本控制-如-SVN"><a href="#集中版本控制-如-SVN" class="headerlink" title="集中版本控制(如 SVN)"></a>集中版本控制(如 SVN)</h4><p>​        所有的版本数据都保存在服务器上,协同开发者从服务器上同步更新或上传自己的修改所有的开发者都与该服务器做交互，若该服务器出现问题，则将无法上传及获取代码，一般解决方法为定期备份代码</p>
<p><img src="image-20210222093238406.png"></p>
<h4 id="分布式版本控制-如git"><a href="#分布式版本控制-如git" class="headerlink" title="分布式版本控制(如git)"></a>分布式版本控制(如git)</h4><p><img src="image-20210222093319633.png"></p>
<h3 id="git基本理论-核心"><a href="#git基本理论-核心" class="headerlink" title="git基本理论(核心)"></a>git基本理论(核心)</h3><h4 id="分支内容存储在HEAD中"><a href="#分支内容存储在HEAD中" class="headerlink" title="分支内容存储在HEAD中"></a>分支内容存储在HEAD中</h4><p><img src="image-20210223180806311.png" alt="image-20210223180806311"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure>


<h4 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h4><p>​        git本地有三个工作区域，<code>工作目录(Working Directory)</code>、<code>暂存区(Stage Index)</code>、<code>资源库(Repository或Git Directory)</code>。如果在加上<code>远程的git仓库(Rermote Directory)</code>就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p><img src="%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="未命名文件"></p>
<ul>
<li><p>Working Directory：工作区，就是平时存放项目代码的地方</p>
</li>
<li><p>Index / Stage ：暂存区,用于临时存放你的改动，事实上它只是一个文件,保存即将提交到文件列表信息</p>
</li>
<li><p>Repository: 仓库区(或本地仓库),就是安全存放数据的位置 ,这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p>
</li>
<li><p>Remote : 远程仓库（github或gitee码云）,托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>
</li>
</ul>
<p>其中开发者仅需管理Working Directory和Remote，暂存区和仓库区使用命令操作即可</p>
<p>下图可理解为git管理的项目的示意图:</p>
<p>​    Directory：整个项目</p>
<p>​        WorkSpace：代码文件</p>
<p>​        .git(隐藏文件夹)：其中包括Index暂存区及Head目录</p>
<p><img src="image-20210223181645558.png" alt="image-20210223181645558"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>jsoup爬虫</title>
    <url>/2021/05/11/%E6%8A%80%E6%9C%AF/jsoup%E7%88%AC%E8%99%AB/0.%20jsoup%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<p>爬取数据：获取请求返回的页面信息，筛选出我们想要的数据</p>
<p>jSoup用来解析网页，需要爬电影音乐等可以使用tika</p>
<p>jSoup包</p>
<ol>
<li><p>导入依赖（尽量确保自己引入的是最新的版本，否则可能无法正确获取目标页面）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>受害者</p>
</li>
</ol>
<p><a href="https://search.jd.com/Search?keyword=java&amp;enc=utf-8&amp;wq=java&amp;pvid=7b8b0abf7291475d8303636f784d4f16">https://search.jd.com/Search?keyword=java&amp;enc=utf-8&amp;wq=java&amp;pvid=7b8b0abf7291475d8303636f784d4f16</a></p>
<ol start="3">
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 请求太过频繁会被发现</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            parseJD(<span class="string">&quot;水果&quot;</span>, i).forEach(item -&gt; &#123;</span><br><span class="line">                downLoad(<span class="string">&quot;http:&quot;</span> + item.getSrc(), item.getName(), <span class="string">&quot;G:\\360downloads\\jsoup\\水果\\&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ShopContent&gt; <span class="title">parseJD</span> <span class="params">(String key, Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java&amp;page=1&amp;s=56&amp;click=0</span></span><br><span class="line">        <span class="comment">// 前提：需要联网</span></span><br><span class="line">        <span class="comment">// 不能获取ajax数据，获取ajax数据需要模拟浏览器</span></span><br><span class="line">        key = URLEncoder.encode(key);</span><br><span class="line">        page = page == <span class="keyword">null</span> ? <span class="number">1</span> : page;</span><br><span class="line">        String url = <span class="string">&quot;https://search.jd.com/Search?keyword=&quot;</span>+ key +<span class="string">&quot;&amp;page=&quot;</span> + page +<span class="string">&quot;&amp;s=56&amp;click=0&quot;</span>;</span><br><span class="line">        List&lt;ShopContent&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Jsoup返回的Document就是浏览器的Document对象</span></span><br><span class="line">            <span class="comment">// 所有在页面中能调用的方法这块都能调用</span></span><br><span class="line">            Document parse = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">            Element j_goodsList = parse.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">            Elements li = j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element el : li) &#123;</span><br><span class="line">                ShopContent shopContent = <span class="keyword">new</span> ShopContent();</span><br><span class="line">                <span class="comment">// 获取图片路径</span></span><br><span class="line">                <span class="comment">// 关于这种图片特别多的网站，所有的图片都是延迟加载的，保证页面先渲染出来再加载图片</span></span><br><span class="line">				<span class="comment">// String src = el.getElementsByTag(&quot;img&quot;).eq(0).attr(&quot;src&quot;);</span></span><br><span class="line">                String src = el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取名称</span></span><br><span class="line">                String text = el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">                shopContent.setSrc(src);</span><br><span class="line">                shopContent.setName(text);</span><br><span class="line">                list.add(shopContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downLoad</span> <span class="params">(String urlString, String filename, String savePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 构造URL</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlString);</span><br><span class="line">            <span class="comment">// 打开连接</span></span><br><span class="line">            URLConnection con = url.openConnection();</span><br><span class="line">            <span class="comment">//设置请求超时为5s</span></span><br><span class="line">            con.setConnectTimeout(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 输入流</span></span><br><span class="line">            InputStream is = con.getInputStream();</span><br><span class="line">            <span class="comment">// 1K的数据缓冲</span></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 读取到的数据长度</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="comment">// 输出的文件流</span></span><br><span class="line">            File sf=<span class="keyword">new</span> File(savePath);</span><br><span class="line">            <span class="keyword">if</span>(!sf.exists())&#123;</span><br><span class="line">                sf.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(sf.getPath()+<span class="string">&quot;\\&quot;</span>+filename+<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">// 开始读取</span></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(bs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 完毕，关闭所有链接</span></span><br><span class="line">            os.close();</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShopContent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String src;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


























</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>jsoup爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka</title>
    <url>/2021/03/19/%E6%8A%80%E6%9C%AF/kafka/1.%20kafka/</url>
    <content><![CDATA[<h2 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h2><a id="more"></a>

<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>​    Kafka 是一个<code>分布式</code>的基于<code>发布/订阅模式</code>的<code>消息队列</code>（Message Queue），主要应用于大数据实时处理领域。</p>
<p>p6</p>
<h3 id="2-消息队列"><a href="#2-消息队列" class="headerlink" title="2. 消息队列"></a>2. 消息队列</h3><p>​    传统消息队列的应用场景</p>
<p><img src="image-20210322150024538.png" alt="image-20210322150024538"></p>
<p>​    同步需要客户端和服务端要同时在线</p>
<p>​    好处：  （主要为解耦和削峰）</p>
<pre><code>1. 解耦：不需要两端同时在线，允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。
2. 可恢复性：系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。
3. 缓冲：有助于控制和优化数据流经过系统的速度解决生产消息和消费消息的处理速度不一致的情况，``主要解决生产大于消费的情况``
4. 灵活性 &amp; 峰值处理能力：``削峰``，缓解服务器压力，在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪 费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。``灵活性``主要体现在可以在峰值时添加服务器以处理突增的访问量。
5. 异步通信：很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</code></pre>
<h3 id="3-消息队列的两种模式"><a href="#3-消息队列的两种模式" class="headerlink" title="3. 消息队列的两种模式"></a>3. 消息队列的两种模式</h3><p>（1）点对点模式 （一对一，消费者主动拉取数据，消息收到后消息清除）</p>
<p>消息生产者生产消息发送到Queue中 然后消息消费者从 Queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。</p>
<p>Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p>
<p><img src="image-20210322145651680.png" alt="image-20210322145651680"></p>
<p>（2）发布 /订阅模式 （一对多，消费者消费数据之后不会清除） </p>
<p>消息消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic的消息会被所有订阅者消费。</p>
<p>发布/订阅模式又分为两种：</p>
<ol>
<li>消费者端主动拉取的消息队列（消费者若要知道消息队列中有新的消息需要有一个长的轮询，要不断的询问消息队列中是否存在新的消息）</li>
<li>生产者推送的消息队列（由于生产者不清楚消费者的消费速度，因此假设生产者的推送速度为固定的50M/S，若消费者的消费速度为100M/S时就造成了资源浪费，而若消费者的消费速度为10M/S时消费者方就有撑爆崩溃的风险）</li>
</ol>
<p><img src="image-20210322145710577.png" alt="image-20210322145710577"></p>
<h3 id="4-Kafka架构"><a href="#4-Kafka架构" class="headerlink" title="4. Kafka架构"></a>4. Kafka架构</h3><p><img src="image-20210322153158964.png" alt="image-20210322153158964"></p>
<p>1）Producer ：消息生产者，就是向kafka broker 发消息的客户端；<br>2）Consumer ：消息消费者，向kafka broker 取消息的客户端；<br>3）Consumer Group （CG）：消费者组，由多个consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。<br>4）Broker ：一台kafka 服务器就是一个broker。一个集群由多个broker 组成。一个broker可以容纳多个topic。<br>5）Topic ：可以理解为一个队列，生产者和消费者面向的都是一个topic；<br>6）Partition：为了实现扩展性，一个非常大的topic 可以分布到多个broker（即服务器）上，一个topic 可以分为多个partition，每个partition 是一个有序的队列；<br>7）Replica：副本，为保证集群中的某个节点发生故障时，该节点上的partition 数据不丢失，且kafka仍然能够继续工作 kafka提供了副本机制，一个 topic的每个分区都有若干个副本，一个 leader和若干个 follower。<br>8 leader 每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 leader。<br>9 follower 每个分区多个副本中的“从”，实时从 leader中同步数据，保持和 leader数据的同步。 leader发生故障时，某个 follower会成为新的 follower。</p>
<h4 id="生产者与集群存储"><a href="#生产者与集群存储" class="headerlink" title="生产者与集群存储"></a>生产者与集群存储</h4><h5 id="Topic-主题"><a href="#Topic-主题" class="headerlink" title="Topic    主题"></a>Topic    主题</h5><p>消息不是直接存在Broker中，而是会有不同的Topic(主题)，将消息做一个分类</p>
<p><img src="clipboard-1616398616151.png" alt="img"></p>
<p><img src="clipboard-1616398626047.png" alt="img"></p>
<p>即：A要与B通信、C要与D通信，若B和D直接从Kafka中拿消息，那么拿到的就是A和C全部的消息，就乱套了</p>
<p>由此可以建一个AB主题和一个CD主题，A发送消息时发送到AB主题中，B又从AB主题中获取数据，CD同理</p>
<p>主题的作用就是将数据进行一个分类</p>
<h5 id="Partition-分区"><a href="#Partition-分区" class="headerlink" title="Partition    分区"></a>Partition    分区</h5><p>多个服务器上相同的主题建立多个分区，当消费者请求来的时候会进行轮循，增加了Kafka集群的负载能力</p>
<h5 id="Leader-Follower-主-备份-备胎"><a href="#Leader-Follower-主-备份-备胎" class="headerlink" title="Leader/Follower    主/备份(备胎)"></a>Leader/Follower    主/备份(备胎)</h5><p><img src="clipboard-1616398690814.png" alt="img"></p>
<p>作为一个高可靠高可用的备份的消息队列，若消息只存一份若存储数据的机器挂了，那么数据将不能访问</p>
<p>使用Leader/Follower后，当一台服务器上的Leader挂掉以后，会将另外一台服务器上的Follower提升为Leader，再次访问时可以访问新的Leader保证了数据</p>
<p>无论是生产者生产还是消费者消费都是找Leader，也只能联系到Leader</p>
<h4 id="生产者与集群存储总结"><a href="#生产者与集群存储总结" class="headerlink" title="生产者与集群存储总结"></a>生产者与集群存储总结</h4><p>集群存储核心：主题</p>
<p>主题： </p>
<ol>
<li><p>分区 </p>
</li>
<li><p>每个分区有副本(副本分Leader/Follower)</p>
</li>
<li><p>无论是生产者生产还是消费者消费都是找Leader，也只能联系到Leader</p>
</li>
</ol>
<h4 id="生产者、集群存储与消费者"><a href="#生产者、集群存储与消费者" class="headerlink" title="生产者、集群存储与消费者"></a>生产者、集群存储与消费者</h4><h5 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h5><p><img src="clipboard-1616398731934.png" alt="img"></p>
<ol>
<li>一个分区partition只能被一个消费者组里边的某一个消费者消费</li>
</ol>
<p><img src="image-20210322160659653.png" alt="image-20210322160659653"></p>
<ol start="2">
<li><p>消费者组可以当成一个大的消费团体(是为了解决并发)</p>
</li>
<li><p>消费者组可以<code>提高消费能力</code>，若有100条数据，如果消费者组中只有一个消费者需要消费100条数据，若消费者组中有两个消费者，则每个消费者只需消费50条数据</p>
</li>
<li><p>而当消费者组中消费者个数大于主题分区数，由于一个分区只能被一个消费者组里边的某一个消费者消费，因此多出的消费组中的消费者就只能闲置，造成资源浪费，因此并发最好的情况为：<code>消费者组中的消费者数量 等于 主题的分区数</code></p>
</li>
</ol>
<h3 id="5-Zookeeper"><a href="#5-Zookeeper" class="headerlink" title="5. Zookeeper"></a>5. Zookeeper</h3><p>Kafka整个集群要正常工作，需要依赖于ZK，zk会帮助集群存储信息</p>
<p>ZK会帮助Kafka管理整个集群</p>
<p>消费者也会存某些消息，如：消费者挂了，运行正常后可以接着消费而不是从头开始消费</p>
<p>因此消费者会将消费到的位置信息保存在ZK中</p>
<p>0.9版本前会将信息存储在ZK中，0.9版本之后会将信息存在Kafka本地中</p>
<p>改的原因：消费者本身跟Kafka集群进行通信，消费者在与Kafka维护连接的同时还要维护与ZK的连接</p>
<p>消费者是以拉取的模式获取连接的，拉取得速度是非常快的，而将信息存到zk中时，拉取得同时还得和zk进行沟通，跟zk打交道就太过频繁</p>
<p>Kafka存储数据是存在磁盘中的，因为其默认保留七天(配置文件中配置保存168小时)，内存办不到</p>
<p>​    </p>
]]></content>
      <categories>
        <category>技术</category>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka安装</title>
    <url>/2021/03/22/%E6%8A%80%E6%9C%AF/kafka/2.%20kafka%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="http://kafka.apache.org/">http://kafka.apache.org/</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2021/03/22/%E6%8A%80%E6%9C%AF/nginx/1.%20nginx/</url>
    <content><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><a id="more"></a>

<p>项目部署到线上时，用户使用少，并发量小，仅使用tomcat返回内容给用户，项目只需一个jar包就够了</p>
<p>当访问人数越来越多，并发量慢慢增大，一台服务器已经不能满足需求</p>
<p>于是可以增加服务器，讲项目启动在不同的服务器上，用户访问代理服务器，代理服务器帮助我们转发和处理请求</p>
<p>因此代理服务器需要具有以下特点：</p>
<ol>
<li>负载均衡（给性能强的服务器增加权重，使请求更多的访问到该服务器上）</li>
<li>反向代理</li>
</ol>
<p><img src="image-20210322174144218.png" alt="image-20210322174144218"></p>
<p>我们希望这个代理服务器可以帮助我们接收用户的请求。然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的。用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验!</p>
<h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p>Nginx (engine x)是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是 由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点开发的,第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日, nginx 1.0.4发布。</p>
<p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有:百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。<br>Nginx是-个安装非常的简单、配置文件非常简洁(还能够支持perl语法)、Bug非常少的服务。Nginx启动特别容易，并且几乎可以做到7*24不问断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。<br>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达50,000个并发连接数的响应。</p>
<h1 id="Nginx作用"><a href="#Nginx作用" class="headerlink" title="Nginx作用"></a>Nginx作用</h1><blockquote>
<p>Http代理，反向代理</p>
</blockquote>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><code>代理客户端</code></p>
<p>如：VPN，国内存在防火墙，客户端无法访问国外网站，而客户端使用VPM先可以访问代理服务器，代理服务器访问外国网站，此类代理即为正向代理</p>
<p><img src="image-20210322175141813.png" alt="image-20210322175141813"></p>
<h3 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h3><p><code>代理服务器端</code></p>
<p>如：访问百度网址，百度存在多台服务器，用户仅需通过<a href="http://www.baidu.com访问代理服务器即可,无法感知自身访问的到底是哪台服务器/">www.baidu.com访问代理服务器即可，无法感知自身访问的到底是哪台服务器</a></p>
<p><img src="image-20210322175500931.png" alt="image-20210322175500931"></p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><p><img src="image-20210322175956175.png" alt="image-20210322175956175"></p>
<h3 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h3><p>保证服务器性能最大化</p>
<p><img src="image-20210322180033474.png" alt="image-20210322180033474"></p>
<h3 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h3><p>iphash对客户端请求的ip进行hash操作。然后根据hash结果将同一个客户端ip的请求分发给同- -台服务器进行处理，可以解决session不共享的问题。</p>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的(如: css、 html. jpog. js等等文件)，这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来， 动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p>
<p><img src="image-20210322190527587.png" alt="image-20210322190527587"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx安装</title>
    <url>/2021/03/23/%E6%8A%80%E6%9C%AF/nginx/2.%20nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h1><a id="more"></a>

<h2 id="下载稳定版本"><a href="#下载稳定版本" class="headerlink" title="下载稳定版本"></a>下载稳定版本</h2><p><img src="image-20210323091817433.png" alt="stable-version"></p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><img src="image-20210323092114038.png" alt="image-20210323092114038"></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol>
<li>直接双击nginx.exe启动（点击后闪下就会关闭，不推荐）</li>
<li>dos命令启动</li>
</ol>
<p><img src="image-20210323092439446.png" alt="image-20210323092439446"></p>
<h2 id="验证是否启动成功"><a href="#验证是否启动成功" class="headerlink" title="验证是否启动成功"></a>验证是否启动成功</h2><p>浏览器中访问<code>localhost:80</code></p>
<p><img src="image-20210323092600657.png" alt="image-20210323092600657"></p>
<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><p><img src="image-20210323092751749.png" alt="nginx-1.18.0"></p>
<p>上传</p>
<p>scp</p>
<h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>


<h2 id="执行configure"><a href="#执行configure" class="headerlink" title="执行configure"></a>执行configure</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行配置文件</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>


<p>执行configure时可能报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./configure: error: C compiler cc is not found</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原因为缺C编译器，解决方法：</span></span><br><span class="line">yum -y install gcc gcc-c++ autoconf automake make</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./configure: error: the HTTP rewrite module requires the PCRE library.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 缺少glibc-devel</span></span><br><span class="line">yum install glibc-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./configure: error: the HTTP gzip module requires the zlib library. You can either <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 缺少zlib-devel</span></span><br><span class="line">yum install -y zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx默认会安装到/usr/<span class="built_in">local</span>/nginx目录下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因此该路径被占用可能会有问题</span></span><br></pre></td></tr></table></figure>


<p>安装成功会出现</p>
<p><img src="image-20210329175828337.png" alt="image-20210329175828337"></p>
<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>
<p><img src="image-20210329180122648.png" alt="image-20210329180122648"></p>
<h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入nginx目录找到sbin文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入sbin文件，运行，Linux中运行后无任何报错即表示运行成功</span></span><br><span class="line">./niginx</span><br></pre></td></tr></table></figure>


<p>本机访问 localhost:80</p>
<p><img src="image-20210330105903346.png" alt="image-20210330105903346"></p>
<p>若本机访问可以访问，网络访问无法访问，原因可能为有防火墙</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用</title>
    <url>/2021/03/30/%E6%8A%80%E6%9C%AF/nginx/3.%20nginx%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h1><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看nginx位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx: /usr/<span class="built_in">local</span>/nginx</span></span><br><span class="line">whereis nginx</span><br><span class="line"></span><br><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安全退出</span></span><br><span class="line">./nginx -s quit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ***重新加载配置文件***</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看nginx进程</span></span><br><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure>


<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>使用jar包一个项目启动两次（jar包项目yml配置文件中必须配置server.port）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar eureka-0.0.1-SNAPSHOT.jar --server.prot=8080</span><br><span class="line"></span><br><span class="line">java -jar eureka-0.0.1-SNAPSHOT.jar --server.prot=8081</span><br></pre></td></tr></table></figure>


<p>模拟用户访问端口8080及8081两个项目，肯定不能让用户进行端口切换</p>
<p>因此使用nginx进行反向代理，用户通过同一个端口访问两个不同的项目</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Linux系统配置文件位于config/nginx.conf</p>
<p>windows系统配置文件位于conf/nginx.conf</p>
<h3 id="配置文件信息–说明"><a href="#配置文件信息–说明" class="headerlink" title="配置文件信息–说明"></a>配置文件信息–说明</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一. 全局配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 二. 最大连接数及事件监听</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三. http</span></span><br><span class="line">http &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 1. http配置</span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    </span><br><span class="line">    # 2. 负载均衡配置  </span><br><span class="line">    # xx为名字，可随便起，但必须与下边server代理中location下的proxy_pass配置相对应</span><br><span class="line">    # weight表示权重</span><br><span class="line">	upstream xx &#123;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> 服务器资源</span></span><br><span class="line">		server 127.0.0.1:8080 weight=1;</span><br><span class="line">		server 127.0.0.1:8081 weight=1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 3. 端口反向代理</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> 代理</span> </span><br><span class="line">        location / &#123;</span><br><span class="line">            # 反向代理</span><br><span class="line">            proxy_pass http://xx;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line"><span class="meta">		#</span><span class="bash"> location配置</span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> 即若访问user目录时访问121服务器，若访问admin目录时，则访问122服务器</span></span><br><span class="line">        location /user &#123;</span><br><span class="line">            # 121 服务器</span><br><span class="line">        &#125;</span><br><span class="line">        location /admin &#123;</span><br><span class="line">            # 122 服务器</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 另一个端口</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> 代理</span> </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="配置文件信息–实际配置"><a href="#配置文件信息–实际配置" class="headerlink" title="配置文件信息–实际配置"></a>配置文件信息–实际配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一. 全局配置，配置全局生效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可指定用户、进程等</span></span><br><span class="line"><span class="meta">#</span><span class="bash">user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 二. 最大连接数及事件监听</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三. http</span></span><br><span class="line">http &#123;</span><br><span class="line">	</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 1. http配置</span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">	</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 负载均衡</span></span><br><span class="line">	upstream myupstream &#123;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> 服务器资源</span></span><br><span class="line">		server 127.0.0.1:8081 weight=1;</span><br><span class="line">		server 127.0.0.1:8082 weight=1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    	# 监听端口</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"><span class="meta">		#</span><span class="bash"> 代理</span></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            # 代理</span><br><span class="line">			proxy_pass  http://myupstream;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 负载均衡</span></span><br><span class="line">upstream myupstream &#123;</span><br><span class="line">    # 服务器资源	weight为权重</span><br><span class="line">    server 116.63.156.3:8088 weight=1;</span><br><span class="line">    server 192.168.11.110:8088 weight=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    proxy_pass  http://myupstream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本次配置意为"><a href="#本次配置意为" class="headerlink" title="本次配置意为"></a>本次配置意为</h2><p>若nginx服务器为192.168.11.121</p>
<p>若使用 <code>192.168.11.121</code> 访问服务器（最后边的/一般会省略）</p>
<p>则会被代理为 http:// + myupstream（负载均衡中的服务器资源）</p>
<p>即访问的可能为 <a href="http://116.63.156.3:8088/">http://116.63.156.3:8088</a></p>
<p>而，若访问的是192.168.11.121/static/login.html</p>
<p>则会被代理为 <a href="http://116.63.156.3:8088/static/login.html">http://116.63.156.3:8088/static/login.html</a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li>报错原因为nginx可能未启动</li>
</ol>
<p><img src="image-20210330161010799.png" alt="image-20210330161010799"></p>
<ol start="2">
<li>配置时单个upstream负载均衡中要配置相同的项目资源，否则会提示静态资源获取异常</li>
</ol>
<ol start="3">
<li>每项配置都必须以<code>;</code>结尾</li>
</ol>
<h1 id="其他-nginx配置"><a href="#其他-nginx配置" class="headerlink" title="其他 nginx配置"></a>其他 nginx配置</h1><p>动静分离</p>
<p>rewrite</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL</title>
    <url>/2021/05/11/%E6%8A%80%E6%9C%AF/redis/0.%20NoSQL/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<h2 id="1-Nosql发展"><a href="#1-Nosql发展" class="headerlink" title="1. Nosql发展"></a>1. Nosql发展</h2><h3 id="数据库发展"><a href="#数据库发展" class="headerlink" title="数据库发展"></a>数据库发展</h3><blockquote>
<p>1、单机MySQL的年代</p>
</blockquote>
<p>APP -&gt; DAL -&gt; MySQL</p>
<p>该年代网站访问量一般不会太大，单个数据库完全足够</p>
<p>更多的使用静态页面html，服务器根本没有太大的压力</p>
<p>此时，整个网站的瓶颈：</p>
<ul>
<li>数据量如果太大，一台机器放不下</li>
<li>数据的索引（B+ Tree）</li>
<li>访问量（读写混合），一个服务器承受不了~</li>
</ul>
<blockquote>
<p>2、缓存Memcached + MySQL + 垂直拆分</p>
</blockquote>
<p>读写分离：</p>
<p><img src="image-20210512175208541.png" alt="image-20210512175208541"></p>
<p>网站80%的情况都是在读取数据，若每次都去查询数据库的话就十分的麻烦</p>
<p>此时可以使用缓存技术：</p>
<p>如：用户1查询1号商品，用户2也来查询1号商品，若两次请求均查询数据库，则造成了资源的浪费，此时可以在用户1查询1号商品时将1号商品放入<code>缓存中</code>，再有用户查询1号商品时直接从缓存中获取数据即可，保证了效率</p>
<p><img src="image-20210512175351483.png" alt="image-20210512175351483"></p>
<blockquote>
<p>3、分库分表 + 水平拆分 + MySQL集群</p>
</blockquote>
<p>在各个集群中各存放一部分数据，加起来就是完整的数据，通过集群的一些机制就可以找到对应的数据的位置</p>
<p><img src="image-20210512181602909.png" alt="image-20210512181602909"></p>
<blockquote>
<p>4、目前</p>
</blockquote>
<p>我们处于大数据时代；</p>
<p>大数据即一般的数据库无法进行分析处理了！</p>
<p>MySQL等关系型数据库就不够用了！数据量大，变化快</p>
<p>由此产生更多类型数据库</p>
<ul>
<li>有的使用MySQL存储一些比较大的文件，如：博客、图片等！数据库表很大，效率就低了，如果有一种数据库专门处理这种数据。Mysql的压力就变得十分小了。</li>
<li>大数据的IO压力下，表几乎无法更改，即，若表中有上亿条数据，此时若要加一列是十分困难的</li>
</ul>
<p><strong>目前一个基本的互联网项目</strong></p>
<p>此时有一组用户需要访问数据库</p>
<p><img src="image-20210512185040266.png" alt="image-20210512185040266"></p>
<h3 id="为什么要用nosql"><a href="#为什么要用nosql" class="headerlink" title="为什么要用nosql"></a>为什么要用nosql</h3><p>用户的个人信息、社交网络、地理位置、用户自己产生的数据、用户日志等等爆发式增长！</p>
<p>这时候我们就需要使用NoSQL数据库，NoSQL可以很好的处理以上的情况</p>
<h2 id="2-Nosql"><a href="#2-Nosql" class="headerlink" title="2. Nosql"></a>2. Nosql</h2><h3 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h3><p>NoSQL = Not Only SQL （不仅仅是SQL）</p>
<p>泛指非关系型数据库，传统的关系型数据很难搞定web2.0时代，尤其是超大规模的高并发的社区</p>
<p>关系型数据库：使用表、行、列 来做数据存储</p>
<p>很多数据类型：用户的个人信息、社交网络、地理位置等，这些数据类型的存储不需要一个固定的格式，不需要多余的操作就可以横向扩展</p>
<p>可类比Map&lt;String, Object&gt; 使用键值对来控制</p>
<h3 id="2-2-NoSQL特点"><a href="#2-2-NoSQL特点" class="headerlink" title="2.2 NoSQL特点"></a>2.2 NoSQL特点</h3><ol>
<li>方便扩展（数据之间没有关系，很好扩展）</li>
<li>大数据量高性能（Redis一秒可以写8万次，读取11万次，NoSQL的缓存为记录级，是一种细粒度的缓存，性能会比较高）</li>
<li>数据类型是多样型的（不需要事先设计数据库，随取随用，如果是数据量十分大的表很多人就无法设计了）</li>
<li>传统的RDBMS和NoSQL</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传统的RDBMS</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL </span><br><span class="line">- 数据和关系都存在单独的表中</span><br><span class="line">- 操作操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- ......</span><br><span class="line"></span><br><span class="line">NoSQL</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CAP定理 和 BASE（异地多活）初级架构师</span><br><span class="line">- 高性能，高可用，高可扩展</span><br><span class="line">- ......</span><br></pre></td></tr></table></figure>


<p>真正在公司中的时间：NoSQL + RDBMS 一起使用才是最强的</p>
<blockquote>
<p>了解：3V + 3高</p>
</blockquote>
<p>大数据时代的3V：主要是描述问题的</p>
<ol>
<li>海量Volume</li>
<li>多样Variety</li>
<li>实时Velocity</li>
</ol>
<p>大数据时代的3高：主要是对程序的要求</p>
<ol>
<li>高并发</li>
<li>高可扩（随时可以水平拆分，机器不够了，可以扩展机器来解决）</li>
<li>高性能（保证用户体验和性能）</li>
</ol>
<h2 id="3-阿里巴巴的演进分析"><a href="#3-阿里巴巴的演进分析" class="headerlink" title="3. 阿里巴巴的演进分析"></a>3. 阿里巴巴的演进分析</h2><h3 id="3-1-阿里巴巴发展史"><a href="#3-1-阿里巴巴发展史" class="headerlink" title="3.1 阿里巴巴发展史"></a>3.1 阿里巴巴发展史</h3><p>阿里巴巴中随便一个商品，都有着图片介绍、视频介绍、价格、颜色、详细信息、评价等，这么多的东西难道都是在一个数据库中吗</p>
<p><img src="image-20210513102854838.png" alt="image-20210513102854838"></p>
<h3 id="3-2-各种应用的技术："><a href="#3-2-各种应用的技术：" class="headerlink" title="3.2 各种应用的技术："></a>3.2 各种应用的技术：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 商品的基本信息</span></span><br><span class="line">    名称、价格、商家信息；</span><br><span class="line">    关系型数据库就可以解决了  MySQL / Oracle（淘宝早年就去IOE了）</span><br><span class="line"></span><br><span class="line">    淘宝内部的MySQL不是大家用的MySQL，而是高度定制化的</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 商品的描述、评论（文字比较多）</span></span><br><span class="line">    文档型数据库中：MongoDB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 图片</span></span><br><span class="line">    分布式文件系统 </span><br><span class="line">    - FastDFS</span><br><span class="line">    - 淘宝自己的  TFS</span><br><span class="line">    - GOOGLE的	GFS</span><br><span class="line">    - Hadoop	HDFS</span><br><span class="line">    - 阿里云	OSS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 商品关键字</span></span><br><span class="line">    搜索引擎	</span><br><span class="line">    - ELASTICSEARCH</span><br><span class="line">    - SOLR</span><br><span class="line">    - ISearch：  多隆</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 5. 商品热门波段信息</span></span><br><span class="line">	内存数据库</span><br><span class="line">	- Redis</span><br><span class="line">	- Tair</span><br><span class="line">	- Memcache</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 6. 商品的交易，外部的支付接口</span></span><br><span class="line">	- 第三方应用</span><br></pre></td></tr></table></figure>


<h3 id="3-3-大型互联网应用问题："><a href="#3-3-大型互联网应用问题：" class="headerlink" title="3.3 大型互联网应用问题："></a>3.3 大型互联网应用问题：</h3><ul>
<li>数据类型太多了</li>
<li>数据源繁多，经常重构</li>
<li>数据要改造涉及大面积的改动</li>
</ul>
<h3 id="3-4-解决问题方式"><a href="#3-4-解决问题方式" class="headerlink" title="3.4 解决问题方式"></a>3.4 解决问题方式</h3><p><img src="image-20210513113048797.png" alt="image-20210513113048797"></p>
<p>详见 阿里巴巴中文站架构设计实践</p>
<h1 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h1><h2 id="1-四大分类"><a href="#1-四大分类" class="headerlink" title="1. 四大分类"></a>1. 四大分类</h2><p><strong>1. KV（key-value键值对）：</strong></p>
<ul>
<li>新浪：<strong>Redis</strong></li>
<li>美团：Redis + Tair</li>
<li>阿里、百度：Redis + Memcache</li>
</ul>
<p><strong>2. 文档型数据库（bson格式（和json一样））</strong></p>
<ul>
<li><strong>MongoDB</strong><ul>
<li>一个基于分布式文件存储的数据库，主要用来处理大量的文档</li>
<li>MongoDB是一个介于关系型数据库和非关系型数据库中间的产品，MongoDB是非关系型数据库中最像关系型数据库的</li>
</ul>
</li>
<li>ConthDB</li>
</ul>
<p><strong>3. 列存储数据库</strong></p>
<ul>
<li><strong>HBase</strong></li>
<li>分布式文件系统</li>
</ul>
<p><strong>4. 图关系数据库  说明：<a href="https://zhuanlan.zhihu.com/p/112704484">https://zhuanlan.zhihu.com/p/112704484</a></strong></p>
<ul>
<li><p>图数据库(Graph Database)是一种以图结构进行存储和查询的数据库。图数据库的关键概念是点（代表实体）和边（代表关系），通过边将顶点连接在一起，从而进行快速的图检索操作。</p>
</li>
<li><p><img src="v2-ff26114236c3ad0e33bd6c8b74d76ad4_720w.jpg" alt="img"></p>
</li>
<li><p><strong>Neo4j</strong>、InfoGrid</p>
</li>
</ul>
<h2 id="2-四大分类分析"><a href="#2-四大分类分析" class="headerlink" title="2. 四大分类分析"></a>2. 四大分类分析</h2><table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>Examples举例</strong></th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>键值（key-value）</strong></td>
<td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td>
<td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td>Key 指向 Value 的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td><strong>列存储数据库</strong></td>
<td>Cassandra, HBase, Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td><strong>文档型数据库</strong></td>
<td>CouchDB, MongoDb</td>
<td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语法。</td>
</tr>
<tr>
<td><strong>图形(Graph)数据库</strong></td>
<td>Neo4J, InfoGrid, Infinite Graph</td>
<td>社交网络，推荐系统等。专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis入门及搭建</title>
    <url>/2021/05/12/%E6%8A%80%E6%9C%AF/redis/0.%20Redis%E5%85%A5%E9%97%A8%E5%8F%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><a id="more"></a>

<h2 id="0-网址"><a href="#0-网址" class="headerlink" title="0. 网址"></a>0. 网址</h2><p>官网：<a href="https://redis.io/">https://redis.io/</a></p>
<p>中文网：<a href="http://redis.cn/">http://redis.cn/</a></p>
<p>官方介绍：<a href="http://redis.cn/topics/introduction">http://redis.cn/topics/introduction</a></p>
<p>Windows版下载地址：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></p>
<p>Window版本Redis需要在Github上下载（停更很久了），</p>
<p><strong>Redis推荐是在Linux服务器上搭建的</strong></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210513161902855.png" alt="image-20210513161902855"></p>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Redis（<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver），远程字典服务。</p>
<p>使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<p>免费和开源！是当下最热门的NoSQL技术之一，也被人们称为结构化数据库。</p>
<h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h2><ol>
<li>内存存储、持久化，内存中的数据是断电即失，所以持久化很重要（rdb、aof）</li>
<li>效率高，可以用于高速缓存</li>
<li>发布订阅信息</li>
<li>地图信息分析</li>
<li>计时器、计数器（浏览量！）</li>
<li>……</li>
</ol>
<h2 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h2><ol>
<li>多样的数据类型</li>
<li>持久化</li>
<li>集群</li>
<li>事务</li>
<li>……</li>
</ol>
<h1 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h1><ol>
<li><p>下载安装包</p>
</li>
<li><p>下载完毕得到压缩包，解压即可</p>
</li>
<li><p>开启Redis运行服务即可（注：此时可以看到，此次运行redis使用的配置文件为 /path/to/redis.conf，并没有用到配置文件redis.windows.conf，因此配置文件中的内容并不会生效，若要生效需要使用命令：redis-server.exe redis.windows.conf 运行redis）</p>
</li>
</ol>
<p><img src="image-20210513160714269.png" alt="image-20210513160714269"></p>
<ol start="4">
<li><p>使用redis客户端连接redis服务端（双击即可打开），连接测试：输入PING命令，会回复PONG</p>
<p><img src="image-20210513161030774.png" alt="image-20210513161030774"></p>
</li>
</ol>
<ol start="5">
<li>使用： set key 123；get key</li>
</ol>
<p><img src="image-20210513161146254.png" alt="image-20210513161146254"></p>
<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 下载获得安装包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 发送安装包到服务器</span></span><br><span class="line">scp C:\Users\zbh\Desktop\1.txt  lucas@192.168.11.150:/home/lucas/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 解压</span></span><br><span class="line">tar -zxvf redis-5.0.3.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 下载安装环境 可使用`gcc -v`查看下载的gcc版本</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 配置文件</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. 确认安装是否完成</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般我们自己安装的东西都会安装在  /usr/<span class="built_in">local</span>/bin 目录下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7. 将redis配置文件复制到 /usr/<span class="built_in">local</span>/bin 目录下</span></span><br></pre></td></tr></table></figure>


<h2 id="2-修改redis为后台启动"><a href="#2-修改redis为后台启动" class="headerlink" title="2. 修改redis为后台启动"></a>2. 修改redis为后台启动</h2><p>redis默认不是后台启动的，若需要后台启动要修改配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索daemonzie  修改为yes</span></span><br><span class="line">/daemonzie</span><br></pre></td></tr></table></figure>


<h2 id="3-启动redis服务"><a href="#3-启动redis服务" class="headerlink" title="3. 启动redis服务"></a>3. 启动redis服务</h2><h3 id="1-通过指定的配置文件启动服务"><a href="#1-通过指定的配置文件启动服务" class="headerlink" title="1. 通过指定的配置文件启动服务"></a>1. 通过指定的配置文件启动服务</h3><p><code>redis-server redis-config/redis.conf</code></p>
<p><img src="image-20210514144751029.png" alt="image-20210514144751029"></p>
<h3 id="2-查看是否启动成功"><a href="#2-查看是否启动成功" class="headerlink" title="2. 查看是否启动成功"></a>2. 查看是否启动成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 或使用ps -ef查看redis是否启动</span>   </span><br><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>


<h3 id="3-连接到服务"><a href="#3-连接到服务" class="headerlink" title="3. 连接到服务"></a>3. 连接到服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-cli -p 端口号</span></span><br><span class="line">redis-cli -p 6379</span><br></pre></td></tr></table></figure>


<h3 id="4-停止服务-shutdown"><a href="#4-停止服务-shutdown" class="headerlink" title="4. 停止服务 shutdown"></a>4. 停止服务 shutdown</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在客户端输入命令</span></span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure>
<p><img src="image-20210514172511671.png" alt="image-20210514172511671"></p>
<h1 id="redis-benchmark性能测试"><a href="#redis-benchmark性能测试" class="headerlink" title="redis-benchmark性能测试"></a>redis-benchmark性能测试</h1><p>官方自带的压力测试工具</p>
<p><img src="707331-20180201145503750-901697180.png" alt="img"></p>
<p>测试并发连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试：100个并发连接，10000请求 / s</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 10000</span><br></pre></td></tr></table></figure>


<p>测试结果分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">====== SET ======</span><br><span class="line">  10000 requests completed <span class="keyword">in</span> 0.28 seconds		// 对1w个请求进行写入测试</span><br><span class="line">  100 parallel clients	// 100个并发客户端</span><br><span class="line">  3 bytes payload		// 每次写入三个字节</span><br><span class="line">  keep alive: 1			// 只有一台服务器处理这些请求（单机性能）</span><br><span class="line"></span><br><span class="line">2.42% &lt;= 1 milliseconds</span><br><span class="line">79.73% &lt;= 2 milliseconds</span><br><span class="line">94.08% &lt;= 3 milliseconds</span><br><span class="line">98.52% &lt;= 4 milliseconds</span><br><span class="line">99.63% &lt;= 5 milliseconds</span><br><span class="line">99.92% &lt;= 6 milliseconds</span><br><span class="line">100.00% &lt;= 6 milliseconds</span><br><span class="line">35335.69 requests per second	// 每秒处理35335.69个请求</span><br></pre></td></tr></table></figure>


<h1 id="Redis基本知识说明"><a href="#Redis基本知识说明" class="headerlink" title="Redis基本知识说明"></a>Redis基本知识说明</h1><h2 id="1-redis默认有16个数据库，默认使用第0个数据库"><a href="#1-redis默认有16个数据库，默认使用第0个数据库" class="headerlink" title="1. redis默认有16个数据库，默认使用第0个数据库"></a>1. redis默认有16个数据库，默认使用第0个数据库</h2><p><img src="image-20210514180642373.png" alt="image-20210514180642373"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 select 切换数据库</span></span><br><span class="line">select 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前数据被使用的大小</span></span><br><span class="line">dbsize</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前数据库状态</span></span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除当前数据库</span></span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除所有数据库</span></span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>


<h2 id="2-Redis是单线程的"><a href="#2-Redis是单线程的" class="headerlink" title="2. Redis是单线程的"></a>2. Redis是单线程的</h2><blockquote>
<p>Redis是单线程的</p>
</blockquote>
<p>Redis是基于内存操作，CPU不是Redis的性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽的，既然可以使用单线程就使用了单线程！</p>
<blockquote>
<p>为什么Redis单线程还那么快</p>
</blockquote>
<p>Redis是C语言写的，官方提供的数据为10W+ 的QPS，完全不必同样使用key-value的Memcache差</p>
<ol>
<li>误区1：高性能的服务器一定是多线程的？</li>
<li>误区2：多线程一定比单线程效率高？（CPU上下文切换也会消耗资源）</li>
<li>运行速度： CPU &gt; 内存 &gt; 硬盘 </li>
</ol>
<p>核心：redis是将所有的数据全部都放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上，在内存情况下，这个就是最佳方案！</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基本操作及数据类型</title>
    <url>/2021/05/12/%E6%8A%80%E6%9C%AF/redis/1.%20Redis%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Redis基本操作"><a href="#Redis基本操作" class="headerlink" title="Redis基本操作"></a>Redis基本操作</h1><a id="more"></a>

<h2 id="1-redis库表操作"><a href="#1-redis库表操作" class="headerlink" title="1. redis库表操作"></a>1. redis库表操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换数据库 select</span></span><br><span class="line">select 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前数据被使用的大小</span></span><br><span class="line">dbsize</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前数据库状态</span></span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除当前数据库</span></span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除所有数据库</span></span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>


<h2 id="2-Redis基本操作"><a href="#2-Redis基本操作" class="headerlink" title="2. Redis基本操作"></a>2. Redis基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试连接是否成功 返回 PONG  表示连接成功</span></span><br><span class="line">PING</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入数据  <span class="built_in">set</span> key value</span></span><br><span class="line">set user zhang3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数据  get key</span></span><br><span class="line">get user</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取所有key</span></span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否存在 user</span></span><br><span class="line">exists user</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除 user</span></span><br><span class="line">move user 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置过期时间 (秒)</span></span><br><span class="line">expire user 10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置值同时设置时间</span></span><br><span class="line">setex user 60 zhang3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询剩余时间</span></span><br><span class="line">ttl user</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前key类型</span></span><br><span class="line">type user</span><br></pre></td></tr></table></figure>


<h3 id="登录操作"><a href="#登录操作" class="headerlink" title="登录操作"></a>登录操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令方式获取登录密码</span></span><br><span class="line">config get requirepass</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改登录密码</span></span><br><span class="line">config set requirepass 123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存修改</span></span><br><span class="line">save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录</span></span><br><span class="line">auth 123</span><br></pre></td></tr></table></figure>


<h1 id="Redis五大数据类型"><a href="#Redis五大数据类型" class="headerlink" title="Redis五大数据类型"></a>Redis五大数据类型</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<code>数据库、缓存和消息中间件</code>。 它支持多种类型的数据结构，如 <code>字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets）</code> 与范围查询， <code>bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询</code>。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
<h2 id="1-String"><a href="#1-String" class="headerlink" title="1. String"></a>1. String</h2><p>使用场景：value为字符串或者数字</p>
<ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>粉丝数</li>
<li>对象存储</li>
</ul>
<h3 id="1-1-数字操作"><a href="#1-1-数字操作" class="headerlink" title="1.1 数字操作"></a>1.1 数字操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数字 i++ 操作  <span class="built_in">set</span> views 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可用来做播放量等的统计</span></span><br><span class="line">incr views</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> i-- 操作</span></span><br><span class="line">decr views</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 步长 i+= 操作，加减一个值</span></span><br><span class="line">incrby views 10</span><br><span class="line">decrby views 10</span><br></pre></td></tr></table></figure>


<h3 id="1-2-字符串操作"><a href="#1-2-字符串操作" class="headerlink" title="1.2 字符串操作"></a>1.2 字符串操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取字符串的一部分  <span class="built_in">set</span> key1 <span class="string">&quot;hello,world&quot;</span></span></span><br><span class="line">getrange key1 0 3	# &quot;hell&quot;</span><br><span class="line">getrange key1 0 -1	# 获取全部 &quot;hello,world&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换指定位置开始的字符串，原字符串为：<span class="string">&quot;hello,world&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其会从下标为6的字符开始替换，替换的字符数量为输入字符的长度</span></span><br><span class="line">setrange key1 6 java	# &quot;hello,javad&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串追加，key1原值：v1，追加后：<span class="string">&quot;v1 hello&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前key不存在就相当于<span class="built_in">set</span> key1 <span class="string">&quot; hello&quot;</span></span></span><br><span class="line">append key1 &quot; hello&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取字符串长度</span></span><br><span class="line">strlen key1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# ex nx ###################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置值同时设置时间</span></span><br><span class="line">setex user 60 zhang3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果key不存在则入库，否则不入库（分布式锁中会常使用）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初次设置 setnx mydb <span class="string">&quot;redis&quot;</span> 提示：(<span class="built_in">integer</span>) 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次设置 setnx mydb <span class="string">&quot;mysql&quot;</span> 提示：(<span class="built_in">integer</span>) 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 get mydb 结果依然为：<span class="string">&quot;redis&quot;</span> 没有改变</span></span><br><span class="line">setnx mydb &quot;redis&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 多值操作 ###################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同时设置多个值</span></span><br><span class="line">mset mset k1 v1 k2 v2 k3 v3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同时获取多个值</span></span><br><span class="line">mget k1 k2 k3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多值的nx操作  提示：(<span class="built_in">integer</span>) 0，表示未设置成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原因为 msetnx 为原子性操作</span></span><br><span class="line">msetnx k1 v1 k4 v4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拓展：使用redis存储user对象，user:&#123;id&#125;:&#123;filed&#125; value</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如：对象 user:&#123;id:1, name:zhang3, age:10&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储数据方法</span></span><br><span class="line">mset user:1:name zhang3 user:1:age 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数据方法</span></span><br><span class="line">mget user:1:name user:1:age</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 获取同时更新 ###################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先get然后<span class="built_in">set</span>，获取原来的值并设置新的值，可以做更新的操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 首次：getset db <span class="string">&quot;redis&quot;</span>，返回：(nil) 	get db：<span class="string">&quot;redis&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后：getset db <span class="string">&quot;mysql&quot;</span>，返回：<span class="string">&quot;redis&quot;</span> 	get db：<span class="string">&quot;mysql&quot;</span></span></span><br><span class="line">getset db &quot;redis&quot;</span><br></pre></td></tr></table></figure>


<h2 id="2-List（列表，值可以重复）"><a href="#2-List（列表，值可以重复）" class="headerlink" title="2. List（列表，值可以重复）"></a>2. List（列表，值可以重复）</h2><p>所有的list命令都是 L 开头的</p>
<p>redis的list中可以存储重复的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">################## 插入 ###################</span></span><br><span class="line"><span class="comment"># 由左侧插入数据 lpush mylist one</span></span><br><span class="line">lpush mylist one</span><br><span class="line"><span class="comment"># 由右侧插入数据</span></span><br><span class="line">rpush mylist right</span><br><span class="line"><span class="comment"># 在two前/后插入insert</span></span><br><span class="line">linsert mylist before two insert </span><br><span class="line">linsert mylist after two insert</span><br><span class="line"></span><br><span class="line"><span class="comment">################## 查询 ###################</span></span><br><span class="line"><span class="comment"># 获取第0到1的值</span></span><br><span class="line">lrange mylist 0 1</span><br><span class="line"><span class="comment"># 获取下标为1的值</span></span><br><span class="line">lindex mylist 1</span><br><span class="line"><span class="comment"># 数组长度</span></span><br><span class="line">llen mylist</span><br><span class="line"></span><br><span class="line"><span class="comment">################## 删除 ###################</span></span><br><span class="line"><span class="comment"># 左侧移除</span></span><br><span class="line">lpop mylist</span><br><span class="line"><span class="comment"># 右侧移除</span></span><br><span class="line">rpop mylist</span><br><span class="line"><span class="comment"># 移除指定的值</span></span><br><span class="line"><span class="comment"># 移除 mylist 中的 2 个 three</span></span><br><span class="line">lrem mylist 2 three</span><br><span class="line"><span class="comment"># 通过下标截取指定的内容</span></span><br><span class="line"><span class="comment"># 删除 除下标 1到2 之外的数据，即仅保留下标2到5的内容</span></span><br><span class="line">ltrim mylist 2 5</span><br><span class="line"></span><br><span class="line"><span class="comment">################## 修改 ###################</span></span><br><span class="line"><span class="comment"># 将下标为0的值为1</span></span><br><span class="line">lset mylist 0 1</span><br><span class="line"></span><br><span class="line"><span class="comment">################## 组合 ###################</span></span><br><span class="line"><span class="comment"># 移除列表最右侧元素，并将该元素移动到另一个列表中</span></span><br><span class="line"><span class="comment"># 将mylist中最右侧的元素移除，将该元素添加到otherlist左侧</span></span><br><span class="line">rpoplpush mylist otherlist</span><br></pre></td></tr></table></figure>


<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>实际上是一个链表</li>
<li>如果key不存在，则会创建一个新的链表</li>
<li>如果key存在，则会新增内容</li>
<li>如果移除了所有的值，即一个空链表，也表示不存在</li>
<li>在两边插入或者改动效率最高，修改中间元素，效率相对会低一点</li>
</ul>
<blockquote>
<p>可用作：栈、队列、阻塞队列</p>
</blockquote>
<ul>
<li>队列：使用lpush 添加数据，rpop拿取数据</li>
<li>栈：使用lpush 添加数据，lpop拿取数据</li>
</ul>
<h2 id="3-Set（集合，无序不重复集合）"><a href="#3-Set（集合，无序不重复集合）" class="headerlink" title="3. Set（集合，无序不重复集合）"></a>3. Set（集合，无序不重复集合）</h2><p>所有的set命令都是 S 开头的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 插入 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入</span></span><br><span class="line">sadd myset one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 查询 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有的元素</span></span><br><span class="line">smembers myset</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询值在集合中是否存在</span></span><br><span class="line">SISMEMBER myset one</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询集合元素个数</span></span><br><span class="line">scard myset</span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机抽选 2 个元素</span></span><br><span class="line">SRANDMEMBER myset 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 删除 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除元素</span></span><br><span class="line">srem myset one</span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机弹出一个元素</span></span><br><span class="line">spop myset 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 组合 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将一个指定的值移动到另外一个集合中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将two元素从myset集合移动到myset2集合中</span></span><br><span class="line">smove myset myset2 two</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 差集，交集，并集 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sadd set1 a b c</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sadd set2 b c d</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取差集 不同 difference	&gt; a</span></span><br><span class="line">sdiff set1 set2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 交集（共同好友）   &gt; b c</span></span><br><span class="line">sinter set1 set2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 并集	&gt; a b c d</span></span><br><span class="line">sunion set1 set2</span><br></pre></td></tr></table></figure>


<blockquote>
<p>应用</p>
</blockquote>
<p>微博，将用户所有关注的人放在一个set集合中，将他的粉丝也防在一个set集合中</p>
<p>共同关注，共同爱好，二度好友（好友推荐），即可实现</p>
<h2 id="4-Hash（可想象成元素为map集合）"><a href="#4-Hash（可想象成元素为map集合）" class="headerlink" title="4. Hash（可想象成元素为map集合）"></a>4. Hash（可想象成元素为map集合）</h2><p>所有的set命令都是 H 开头的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 插入 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储数据 数据格式为 myhash:&#123;k1:v1&#125;</span></span><br><span class="line">hset myhash k1 v1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同时设置多个值</span></span><br><span class="line">hmset myhash k1 v1 k2 v2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当myhash不存在field2时插入</span></span><br><span class="line">hsetnx myhash field2 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 查询 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取值</span></span><br><span class="line">hget myhash k1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取所有的值</span></span><br><span class="line">hgetall myhash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同时获取多个值</span></span><br><span class="line">hmget myhash k1 k2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取<span class="built_in">hash</span>表元素数量</span></span><br><span class="line">hlen myhash</span><br><span class="line"><span class="meta">#</span><span class="bash"> myhash是否存在k1</span></span><br><span class="line">hexists myhash k1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取所有的key</span></span><br><span class="line">hkeys myhash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取所有value</span></span><br><span class="line">HVALS myhash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 删除 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除<span class="built_in">hash</span>指定的key只要key删除了，对应的value也就消失了</span></span><br><span class="line">hdel myhash k1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 修改 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自增</span></span><br><span class="line">hincrby myhash field1 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自减</span></span><br><span class="line">hincrby myhash field1 -1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>应用</p>
</blockquote>
<p>尤其是用户信息或经常变动的信息的保存</p>
<p>因此hash更适合对象的存储</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hmset user:1 name zhang3 age 3</span><br><span class="line">hgetall user:1</span><br></pre></td></tr></table></figure>


<h2 id="5-Zset（有序集合）"><a href="#5-Zset（有序集合）" class="headerlink" title="5. Zset（有序集合）"></a>5. Zset（有序集合）</h2><p>在set的基础上，增加了一个值，分数值 score</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 添加 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加在zset中添加元素four 分数为 4</span></span><br><span class="line">zadd myset 4 four</span><br><span class="line">zadd myset 1 one 2 two 3 three</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 查询 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有</span></span><br><span class="line">zrange myset 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 排序查询 范围为 负无穷到正无穷</span></span><br><span class="line">zrangebyscore myset -inf +inf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 带分数的查询</span></span><br><span class="line">zrangebyscore myset -inf +inf withscores</span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向排序</span></span><br><span class="line">zrevrange myset 0 -1 withscores</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取集合元素数</span></span><br><span class="line">zcard myset</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指定区间的成员数量</span></span><br><span class="line">zcount myset 1 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################# 删除 ###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除zset中的元素</span></span><br><span class="line">zrem myset one</span><br></pre></td></tr></table></figure>
<blockquote>
<p>应用</p>
</blockquote>
<p>存储班级成绩，工资表排序，播放量排行榜实现</p>
<p>普通消息：1，重要消息：2，带权重进行判断</p>
<h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="1-Geospatial地理位置-命令以geo开头"><a href="#1-Geospatial地理位置-命令以geo开头" class="headerlink" title="1. Geospatial地理位置  命令以geo开头"></a>1. Geospatial地理位置  命令以geo开头</h2><p>朋友的定位，附近的人，打车距离计算</p>
<p>Redis的Geo功能可以推算地理位置的信息，推算两地之间的距离，方圆几里的人</p>
<p>可获取数据位置：<a href="https://jingweidu.bmcx.com/">https://jingweidu.bmcx.com/</a></p>
<p>官方介绍文档：<a href="https://www.redis.net.cn/order/3685.html">https://www.redis.net.cn/order/3685.html</a></p>
<h3 id="1-0-geo底层原理"><a href="#1-0-geo底层原理" class="headerlink" title="1.0.  geo底层原理"></a>1.0.  geo底层原理</h3><blockquote>
<p>geo底层其实就是zset，因此可以使用zset的命令操作geo的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询所有的元素</span></span><br><span class="line">zrange china:city 0 -1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除指定元素</span></span><br><span class="line">zrem china:city huangcao</span><br></pre></td></tr></table></figure>


<h3 id="1-1-geoadd-添加地理位置"><a href="#1-1-geoadd-添加地理位置" class="headerlink" title="1.1. geoadd    添加地理位置"></a>1.1. geoadd    添加地理位置</h3><blockquote>
<p>geoadd key 经度 维度 名称</p>
<ul>
<li>有效的经度从-180度到180度。</li>
<li>有效的纬度从-85.05112878度到85.05112878度。</li>
</ul>
<ul>
<li>当坐标位置超出上述指定范围时，该命令将会返回一个错误。</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd china:city 116.40 39.90 beijing 121.47 31.23 shanghai 106.50 29.53 chongqing 114.05 22.52 shenzhen 120.16 30.24 hangzhou 108.96 34.25 xian</span><br></pre></td></tr></table></figure>


<h3 id="1-2-geopos-获取指定的经纬度信息"><a href="#1-2-geopos-获取指定的经纬度信息" class="headerlink" title="1.2. geopos  获取指定的经纬度信息"></a>1.2. geopos  获取指定的经纬度信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取单个</span></span><br><span class="line">geopos china:city shanghai</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取多个</span></span><br><span class="line">geopos china:city shanghai beijing</span><br></pre></td></tr></table></figure>


<h3 id="1-3-geodist-获取两地距离"><a href="#1-3-geodist-获取两地距离" class="headerlink" title="1.3. geodist 获取两地距离"></a>1.3. geodist 获取两地距离</h3><blockquote>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> geodis key 名称1 名称2</span></span><br><span class="line">geodist china:city beijing shanghai</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定单位查询</span></span><br><span class="line">geodist china:city beijing shanghai km</span><br></pre></td></tr></table></figure>


<h3 id="1-4-georadius-以给定的经纬度为中心，-找出某一半径内的元素"><a href="#1-4-georadius-以给定的经纬度为中心，-找出某一半径内的元素" class="headerlink" title="1.4. georadius 以给定的经纬度为中心， 找出某一半径内的元素"></a>1.4. georadius 以给定的经纬度为中心， 找出某一半径内的元素</h3><blockquote>
<p>可用作查找附近的人，通过半径查询</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以经度：110 维度：30 为中心，1000km为半径筛选china:city中的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> withcoord	查询结果携带经纬度信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> withdist 	携带直线距离</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> count 1 	仅查询一个</span></span><br><span class="line">georadius china:city 110 30 1000 km withcoord withdist count 1</span><br></pre></td></tr></table></figure>


<h3 id="1-5-georadiusbymember-查找距离指定元素指定距离的元素"><a href="#1-5-georadiusbymember-查找距离指定元素指定距离的元素" class="headerlink" title="1.5. georadiusbymember 查找距离指定元素指定距离的元素"></a>1.5. georadiusbymember 查找距离指定元素指定距离的元素</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以经度：以 xian 为中心，1000 km 为半径筛选china:city中的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> withcoord	查询结果携带经纬度信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> withdist 	携带直线距离</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> count 1 	仅查询一个</span></span><br><span class="line">georadiusbymember china:city xian 1000 km withcoord</span><br></pre></td></tr></table></figure>


<h3 id="1-6-geohash-返回一个或多个位置元素的geohash表示"><a href="#1-6-geohash-返回一个或多个位置元素的geohash表示" class="headerlink" title="1.6. geohash 返回一个或多个位置元素的geohash表示"></a>1.6. geohash 返回一个或多个位置元素的geohash表示</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可用作在 http://geohash.org/&lt;geohash-string&gt; 中查询地理位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如 http://geohash.org/wqj6z7n28n0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将二维的经纬度转为一维的字符串，如果两个字符串越像，则两个地区越接近</span></span><br><span class="line">geohash china:city xian beijing</span><br></pre></td></tr></table></figure>


<h2 id="2-Hyperloglog"><a href="#2-Hyperloglog" class="headerlink" title="2. Hyperloglog"></a>2. Hyperloglog</h2><h3 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h3><blockquote>
<p>基数：找不重复的元素</p>
<p>Hyperloglog存在约0.81%的错误率</p>
</blockquote>
<p>A {1,3,5,7,8,7}</p>
<p>基数为： 5 </p>
<blockquote>
<p>简介</p>
</blockquote>
<p>Hyperloglog用来做基数统计的算法</p>
<p>优点：</p>
<ul>
<li>占用的内存是固定的，存储2^64不同的元素，只需要费12KB内存</li>
</ul>
<p><strong>网页的UV（访问统计）（一个人访问该网站多次，但是还是算作一个人）</strong></p>
<p>传统的方式，set保存用户的id，然后就可以通过统计set中的元素数量作为标准判断</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦！我们的目的是为了计数而不是用来保存用户id；</p>
<h3 id="2-2-使用-命令以pf开头"><a href="#2-2-使用-命令以pf开头" class="headerlink" title="2.2 使用   命令以pf开头"></a>2.2 使用   命令以pf开头</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 存储数据</span></span><br><span class="line">pfadd mykey 1 2 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取基数</span></span><br><span class="line">pfcount mykey</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并两个key  将mykey和mykey2合并到mykey3</span></span><br><span class="line">pfmerge mykey3 mykey mykey2</span><br></pre></td></tr></table></figure>


<h2 id="3-Bitmaps"><a href="#3-Bitmaps" class="headerlink" title="3. Bitmaps"></a>3. Bitmaps</h2><blockquote>
<p>位存储</p>
</blockquote>
<p>统计疫情感染人数（未感染的用0，感染的用1）：0 1 0 0 0</p>
<p>统计用户信息：活跃，不活跃；登录，未登录；365天打卡；等两种状态的都可以用Bitmaps</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 若打卡为1 未打卡为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存入key 第1位 为1</span></span><br><span class="line">setbit key 1 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某一天是否打卡</span></span><br><span class="line">getbit key 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计打卡天数，统计1的数量</span></span><br><span class="line">bitcount sign</span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>技术</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis事务及乐观锁</title>
    <url>/2021/05/12/%E6%8A%80%E6%9C%AF/redis/2.%20Redis%E4%BA%8B%E5%8A%A1%E5%8F%8A%E4%B9%90%E8%A7%82%E9%94%81/</url>
    <content><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><a id="more"></a>

<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>Redis事务本质：一组命令的集合；一个事务中的所有命令都会被序列化，Redis事务是按顺序执行的</p>
<p>执行一系列命令遵循：一次性、顺序性、排他性</p>
<blockquote>
<p>Redis单条命令是保证原子性的，但是Redis事务是不保证原子性的</p>
<p>Redis事务是没有隔离级别的概念</p>
<p>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行</p>
</blockquote>
<p>Redis事务：</p>
<ul>
<li>开启事务（multi）</li>
<li>命令入对（其他命令）</li>
<li>执行事务（exec）</li>
<li>放弃事务（discard）</li>
</ul>
<h2 id="2-正常执行事务"><a href="#2-正常执行事务" class="headerlink" title="2. 正常执行事务"></a>2. 正常执行事务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时输入命令时并不会立即执行而是被放入队列</span></span><br><span class="line">set k1 v1		# 打印：QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交事务</span></span><br><span class="line">exec</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 放弃事务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 放弃事务后，队列中的所有命令都会放弃执行</span></span><br><span class="line">discard</span><br></pre></td></tr></table></figure>


<h2 id="3-异常"><a href="#3-异常" class="headerlink" title="3. 异常"></a>3. 异常</h2><p>命令入队时如果出错则整个事务无法运行</p>
<p>命令入队成功但是执行时出错，不会影响其他的命令执行</p>
<h3 id="3-1-编译型异常"><a href="#3-1-编译型异常" class="headerlink" title="3.1 编译型异常"></a>3.1 编译型异常</h3><p>类比java中的代码有问题，即：命令有问题</p>
<p>事务中的所有命令都不会被执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3	# 正确命令</span><br><span class="line">QUEUED	</span><br><span class="line">127.0.0.1:6379&gt; set k4		# 错误命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; exec		# 提交事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k3		# 此时可以看出所有命令都没有执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>


<h3 id="3-2-运行时异常"><a href="#3-2-运行时异常" class="headerlink" title="3.2 运行时异常"></a>3.2 运行时异常</h3><p>若事务队列中存在语法型错误，那么提交事务时，其他命令是可以正常执行的，错误命令抛出异常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 &quot;v1&quot;		# 设置一个字符串类型的元素</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1			# 执行字符串元素自增</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2		# 正常存储数据</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交事务，此时可以看到：执行字符串元素自增命令报错</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">127.0.0.1:6379&gt; get k2			# 可正常获取事务中存储的数据</span><br><span class="line">&quot;v2&quot;</span><br></pre></td></tr></table></figure>


<h1 id="乐观锁-监控-Watch"><a href="#乐观锁-监控-Watch" class="headerlink" title="乐观锁 - 监控  Watch"></a>乐观锁 - 监控  Watch</h1><p>悲观锁：</p>
<ul>
<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁</li>
</ul>
<p>乐观锁：</p>
<ul>
<li>很乐观，认为什么时候都不会出问题，无论做什么都不会加锁</li>
<li>更新的时候去判断下，查看在此期间是否有人修改过这个数据</li>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
<h2 id="1-Redis的监视测试"><a href="#1-Redis的监视测试" class="headerlink" title="1. Redis的监视测试"></a>1. Redis的监视测试</h2><h3 id="1-1-正常情况"><a href="#1-1-正常情况" class="headerlink" title="1.1 正常情况"></a>1.1 正常情况</h3><p>程序正常执行时，money正常减少，out正常增加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 80</span><br><span class="line">2) (integer) 20</span><br></pre></td></tr></table></figure>


<h3 id="1-2-被另一个线程篡改"><a href="#1-2-被另一个线程篡改" class="headerlink" title="1.2 被另一个线程篡改"></a>1.2 被另一个线程篡改</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 正常线程还未提交事务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 另外一个线程动了被监视的数据</span></span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line">&quot;80&quot;</span><br><span class="line">127.0.0.1:6379&gt; set money 1000</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 此时提交事务线程，提示事务运行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>


<h3 id="1-3-被篡改后的处理方法-unwatch"><a href="#1-3-被篡改后的处理方法-unwatch" class="headerlink" title="1.3 被篡改后的处理方法  unwatch"></a>1.3 被篡改后的处理方法  unwatch</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 unwatch 解锁被监视的数据</span></span><br><span class="line">unwatch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次使用 watch 重新监视该数据，可以重新再走一次修改</span></span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>技术</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf</title>
    <url>/2021/02/22/%E6%8A%80%E6%9C%AF/thymeleaf/thymeleaf/</url>
    <content><![CDATA[<h1 id="SpringBoot整合thymeleaf"><a href="#SpringBoot整合thymeleaf" class="headerlink" title="SpringBoot整合thymeleaf"></a>SpringBoot整合thymeleaf</h1><a id="more"></a>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="前端标签模板"><a href="#前端标签模板" class="headerlink" title="前端标签模板"></a>前端标签模板</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要配置，否则标签会报红 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="配置项目小图标"><a href="#配置项目小图标" class="headerlink" title="配置项目小图标"></a>配置项目小图标</h2><p><strong>一、2.2.x 之前的版本</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.mvc.favicon.enabled=false</span></span><br></pre></td></tr></table></figure>


<p><strong>二、2.2.x 版本及以后版本</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/favicon.ico&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;bookmark&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/favicon.ico&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>技术</category>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>系统</title>
    <url>/2021/03/24/%E7%B3%BB%E7%BB%9F/0.%20%E6%80%BB/1.%20%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<p>​        没有任何软件之支持的计算机称为裸机，它仅仅构成了计算机系统的物质基础，而实际呈现在用户面前的计算机系统是经过若干层软件改造的计算机。裸机在最里层，它的外面是操作系统，经过操作系统提供的资源管理功能和方便用户的各种服务功能将裸机改造成功能更强，使用更方便的机器，通常称之为虛拟机(virtual machine)。</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>scp文件传输</title>
    <url>/2021/03/23/%E7%B3%BB%E7%BB%9F/0.%20%E6%80%BB/2.%20scp%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><a id="more"></a>

<p>上传文件</p>
<p>//使用方法：scp 源文件路径 账户@地址:目的路径</p>
<p>scp C:\Users\zbh\Desktop\1.txt  <a href="mailto:&#108;&#x75;&#x63;&#x61;&#x73;&#64;&#49;&#57;&#50;&#46;&#49;&#x36;&#56;&#46;&#x31;&#49;&#46;&#49;&#53;&#48;">&#108;&#x75;&#x63;&#x61;&#x73;&#64;&#49;&#57;&#50;&#46;&#49;&#x36;&#56;&#46;&#x31;&#49;&#46;&#49;&#53;&#48;</a>:/home/lucas/</p>
<p>然后输入密码即可</p>
<p>下载文件</p>
<p>scp <a href="mailto:&#x6c;&#x75;&#x63;&#x61;&#115;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#49;&#49;&#x30;&#x2e;&#49;&#x32;&#56;">&#x6c;&#x75;&#x63;&#x61;&#115;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#49;&#49;&#x30;&#x2e;&#49;&#x32;&#56;</a>:/home/lucas/world.txt C:\Users\zbh\Desktop\</p>
<p>上传文件夹</p>
<p>scp -r C:\Users\zbh\Desktop\1.txt  <a href="mailto:&#x6c;&#x75;&#99;&#97;&#115;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#x31;&#x31;&#x2e;&#x31;&#x35;&#x30;">&#x6c;&#x75;&#99;&#97;&#115;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#x31;&#x31;&#x2e;&#x31;&#x35;&#x30;</a>:/home/lucas/</p>
<p>上传本目录下所有文件</p>
<p>scp -r *  <a href="mailto:&#x6c;&#x75;&#x63;&#97;&#x73;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#56;&#x2e;&#x31;&#x31;&#46;&#49;&#x35;&#x30;">&#x6c;&#x75;&#x63;&#97;&#x73;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#56;&#x2e;&#x31;&#x31;&#46;&#49;&#x35;&#x30;</a>:/home/lucas/</p>
<p>指定端口号  默认使用的端口号是22，需要修改端口号时：</p>
<p>scp -P 33 1.txt  <a href="mailto:&#114;&#x6f;&#111;&#116;&#64;&#x31;&#57;&#50;&#46;&#49;&#x36;&#x38;&#46;&#x31;&#x31;&#46;&#x31;&#x35;&#48;">&#114;&#x6f;&#111;&#116;&#64;&#x31;&#57;&#50;&#46;&#49;&#x36;&#x38;&#46;&#x31;&#x31;&#46;&#x31;&#x35;&#48;</a>:/home/lucas/</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="win7可能不存在OpenSSH，需要安装"><a href="#win7可能不存在OpenSSH，需要安装" class="headerlink" title="win7可能不存在OpenSSH，需要安装"></a>win7可能不存在OpenSSH，需要安装</h2><p><strong>下载openSSH</strong></p>
<p>下载，那当然需要去权威的地方下载，这里提供github发布版</p>
<p><a href="https://github.com/PowerShell/Win32-OpenSSH/releases">openSSH-Win64.zip</a></p>
<p>文件夹G:\软件\编程\OPENSSH</p>
<p><strong>使用cmd命令安装openSSH</strong></p>
<p>step.1 解压到C:\Program Files\OpenSSH</p>
<p>据说官方要求放在这个目录下，跟着做就是了</p>
<p><img src="504233650253.png" alt="img"></p>
<p>ps 如果只是客户端使用，而不需要作为服务端，则到此为止。进入C:\Program Files\OpenSSH下，启动cmd 即可执行ssh登录到指定的服务器。</p>
<p>如果嫌进入目录麻烦，可以把C:\Program Files\OpenSSH目录添加到系统环境变量</p>
<p>我的电脑&gt;属性&gt;高级系统设置&gt;环境变量&gt;系统变量&gt;Path末尾添加;C:\Program Files\OpenSSH</p>
<p>step.2 管理员启动cmd进入OpenSSH目录</p>
<p>1)安装sshd服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</span><br></pre></td></tr></table></figure>


<p>2)开发22端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置开启启动sshd服务</span></span><br><span class="line"></span><br><span class="line">sc config sshd start= auto</span><br></pre></td></tr></table></figure>


<p>安装完成</p>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net start sshd</span><br></pre></td></tr></table></figure>


<h2 id="Linux远程连接服务器报错"><a href="#Linux远程连接服务器报错" class="headerlink" title="Linux远程连接服务器报错:"></a>Linux远程连接服务器报错:</h2><h2 id="WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED"><a href="#WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED" class="headerlink" title="WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"></a>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:ROHKP9YWTj4dYleZn0xlIQOjIL8TEInp9z5Oz03NESU.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /Users/shimh/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /Users/shimh/.ssh/known_hosts:1</span><br><span class="line">ECDSA host key for 39.107.229.88 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure>


<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>本地记录的ip地址对应的服务器存在更改，可能为服务器端重装系统</p>
<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式:"></a>解决方式:</h3><p>1.在报错中找到以下日志:</p>
<p><code>Add correct host key in /Users/shimh/.ssh/known_hosts to get rid of this message.</code></p>
<p>2.用编辑器以可编辑的方式打开以下文件</p>
<p><code>/Users/shimh/.ssh/known_hosts</code></p>
<p>3.这个文件是存储当前设备的登录过的所有IP地址远程连接的密钥文件,找到你的服务器IP对应密钥的那一行删除掉</p>
<p>4.打开linux命令行重新登录就可以了</p>
]]></content>
      <categories>
        <category>系统</category>
        <category>scp文件传输</category>
      </categories>
      <tags>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>sftp</title>
    <url>/2021/05/11/%E7%B3%BB%E7%BB%9F/1.%20Linux/0.%20sftp/</url>
    <content><![CDATA[<h1 id="linux如何搭建sftp服务器"><a href="#linux如何搭建sftp服务器" class="headerlink" title="linux如何搭建sftp服务器"></a>linux如何搭建sftp服务器</h1><a id="more"></a>

<blockquote>
<p>转自：<a href="https://www.cnblogs.com/reachos/p/11157329.html">https://www.cnblogs.com/reachos/p/11157329.html</a></p>
</blockquote>
<p>sftp采用的是ssh加密隧道，安装性方面较ftp强，而且依赖的是系统自带的ssh服务，不像ftp还需要额外的进行安装</p>
<h2 id="1-创建sftp组"><a href="#1-创建sftp组" class="headerlink" title="1. 创建sftp组"></a>1. 创建sftp组</h2><blockquote>
<p>groupadd sftp</p>
</blockquote>
<p>创建完成之后使用cat /etc/group命令组的信息</p>
<p><img src="1352343-20190721190327279-1203813997.png" alt="img"></p>
<h2 id="2-创建一个sftp用户mysftp并加入到创建的sftp组中，同时修改mysftp用户的密码"><a href="#2-创建一个sftp用户mysftp并加入到创建的sftp组中，同时修改mysftp用户的密码" class="headerlink" title="2. 创建一个sftp用户mysftp并加入到创建的sftp组中，同时修改mysftp用户的密码"></a>2. 创建一个sftp用户mysftp并加入到创建的sftp组中，同时修改mysftp用户的密码</h2><blockquote>
<p>useradd -g sftp -s /bin/false mysftp<br>passwd mysftp </p>
</blockquote>
<p><img src="1352343-20190721190555834-68000529.png" alt="img"></p>
<h2 id="3-新建-data-sftp-mysftp目录，并将它指定为mysftp组用户的home目录"><a href="#3-新建-data-sftp-mysftp目录，并将它指定为mysftp组用户的home目录" class="headerlink" title="3. 新建/data/sftp/mysftp目录，并将它指定为mysftp组用户的home目录"></a>3. 新建/data/sftp/mysftp目录，并将它指定为mysftp组用户的home目录</h2><blockquote>
<p>mkdir -p /data/sftp/mysftp<br>usermod -d /data/sftp/mysftp mysftp</p>
</blockquote>
<p><img src="1352343-20190721190651310-1496501090.png" alt="img"></p>
<h2 id="4-编辑配置文件"><a href="#4-编辑配置文件" class="headerlink" title="4. 编辑配置文件"></a>4. 编辑配置文件</h2><h2 id="etc-ssh-sshd-config，"><a href="#etc-ssh-sshd-config，" class="headerlink" title="/etc/ssh/sshd_config，"></a>/etc/ssh/sshd_config，</h2><blockquote>
<p>vi /etc/ssh/sshd_config</p>
</blockquote>
<p>　　将如下这行用#符号注释掉</p>
<p>Subsystem   sftp  /usr/libexec/openssh/sftp-server </p>
<p>并在文件最后面添加如下几行内容然后保存</p>
<p>Subsystem    sftp  internal-sftp  </p>
<p>Match Group sftp  </p>
<p>ChrootDirectory /data/sftp/%u  </p>
<p>ForceCommand  internal-sftp  </p>
<p>AllowTcpForwarding no  </p>
<p>X11Forwarding no </p>
<p><img src="1352343-20190721190803931-466530668.png" alt="img"></p>
<h2 id="5-设置Chroot目录权限"><a href="#5-设置Chroot目录权限" class="headerlink" title="5. 设置Chroot目录权限"></a>5. 设置Chroot目录权限</h2><blockquote>
<p>chown root:sftp /data/sftp/mysftp<br>chmod 755 /data/sftp/mysftp</p>
</blockquote>
<p><img src="1352343-20190721190901342-326185468.png" alt="img"></p>
<h2 id="6-新建一个目录供stp用户mysftp上传文件，这个目录所有者为mysftp所有组为sftp，所有者有写入权限所有组无写入权限"><a href="#6-新建一个目录供stp用户mysftp上传文件，这个目录所有者为mysftp所有组为sftp，所有者有写入权限所有组无写入权限" class="headerlink" title="6. 新建一个目录供stp用户mysftp上传文件，这个目录所有者为mysftp所有组为sftp，所有者有写入权限所有组无写入权限"></a>6. 新建一个目录供stp用户mysftp上传文件，这个目录所有者为mysftp所有组为sftp，所有者有写入权限所有组无写入权限</h2><p>mkdir /data/sftp/mysftp/upload </p>
<p>chown mysftp:sftp /data/sftp/mysftp/upload </p>
<p>chmod 755 /data/sftp/mysftp/upload </p>
<p><img src="1352343-20190721191003265-417048492.png" alt="img"></p>
<h2 id="7-关闭selinux并重启sshd服务，然后测试"><a href="#7-关闭selinux并重启sshd服务，然后测试" class="headerlink" title="7. 关闭selinux并重启sshd服务，然后测试"></a>7. 关闭selinux并重启sshd服务，然后测试</h2><p>setenforce 0</p>
<p>systemctl restart sshd.service</p>
<p><img src="1352343-20190721191029329-1126142717.png" alt="img"></p>
<h2 id="8-在其他服务器上进行验证-sftp-用户名-ip地址"><a href="#8-在其他服务器上进行验证-sftp-用户名-ip地址" class="headerlink" title="8. 在其他服务器上进行验证,sftp 用户名@ip地址"></a>8. 在其他服务器上进行验证,sftp 用户名@ip地址</h2><p><img src="1352343-20190721191102776-933184056.png" alt="img"></p>
<h2 id="9-查看报错"><a href="#9-查看报错" class="headerlink" title="9. 查看报错"></a>9. 查看报错</h2><p>systemctl status sshd.service</p>
<p>查看报错</p>
<h1 id="java连接sftp进行文件操作"><a href="#java连接sftp进行文件操作" class="headerlink" title="java连接sftp进行文件操作"></a>java连接sftp进行文件操作</h1><h2 id="1-参数"><a href="#1-参数" class="headerlink" title="1. 参数"></a>1. 参数</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read-doc-sftp:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">123.60</span><span class="number">.220</span><span class="number">.148</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">mysftp</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">ydwyzxqy@2021</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2038</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/upload</span></span><br></pre></td></tr></table></figure>


<h2 id="2-工具类"><a href="#2-工具类" class="headerlink" title="2. 工具类"></a>2. 工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xatali.signplatform.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jcraft.jsch.*;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Junpzx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SftpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个目录下最大子文件(夹)数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_CHILD_FILE_NUMBER = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> ChannelSftp sftp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Session sshSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SftpUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 附件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sftpConfig  sftp 配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName    文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SftpException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JSchException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upload</span><span class="params">(SftpConfig sftpConfig, String fileName, InputStream inputStream)</span> <span class="keyword">throws</span> SftpException, JSchException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upload(sftpConfig, <span class="keyword">null</span>, fileName, inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sftpConfig   sftp 配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativePath 文件保存的相对路径(最后一级目录)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName     文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream  文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JSchException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SftpException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upload</span><span class="params">(SftpConfig sftpConfig, String relativePath, String fileName, InputStream inputStream)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> JSchException, SftpException </span>&#123;</span><br><span class="line">        init(sftpConfig);</span><br><span class="line">        createFolder(sftpConfig.getPath());</span><br><span class="line">        String filePath = sftpConfig.getPath();</span><br><span class="line">        <span class="keyword">if</span> (relativePath != <span class="keyword">null</span> &amp;&amp; !relativePath.trim().isEmpty()) &#123;</span><br><span class="line">            filePath = sftpConfig.getPath() + <span class="string">&quot;/&quot;</span> + relativePath;</span><br><span class="line">        &#125;</span><br><span class="line">        filePath = generateValidPath(filePath);</span><br><span class="line">        filePath = filePath + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        sftp.put(inputStream, filePath);</span><br><span class="line">        <span class="keyword">return</span> filePath.substring(sftpConfig.getPath().length() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sftpConfig sftp 配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JSchException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SftpException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] download(SftpConfig sftpConfig, String fileName) <span class="keyword">throws</span> JSchException, SftpException,</span><br><span class="line">            IOException &#123;</span><br><span class="line">        init(sftpConfig);</span><br><span class="line">        InputStream inputStream = sftp.get(sftpConfig.getPath() + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        ByteArrayOutputStream buffer = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((n = inputStream.read(data, <span class="number">0</span>, data.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.write(data, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.flush();</span><br><span class="line">        <span class="keyword">return</span> buffer.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否关闭</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sshSession) || Objects.isNull(sftp)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(sshSession) &amp;&amp; sshSession.isConnected() &amp;&amp; Objects.nonNull(sftp) &amp;&amp; sftp.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sshSession != <span class="keyword">null</span> &amp;&amp; sshSession.isConnected()) &#123;</span><br><span class="line">            sshSession.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sftp != <span class="keyword">null</span> &amp;&amp; sftp.isConnected()) &#123;</span><br><span class="line">            sftp.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JSchException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(SftpConfig sftpConfig)</span> <span class="keyword">throws</span> JSchException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isClosed()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SftpUtil.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isClosed()) &#123;</span><br><span class="line">                    JSch jsch = <span class="keyword">new</span> JSch();</span><br><span class="line">                    jsch.getSession(sftpConfig.getUsername(), sftpConfig.getHost(), sftpConfig.getPort());</span><br><span class="line">                    sshSession = jsch.getSession(sftpConfig.getUsername(), sftpConfig.getHost(), sftpConfig.getPort());</span><br><span class="line">                    sshSession.setPassword(sftpConfig.getPassword());</span><br><span class="line">                    Properties sshConfig = <span class="keyword">new</span> Properties();</span><br><span class="line">                    sshConfig.put(<span class="string">&quot;StrictHostKeyChecking&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">                    sshSession.setConfig(sshConfig);</span><br><span class="line">                    sshSession.connect();</span><br><span class="line">                    Channel channel = sshSession.openChannel(<span class="string">&quot;sftp&quot;</span>);</span><br><span class="line">                    channel.connect();</span><br><span class="line">                    sftp = (ChannelSftp) channel;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 目录路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createFolder</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sftp.mkdir(path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SftpException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计目录下文件(夹)数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countFiles</span><span class="params">(String path)</span> <span class="keyword">throws</span> SftpException </span>&#123;</span><br><span class="line">        sftp.cd(path);</span><br><span class="line">        <span class="keyword">return</span> sftp.ls(path).size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验路径是否可用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validatePathValid</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> countFiles = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countFiles = countFiles(path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SftpException e) &#123;</span><br><span class="line">            createFolder(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (countFiles &lt;= MAX_CHILD_FILE_NUMBER) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成有效路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">generateValidPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (validatePathValid(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String newPath = path + String.valueOf(System.currentTimeMillis()).substring(<span class="number">9</span>);</span><br><span class="line">            createFolder(newPath);</span><br><span class="line">            <span class="keyword">return</span> newPath;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SftpConfig <span class="title">sftpConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SftpUtil().<span class="function">new <span class="title">SftpConfig</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SftpConfig <span class="title">sftpConfig</span><span class="params">(String host, <span class="keyword">int</span> port, String username, String password, String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SftpUtil().n<span class="function">ew <span class="title">SftpConfig</span><span class="params">(host, port, username, password, path)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sftp 配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SftpConfig</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 主机地址</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String host;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * sftp 连接端口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用户名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 密码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 文件保存根路径</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>技术</category>
        <category>sftp</category>
      </categories>
      <tags>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2021/03/02/%E7%B3%BB%E7%BB%9F/1.%20Linux/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="操作系统信息查看"><a href="#操作系统信息查看" class="headerlink" title="操作系统信息查看"></a>操作系统信息查看</h1><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 系统内核</span><br><span class="line">uname -r</span><br><span class="line">-- <span class="number">2.6</span><span class="number">.32</span>-<span class="number">431.</span>el6.x86_64</span><br><span class="line">    </span><br><span class="line"># 系统版本</span><br><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure>


<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p>网址：<a href="https://blog.csdn.net/qq_23329167/article/details/83856430">https://blog.csdn.net/qq_23329167/article/details/83856430</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看ip</span>	</span><br><span class="line">ip addr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动		<span class="built_in">cd</span>.. 返回上一级	<span class="built_in">cd</span> / 返回根目录</span></span><br><span class="line">cd 		</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有文件	ls -la 查看所有包括隐藏文件的信息</span></span><br><span class="line">ls		</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有文件详细信息(包括可对其进行的操作)</span></span><br><span class="line">ll 		</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前路径</span></span><br><span class="line">pwd		</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清屏</span></span><br><span class="line">chear	</span><br></pre></td></tr></table></figure>


<h1 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换用户为root</span></span><br><span class="line">su - root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">userdel -r jack</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件所属用户</span></span><br><span class="line">chown -R user ./document</span><br></pre></td></tr></table></figure>


<h2 id="关于linux系统设置用户为root权限"><a href="#关于linux系统设置用户为root权限" class="headerlink" title="关于linux系统设置用户为root权限"></a>关于linux系统设置用户为root权限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1，首先添加一个普通用户,命令行如下:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一个名为jack的用户</span></span><br><span class="line">adduser jack</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/添加 密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般让输入两次密码，出现下面的字段算成功：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">（passwd: all authentication tokens updated successfully.）</span></span><br><span class="line">passwd jack</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2，赋予普通用户root权限.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.1 将jack用户添加到root用户组</span></span><br><span class="line">usermod -g root jack</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.2修改root用户的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入sudoers文件里</span></span><br><span class="line">vi /etc/sudoers</span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到<span class="string">&quot;## Allows people in group wheel to run all commands&quot;</span>这段话，它的下面是如下字样：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> %wheel ALL=(ALL) ALL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将wheel改成root，退出保存，修改后如下:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> %root ALL=(ALL) ALL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3, 测试是否有root权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 首先切换到jack用户：</span></span><br><span class="line">su - jack</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样就是jack用户登录了，结束符是’′ ， ‘ <span class="string">&#x27;，‘′，‘’表示普通用户，‘#’表示超级用户</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">su</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会让你输入密码，输入密码后如果报一下错误的话</span></span><br><span class="line">“su: Authentication failure”</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这是由于你没有设置进入root下的密码:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo passwd root xxx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入你的密码之后，直接敲‘su’命令,这样就成功了，最后以‘<span class="comment">#’结尾，表示已经进入超级用户模式。</span></span></span><br></pre></td></tr></table></figure>


<h1 id="进程、端口、防火墙"><a href="#进程、端口、防火墙" class="headerlink" title="进程、端口、防火墙"></a>进程、端口、防火墙</h1><h2 id="1-端口操作"><a href="#1-端口操作" class="headerlink" title="1. 端口操作"></a>1. 端口操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一、查看哪些端口被打开</span> </span><br><span class="line">netstat -anp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 二、关闭端口号:</span> </span><br><span class="line">iptables -A INPUT -p tcp --drop 端口号-j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport 端口号-j DROP</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三、打开端口号：</span></span><br><span class="line">iptables -I INPUT -ptcp --dport 端口号 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 四、以下是linux打开端口命令的使用方法。</span></span><br><span class="line">nc -lp 23 &amp;(打开23端口，即telnet)</span><br><span class="line">netstat -an | grep 23 (查看是否打开23端口)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 五、linux打开端口命令每一个打开的端口，都需要有相应的监听程序才可以</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 六、systemctl stop firewalld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 七、打开端口后保存</span></span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在/etc/rc.d/rc.local中加入/sbin/iptables-restore /etc/sysconfig/iptables</span></span><br><span class="line"><span class="meta">#</span><span class="bash">（命令为<span class="comment"># iptables-restore &lt; /etc/sysconfig/iptables）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可解决开放端口重启失效问题</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="2-进程操作"><a href="#2-进程操作" class="headerlink" title="2. 进程操作"></a>2. 进程操作</h2><p>网址：<a href="https://www.pianshen.com/article/7915151415/">https://www.pianshen.com/article/7915151415/</a></p>
<h3 id="1-查看进程（查看开启的服务）"><a href="#1-查看进程（查看开启的服务）" class="headerlink" title="1. 查看进程（查看开启的服务）"></a>1. 查看进程（查看开启的服务）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ps命令用来列出系统中当前运行的那些进程，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ef e 显示环境变量 f 显示程序间的关系，</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> | 则是管道命令 ，grep则是在其中找出所需要的进程。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为tomcat它是一个Java进程，所以查找Java进程也可查找出来。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如 ps -ef | grep java.</span></span><br><span class="line">ps -ef | grep tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前所有tcp端口</span></span><br><span class="line">netstat -ntlp   </span><br></pre></td></tr></table></figure>


<p>其中进程号以及进程名是非常关键的，如2522是tomcat的进程号，tomcat是查找的进程名。</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/0d9a300ea937.png" alt="img"></p>
<h3 id="2-进程销毁"><a href="#2-进程销毁" class="headerlink" title="2. 进程销毁"></a>2. 进程销毁</h3><p><strong>kill 进程号</strong>，如kill 2522 若不能停止，则执行<strong>kill -9 2522</strong>强制通知命令。之后运行ps -ef | grep tomcat命令来查看进程是否已停止。</p>
<h2 id="3-防火墙"><a href="#3-防火墙" class="headerlink" title="3. 防火墙"></a>3. 防火墙</h2><blockquote>
<h3 id="前提：需要使用root账号"><a href="#前提：需要使用root账号" class="headerlink" title="前提：需要使用root账号"></a><strong>前提：需要使用root账号</strong></h3></blockquote>
<h3 id="1-CentOS7之前的防火墙命令操作-（iptables）"><a href="#1-CentOS7之前的防火墙命令操作-（iptables）" class="headerlink" title="1. CentOS7之前的防火墙命令操作 （iptables）"></a>1. CentOS7之前的防火墙命令操作 （iptables）</h3><h4 id="1-查看防火墙状态"><a href="#1-查看防火墙状态" class="headerlink" title="1. 查看防火墙状态"></a>1. 查看防火墙状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure>
<p><img src="Linux%E5%91%BD%E4%BB%A4/122093831886.png" alt="img"></p>
<p>这是防火墙没有关闭的状态</p>
<p>黑色的图片是防火墙关闭的状态</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/122094101724.png" alt="img"></p>
<h4 id="2-永久关闭防火墙"><a href="#2-永久关闭防火墙" class="headerlink" title="2. 永久关闭防火墙"></a>2. 永久关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line"></span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>
<p><img src="Linux%E5%91%BD%E4%BB%A4/122094132137.png" alt="img"></p>
<h3 id="2-CentOS7之后的防火墙命令操作-（firewalld-service）"><a href="#2-CentOS7之后的防火墙命令操作-（firewalld-service）" class="headerlink" title="2. CentOS7之后的防火墙命令操作 （firewalld.service）"></a>2. CentOS7之后的防火墙命令操作 （firewalld.service）</h3><p>CentOS 7.0默认使用的是firewall作为防火墙:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开3306端口：</span></span><br><span class="line">firewall-cmd --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动firewall</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">停止firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">禁止firewall开机启动</span></span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>


<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="1-普通文件操作"><a href="#1-普通文件操作" class="headerlink" title="1. 普通文件操作"></a>1. 普通文件操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件夹</span></span><br><span class="line">mkdir /testlog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归创建文件夹</span></span><br><span class="line">mkdir /usr/local/src/logstash-6.5.4/testlog -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">touch a.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只查看文件</span></span><br><span class="line">less a.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件读取</span></span><br><span class="line">cat a.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件</span></span><br><span class="line">vim a.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全文搜索(在非编辑模式下)</span></span><br><span class="line">/搜索的内容</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入编辑模式</span></span><br><span class="line">i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出编辑模式</span></span><br><span class="line">ESC</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存并退出</span></span><br><span class="line">：wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不保存退出</span></span><br><span class="line">：q！</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 向文件中写入内容，若文件不存在则创建文件</span></span><br><span class="line">echo &quot;context&quot; &gt;&gt; a.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件名称/剪切文件</span></span><br><span class="line">mv aaa bbb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件从aaa复制到bbb</span></span><br><span class="line">cp aaa bbb</span><br></pre></td></tr></table></figure>


<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>详情地址：<a href="https://www.cnblogs.com/pzk7788/p/10433410.html">https://www.cnblogs.com/pzk7788/p/10433410.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件   <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; myid  创建文件myid内容为1</span></span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出一个空白行</span></span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出指定的字符串</span></span><br><span class="line">echo &quot;hello world&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出变量名对应的值</span></span><br><span class="line">echo $HOSTNAME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出字符串到指定文件</span></span><br><span class="line">echo &quot;hello world&quot; &gt; 1.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出命令的执行结果</span></span><br><span class="line">echo `date`                </span><br></pre></td></tr></table></figure>


<h2 id="2-文件权限"><a href="#2-文件权限" class="headerlink" title="2. 文件权限"></a>2. 文件权限</h2><h3 id="1-查看文件权限-ll"><a href="#1-查看文件权限-ll" class="headerlink" title="1. 查看文件权限    ll"></a>1. 查看文件权限    ll</h3><p><code>ll</code></p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/clipboard.png" alt="img"></p>
<p>第一个符号代表文件类型，d是文件夹，l是连接文件，-是普通文件</p>
<p>后面的是权限，r是读取，w是写入，x是执行，3个为1段，第一段代表的是建立这个文件的用户权限，第二段为建立这个文件的用户所属组的权限，第三段为其他用户的权限，哪项为空，对应的用户就没有这个权限.</p>
<h3 id="2-修改文件-文件夹权限-chmod"><a href="#2-修改文件-文件夹权限-chmod" class="headerlink" title="2. 修改文件/文件夹权限    chmod"></a>2. 修改文件/文件夹权限    chmod</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改文件权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 421  421  421 授权时将需要的权限相加，无任何权限时给0</span></span><br><span class="line">chmod 710 java.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 710对应的实际权限</span></span><br><span class="line">- rwx --x ---</span><br></pre></td></tr></table></figure>


<h3 id="3-修改文件-文件夹的所有者-chown"><a href="#3-修改文件-文件夹的所有者-chown" class="headerlink" title="3. 修改文件/文件夹的所有者    chown"></a>3. 修改文件/文件夹的所有者    chown</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改文件所有者</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chown [-R] 所有者[:所属组] 文件或目录</span></span><br><span class="line">chown -R roo aaa.text</span><br></pre></td></tr></table></figure>
<p><img src="Linux%E5%91%BD%E4%BB%A4/image-20210514160449670.png" alt="image-20210514160449670"></p>
<h2 id="3-日志文件"><a href="#3-日志文件" class="headerlink" title="3. 日志文件"></a>3. 日志文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看日志文件</span></span><br><span class="line">tail -f /usr/local/nginx/logs/access.log</span><br></pre></td></tr></table></figure>


<h2 id="4-压缩文件"><a href="#4-压缩文件" class="headerlink" title="4. 压缩文件"></a>4. 压缩文件</h2><p>.tar<br>解包：tar xvf FileName.tar<br>打包：tar cvf FileName.tar DirName<br>（注：tar是打包，不是压缩！）<br>———————————————<br>.gz<br>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName<br>.tar.gz 和 .tgz<br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName<br>———————————————<br>.bz2<br>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName<br>.tar.bz2<br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName<br>———————————————<br>.bz<br>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知<br>.tar.bz<br>解压：tar jxvf FileName.tar.bz<br>压缩：未知<br>———————————————<br>.Z<br>解压：uncompress FileName.Z<br>压缩：compress FileName<br>.tar.Z<br>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName<br>———————————————<br>.zip<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName<br>———————————————<br>.rar<br>解压：rar x FileName.rar<br>压缩：rar a FileName.rar DirName<br>———————————————<br>.lha<br>解压：lha -e FileName.lha<br>压缩：lha -a FileName.lha FileName<br>———————————————<br>.rpm<br>解包：rpm2cpio FileName.rpm | cpio -div<br>———————————————<br>.deb<br>解包：ar p FileName.deb data.tar.gz | tar zxf -<br>———————————————<br>.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea<br>解压：sEx x FileName.*<br>压缩：sEx a FileName.* FileName<br>sEx只是调用相关程序，本身并无压缩、解压功能，请注意！<br>gzip 命令<br>减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。gzip 是在 Linux 系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。<br>语法：gzip [选项] 压缩（解压缩）的文件名该命令的各选项含义如下：<br>-c 将输出写到标准输出上，并保留原有文件。-d 将压缩文件解压。-l 对每个压缩文件，显示下列字段： 压缩文件的大小；未压缩文件的大小；压缩比；未压缩文件的名字-r 递归式地查找指定目录并压缩其中的所有文件或者是解压缩。-t 测试，检查压缩文件是否完整。-v 对每一个压缩和解压的文件，显示文件名和压缩比。-num 用指定的数字 num 调整压缩的速度，-1 或 –fast 表示最快压缩方法（低压缩比），-9 或–best表示最慢压缩方法（高压缩比）。系统缺省值为 6。指令实例：<br>gzip *% 把当前目录下的每个文件压缩成 .gz 文件。gzip -dv *% 把当前目录下每个压缩的文件解压，并列出详细的信息。gzip -l *% 详细显示例1中每个压缩的文件的信息，并不解压。gzip usr.tar% 压缩 tar 备份文件 usr.tar，此时压缩文件的扩展名为.tar.gz。</p>
<h1 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h1><h2 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h2><p><code>make</code></p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p><code>make PREFIX=/usr/local/redis install</code></p>
<blockquote>
<p>这里多了一个关键字 <strong>PREFIX=</strong> 这个关键字的作用是编译的时候用于指定程序存放的路径。比如我们现在就是指定了redis必须存放在/usr/local/redis目录。假设不添加该关键字Linux会将可执行文件存放在/usr/local/bin目录，库文件会存放在/usr/local/lib目录。配置文件会存放在/usr/local/etc目录。其他的资源文件会存放在usr/local/share目录。这里指定号目录也方便后续的卸载，后续直接rm -rf /usr/local/redis 即可删除redis。</p>
</blockquote>
<h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><h2 id="普通用户添加sudo使用权限"><a href="#普通用户添加sudo使用权限" class="headerlink" title="普通用户添加sudo使用权限"></a>普通用户添加sudo使用权限</h2><p>1.切换到root用户下</p>
<p>2.添加sudo文件的写权限,命令是:</p>
<p>chmod u+w /etc/sudoers</p>
<p>3.编辑sudoers文件</p>
<p>vi /etc/sudoers</p>
<p>找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</p>
<p>ps:这里说下你可以sudoers添加下面四行中任意一条</p>
<p>youuser      ALL=(ALL)        ALL</p>
<p>%youuser      ALL=(ALL)        ALL</p>
<p>youuser      ALL=(ALL)        NOPASSWD: ALL</p>
<p>%youuser      ALL=(ALL)        NOPASSWD: ALL</p>
<p>第一行:允许用户youuser执行sudo命令(需要输入密码).</p>
<p>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).</p>
<p>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.</p>
<p>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>
<p>4.撤销sudoers文件写权限,命令:</p>
<p>chmod u-w /etc/sudoers</p>
<p>这样普通用户就可以使用sudo了.</p>
<h1 id="使用命令发送请求"><a href="#使用命令发送请求" class="headerlink" title="使用命令发送请求"></a>使用命令发送请求</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl -X请求方式 url</span></span><br><span class="line">curl -XDELETE url</span><br></pre></td></tr></table></figure>


<h1 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成itheima:123456的密文</span></span><br><span class="line"></span><br><span class="line">echo -n itheima:123456 | openssl dgst -binary -sha1 | openssl base64</span><br></pre></td></tr></table></figure>


<h1 id="JPS"><a href="#JPS" class="headerlink" title="JPS"></a>JPS</h1><p> jps是jdk提供的一个查看当前java进程的小工具， 可以看做是JavaVirtual Machine Process Status Tool的缩写。非常简单实用。</p>
<p>​    命令格式：jps [options ] [ hostid ] </p>
<p>​    [options]选项 ：</p>
<p>-q：仅输出VM标识符，不包括classname,jar name,arguments in main method </p>
<p>-m：输出main method的参数 </p>
<p>-l：输出完全的包名，应用主类名，jar的完全路径名 </p>
<p>-v：输出jvm参数 </p>
<p>-V：输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 </p>
<p>-Joption：传递参数到vm,例如:-J-Xms512m</p>
<p>​    [hostid]：</p>
<p>[protocol:][[//]hostname][:port][/servername]</p>
<p>​    命令的输出格式 ：</p>
<p>lvmid [ [ classname| JARfilename | “Unknown”] [ arg* ] [ jvmarg* ] ]</p>
<p>1）jps</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/830103850281.png" alt="img"></p>
<p>2）jps –l:输出主类或者jar的完全路径名</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/830104140824.png" alt="img"></p>
<p>3）jps –v :输出jvm参数</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/830104154505.png" alt="img"></p>
<p>4）jps –q ：仅仅显示java进程号</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/830104223865.png" alt="img"></p>
<p>5)jps -mlv10.134.68.173</p>
<p><img src="Linux%E5%91%BD%E4%BB%A4/830104019250.png" alt="img"></p>
]]></content>
      <tags>
        <tag>系统-Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装Linux</title>
    <url>/2021/03/03/%E7%B3%BB%E7%BB%9F/1.%20Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux/</url>
    <content><![CDATA[<h2 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h2><a id="more"></a>

<h3 id="Section-packages-does-not-end-with-end"><a href="#Section-packages-does-not-end-with-end" class="headerlink" title="Section packages does not end with %end"></a>Section packages does not end with %end</h3><p>方法1 ： VM极简安装模式会自动生成一个autoinst.iso，自动索引镜像，将这个删掉就好了：</p>
<p>先将这个centos虚拟机系统关机，然后从我的机算机清单中找到这个菜单，左键点击选中这个菜单，然后右键，会看到设置选项，进去就能看到一个CD/DVD(IDE) autoinst.iso，删掉，重新开启centos虚拟机系统，就能正常安装了</p>
<p>方法2 ： 原因为虚拟机找不到镜像文件，设置方法：</p>
<p><img src="image-20210303144902140.png" alt="image-20210303144902140"></p>
<p><img src="image-20210303144932408.png" alt="image-20210303144932408"></p>
<p>找到自身镜像文件位置即可</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>阿里镜像地址</p>
</blockquote>
<p><a href="https://mirrors.aliyun.com/centos/8/isos/x86_64/">https://mirrors.aliyun.com/centos/8/isos/x86_64/</a></p>
<p>选择</p>
<p><img src="image-20210303145132219.png" alt="image-20210303145132219"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>java</title>
    <url>/2021/04/12/java/%E5%90%8E%E7%AB%AF/java/0.%20java/</url>
    <content><![CDATA[<h1 id="aop："><a href="#aop：" class="headerlink" title="aop："></a>aop：</h1><a id="more"></a>

<ol>
<li>在不修改源代码的前提下，对验证等一系列操作进行统一处理</li>
<li>将验证代码与业务代码分隔开，实现解耦</li>
</ol>
<p>// 项目运行完毕后执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.constant.Constants;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.entity.Merchant;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.service.IMerchantService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 权重，执行顺序</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMerchantService merchantService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;System start create merchant&quot;</span>);</span><br><span class="line">        QueryWrapper&lt;Merchant&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(Constants.USER_PHONE_FIELD, Constants.SYSTEM_ADMIN_PHONE);</span><br><span class="line">        Merchant one = merchantService.getOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span> (one == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Merchant merchant = <span class="keyword">new</span> Merchant();</span><br><span class="line">            merchant.setPhone(Constants.SYSTEM_ADMIN_PHONE);</span><br><span class="line">            merchant.setMerchantName(Constants.SYSTEM_ADMIN_NAME);</span><br><span class="line">            merchant.setPassword(passwordEncoder.encode(Constants.SYSTEM_ADMIN_PASSWORD));</span><br><span class="line">            <span class="keyword">boolean</span> save = merchantService.save(merchant);</span><br><span class="line">            <span class="keyword">if</span> (save)</span><br><span class="line">                log.info(<span class="string">&quot;System create merchant success&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                log.error(<span class="string">&quot;System create merchant fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1-format方法"><a href="#1-format方法" class="headerlink" title="1. format方法"></a>1. format方法</h2><p>作用：使用后来传入的参数替换之前字符串中特定的字符</p>
<table>
<thead>
<tr>
<th align="left">转换符</th>
<th align="left">详细说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%s</td>
<td align="left">字符串类型</td>
<td align="left">“喜欢请收藏”</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">字符类型</td>
<td align="left">‘m’</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">布尔类型</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">整数类型（十进制）</td>
<td align="left">88</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">整数类型（十六进制）</td>
<td align="left">FF</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">整数类型（八进制）</td>
<td align="left">77</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点类型</td>
<td align="left">8.888</td>
</tr>
<tr>
<td align="left">%a</td>
<td align="left">十六进制浮点类型</td>
<td align="left">FF.35AE</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">指数类型</td>
<td align="left">9.38e+5</td>
</tr>
<tr>
<td align="left">%g</td>
<td align="left">通用浮点类型（f和e类型中较短的）</td>
<td align="left">不举例(基本用不到)</td>
</tr>
<tr>
<td align="left">%h</td>
<td align="left">散列码</td>
<td align="left">不举例(基本用不到)</td>
</tr>
<tr>
<td align="left">%%</td>
<td align="left">百分比类型</td>
<td align="left">％(%特殊字符%%才能显示%)</td>
</tr>
<tr>
<td align="left">%n</td>
<td align="left">换行符</td>
<td align="left">不举例(基本用不到)</td>
</tr>
<tr>
<td align="left">%tx</td>
<td align="left">日期与时间类型（x代表不同的日期与时间转换符)</td>
<td align="left">不举例(基本用不到)</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="keyword">null</span>;</span><br><span class="line">str=String.format(<span class="string">&quot;Hi,%s&quot;</span>, <span class="string">&quot;小超&quot;</span>);</span><br><span class="line">System.out.println(str);		<span class="comment">// Hi,小超</span></span><br><span class="line">str=String.format(<span class="string">&quot;Hi,%s %s %s&quot;</span>, <span class="string">&quot;小超&quot;</span>,<span class="string">&quot;是个&quot;</span>,<span class="string">&quot;大帅哥&quot;</span>);</span><br><span class="line">System.out.println(str);		<span class="comment">// Hi,小超 是个 大帅哥</span></span><br><span class="line">System.out.printf(<span class="string">&quot;字母c的大写是：%c %n&quot;</span>, <span class="string">&#x27;C&#x27;</span>);	<span class="comment">// 字母c的大写是：C 	</span></span><br><span class="line">System.out.printf(<span class="string">&quot;布尔结果是：%b %n&quot;</span>, <span class="string">&quot;小超&quot;</span>.equals(<span class="string">&quot;帅哥&quot;</span>));	<span class="comment">// 布尔结果是：false </span></span><br><span class="line">System.out.printf(<span class="string">&quot;100的一半是：%d %n&quot;</span>, <span class="number">100</span>/<span class="number">2</span>);	<span class="comment">// 100的一半是：50 </span></span><br><span class="line">System.out.printf(<span class="string">&quot;100的16进制数是：%x %n&quot;</span>, <span class="number">100</span>);	<span class="comment">// 100的16进制数是：64 </span></span><br><span class="line">System.out.printf(<span class="string">&quot;100的8进制数是：%o %n&quot;</span>, <span class="number">100</span>);	<span class="comment">// 100的8进制数是：144</span></span><br><span class="line">System.out.printf(<span class="string">&quot;50元的书打8.5折扣是：%f 元%n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);	<span class="comment">// 50元的书打8.5折扣是：42.500000 元</span></span><br><span class="line">System.out.printf(<span class="string">&quot;上面价格的16进制数是：%a %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);	<span class="comment">// 上面价格的16进制数是：0x1.54p5</span></span><br><span class="line">System.out.printf(<span class="string">&quot;上面价格的指数表示：%e %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);		<span class="comment">// 上面价格的指数表示：4.250000e+01</span></span><br><span class="line">System.out.printf(<span class="string">&quot;上面价格的指数和浮点数结果的长度较短的是：%g %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);	<span class="comment">// 上面价格的指数和浮点数结果的长度较短的是：42.5000</span></span><br><span class="line">System.out.printf(<span class="string">&quot;上面的折扣是%d%% %n&quot;</span>, <span class="number">85</span>);	<span class="comment">// 上面的折扣是85%</span></span><br><span class="line">System.out.printf(<span class="string">&quot;字母A的散列码是：%h %n&quot;</span>, <span class="string">&#x27;A&#x27;</span>);	<span class="comment">//字母A的散列码是：41 </span></span><br></pre></td></tr></table></figure>


<h1 id="native-交给操作系统去执行"><a href="#native-交给操作系统去执行" class="headerlink" title="native 交给操作系统去执行"></a>native 交给操作系统去执行</h1><h2 id="一、认识-native-即-JNI-Java-Native-Interface"><a href="#一、认识-native-即-JNI-Java-Native-Interface" class="headerlink" title="一、认识 native 即 JNI,Java Native Interface"></a>一、认识 native 即 JNI,Java Native Interface</h2><p>凡是一种语言，都希望是纯。比如解决某一个方案都喜欢就单单这个语言来写即可。Java平台有个用户和本地C代码进行互操作的API，称为Java Native Interface (Java本地接口)。</p>
<p>native是与C++联合开发的时候用的！java自己开发不用的！</p>
<h2 id="二、用-Java-调用-C-的“Hello，JNI”"><a href="#二、用-Java-调用-C-的“Hello，JNI”" class="headerlink" title="二、用 Java 调用 C 的“Hello，JNI”"></a>二、用 Java 调用 C 的“Hello，JNI”</h2><p>我们需要按照下班方便的步骤进行：</p>
<p><strong>1、创建一个Java类</strong>，里面包含着一个 native 的方法和加载库的方法 loadLibrary。HelloNative.java 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HelloNative&#96;&#96;&#123;&#96;&#96;  &#96;&#96;static&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;System.loadLibrary(&quot;HelloNative&quot;);&#96;&#96;  &#96;&#96;&#125;&#96;&#96;  &#96; &#96;  &#96;&#96;public static native void sayHello();&#96;&#96;  &#96; &#96;  &#96;&#96;@SuppressWarnings(&quot;static-access&quot;)&#96;&#96;  &#96;&#96;public static void main(String[] args)&#96;&#96;  &#96;&#96;&#123;&#96;&#96;    &#96;&#96;new HelloNative().sayHello();&#96;&#96;  &#96;&#96;&#125;&#96;&#96;&#125;</span><br></pre></td></tr></table></figure>
<p>首先让大家注意的是native方法，那个加载库的到后面也起作用。native 关键字告诉编译器（其实是JVM）调用的是该方法在外部定义，这里指的是C。如果大家直接运行这个代码， JVM会告之：“A Java Exception has occurred.”控制台输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsatisfiedLinkError: no HelloNative in java.library.path&#96;&#96;  &#96;&#96;at java.lang.ClassLoader.loadLibrary(Unknown Source)&#96;&#96;  &#96;&#96;at java.lang.Runtime.loadLibrary0(Unknown Source)&#96;&#96;  &#96;&#96;at java.lang.System.loadLibrary(Unknown Source)&#96;&#96;  &#96;&#96;at HelloNative.&lt;&#96;&#96;clinit&#96;&#96;&gt;(HelloNative.java:5)</span><br></pre></td></tr></table></figure>
<p>这是程序使用它的时候，虚拟机说不知道如何找到sayHello。下面既可以手动写，自然泥瓦匠是用</p>
<p>  <strong>2、运行javah</strong>，得到包含该方法的C声明<strong>头文件.h</strong></p>
<p>将HelloNative.java ，简单地 javac javah，如图</p>
<p>就得到了下面的 <strong>HelloNative.h文件</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;&#96;&#96;#include &lt;&#96;&#96;jni.h&#96;&#96;&gt;&#96;&#96;&#x2F;* Header for class HelloNative *&#x2F;&#96; &#96;#ifndef _Included_HelloNative&#96;&#96;#define _Included_HelloNative&#96;&#96;#ifdef __cplusplus&#96;&#96;extern &quot;C&quot; &#123;&#96;&#96;#endif&#96;&#96;&#x2F;*&#96;&#96; &#96;&#96;* Class:   HelloNative&#96;&#96; &#96;&#96;* Method:  sayHello&#96;&#96; &#96;&#96;* Signature: ()V&#96;&#96; &#96;&#96;*&#x2F;&#96;&#96;JNIEXPORT void JNICALL Java_HelloNative_sayHello&#96;&#96; &#96;&#96;(JNIEnv *, jclass);&#96; &#96;#ifdef __cplusplus&#96;&#96;&#125;&#96;&#96;#endif&#96;&#96;#endif</span><br></pre></td></tr></table></figure>
<p>jni.h 这个文件，在/%JAVA_HOME%include</p>
<p>3、根据头文件，写<strong>C实现本地方法</strong>。</p>
<p>这里我们简单地实现这个sayHello方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;HelloNative.h&quot;&#96;&#96;#include &lt;&#96;&#96;stdio.h&#96;&#96;&gt;&#96; &#96;JNIEXPORT void JNICALL Java_HelloNative_sayHello&#96;&#96;&#123;&#96;&#96;  &#96;&#96;printf(&quot;Hello，JNI&quot;);  &#96;&#96;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4、生成dll共享库</strong>，然后Java程序load库，<strong>调用</strong>即可。</p>
<p>在Windows上，MinGW GCC 运行如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -m64 -Wl,--add-stdcall-alias -I&quot;C:\Program Files\Java\jdk1.7.0_71\include&quot; -I&quot;C:\Program Files\Java\jdk1.7.0_71\include\include\win32&quot; -shared -o HelloNative.dll HelloNative.c</span><br></pre></td></tr></table></figure>
<p>-m64表示生成dll库是64位的。然后运行 <strong>HelloNative：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java HelloNative</span><br></pre></td></tr></table></figure>


<p>终于成功地可以看到控制台打印如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello，JNI</span><br></pre></td></tr></table></figure>


<h2 id="三、JNI-调用-C-流程图"><a href="#三、JNI-调用-C-流程图" class="headerlink" title="三、JNI 调用 C 流程图"></a>三、JNI 调用 C 流程图</h2><p><img src="https://images2015.cnblogs.com/blog/690102/201607/690102-20160725102547356-2054241629.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>泛型</title>
    <url>/2021/04/13/java/%E5%90%8E%E7%AB%AF/java/1.%20%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><a id="more"></a>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong><code>java泛型设计原则</code>：只要在编译时没有出现警告，那么运行时期就不会出现ClassCastException异常.</strong></p>
<p><strong>泛型：把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</strong></p>
<p>参数化类型:</p>
<ul>
<li><strong>把类型当作是参数一样传递</strong></li>
<li><strong><code>&lt;数据类型&gt;</code> 只能是引用类型</strong></li>
</ul>
<p>相关术语：</p>
<ul>
<li><code>ArrayList&lt;E&gt;</code>中的<strong>E称为类型参数变量</strong></li>
<li><code>ArrayList&lt;Integer&gt;</code>中的<strong>Integer称为实际类型参数</strong></li>
<li><strong>整个称为<code>ArrayList&lt;E&gt;</code>泛型类型</strong></li>
<li><strong>整个<code>ArrayList&lt;Integer&gt;</code>称为参数化的类型ParameterizedType</strong></li>
</ul>
<h2 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h2><p><strong>早期Java是使用Object来代表任意类型的，但是向下转型有强转的问题，这样程序就不太安全</strong></p>
<p>首先，我们来试想一下：没有泛型，集合会怎么样</p>
<ul>
<li>Collection、Map集合对元素的类型是没有任何限制的。<strong>本来我的Collection集合装载的是全部的Dog对象，但是外边把Cat对象存储到集合中，是没有任何语法错误的。</strong></li>
<li>把对象扔进集合中，集合是不知道元素的类型是什么的，仅仅知道是Object。因此在get()的时候，返回的是Object。<strong>外边获取该对象，还需要强制转换</strong></li>
</ul>
<p>有了泛型以后：</p>
<ul>
<li>代码更加简洁【不用强制转换】</li>
<li>程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】</li>
<li>可读性和稳定性【在编写集合的时候，就限定了类型】</li>
</ul>
<p>有了泛型后使用增强for遍历集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历,由于明确了类型.我们可以增强for</span></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-泛型类"><a href="#1-泛型类" class="headerlink" title="1. 泛型类"></a>1. 泛型类</h3><p><strong>泛型类就是把泛型定义在类上，用户使用该类的时候，才把类型明确下来</strong>….这样的话，用户明确了什么类型，该类就代表着什么类型…用户在使用的时候就不用担心强转的问题，运行时转换异常的问题了。</p>
<ul>
<li><strong>在类上定义的泛型，在类的方法中也可以使用！</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>若未指定类型则会报警告，但是传入任何类型都可以，编写代码时不会报错，实际运行中可能会出错</p>
<p><img src="image-20210413093830440.png" alt="image-20210413093830440"></p>
<p><img src="image-20210413093918157.png" alt="image-20210413093918157"></p>
<p>正确使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象并指定元素类型为字符串</span></span><br><span class="line">    <span class="comment">// 如果在这个对象中传入其他类型的参数会直接报错，提示让修改类型</span></span><br><span class="line">    ObjectTool&lt;String&gt; stringObjectTool = <span class="keyword">new</span> ObjectTool&lt;&gt;();</span><br><span class="line">    stringObjectTool.setObj(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象并指定元素类型为integer</span></span><br><span class="line">    ObjectTool&lt;Integer&gt; integerObjectTool = <span class="keyword">new</span> ObjectTool&lt;&gt;();</span><br><span class="line">    integerObjectTool.setObj(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-泛型方法"><a href="#2-泛型方法" class="headerlink" title="2. 泛型方法"></a>2. 泛型方法</h3><p>若外界仅仅是关心该方法，不关心类其他的属性，这样的话，我们在整个类上定义泛型，未免就有些大题小作了，此时仅仅需要在某一个方法上使用泛型</p>
<ul>
<li>定义泛型方法….<strong>泛型是先定义后使用的</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    System.out.println(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FunctionTool functionTool = <span class="keyword">new</span> FunctionTool();</span><br><span class="line">    functionTool.show(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">    functionTool.show(<span class="number">123</span>);</span><br><span class="line">    functionTool.show(<span class="number">123.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-泛型类派生出的子类"><a href="#3-泛型类派生出的子类" class="headerlink" title="3. 泛型类派生出的子类"></a>3. 泛型类派生出的子类</h3><p>前面我们已经定义了泛型类，<strong>泛型类是拥有泛型这个特性的类，它本质上还是一个Java类，那么它就可以被继承</strong></p>
<p>那它是怎么被继承的呢？？这里分两种情况</p>
<ol>
<li><strong>子类明确泛型类的类型参数变量</strong></li>
<li><strong>子类不明确泛型类的类型参数变量</strong></li>
</ol>
<h4 id="3-1-子类明确泛型类的类型参数变量"><a href="#3-1-子类明确泛型类的类型参数变量" class="headerlink" title="3.1 子类明确泛型类的类型参数变量"></a>3.1 子类明确泛型类的类型参数变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceTool</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceToolImpl</span> <span class="keyword">implements</span> <span class="title">InterfaceTool</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 正确使用</span></span><br><span class="line">    InterfaceTool&lt;String&gt; interfaceTool = <span class="keyword">new</span> InterfaceToolImpl();</span><br><span class="line">    interfaceTool.show(<span class="number">123</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误：使用时若不声明类型则会警告，此时存入其他类型参数代码不会报错，但是运行会报错</span></span><br><span class="line">    InterfaceTool interfaceTool = <span class="keyword">new</span> InterfaceToolImpl();</span><br><span class="line">    interfaceTool.show(<span class="number">123</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误：若声明的参数类型与实现时声明的参数类型不同，代码会报错</span></span><br><span class="line">    InterfaceTool&lt;Integer&gt; interfaceTool = <span class="keyword">new</span> InterfaceToolImpl();</span><br><span class="line">    interfaceTool.show(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="3-2-子类不明确泛型类的类型参数变量"><a href="#3-2-子类不明确泛型类的类型参数变量" class="headerlink" title="3.2 子类不明确泛型类的类型参数变量"></a>3.2 子类不明确泛型类的类型参数变量</h4><ul>
<li>当子类不明确泛型类的类型参数变量时，<strong>外界使用子类的时候，也需要传递类型参数变量进来，在实现类上需要定义出类型参数变量</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceTool</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">InterfaceTool</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        System.out.println(e.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    InterfaceTool&lt;String&gt; stringInterfaceTool = <span class="keyword">new</span> InterfaceImpl&lt;&gt;();</span><br><span class="line">    stringInterfaceTool.show(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>值得注意的是：</p>
<ul>
<li><strong>实现类的要是重写父类的方法，返回值的类型是要和父类一样的！</strong></li>
<li><strong>类上声明的泛形只对非静态成员有效</strong></li>
</ul>
<h1 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>现在有个需求：<strong>方法接收一个集合参数，遍历集合并把集合元素打印出来，怎么办？</strong></p>
<ul>
<li>方法1：直接接收并循环打印</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方法可行，只不过在编译的时候会出现警告，说没有确定集合元素的类型....这样是不优雅的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soutList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>方法2：声明类型为Object然后进行打印</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soutList2</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做语法是没毛病的，但是这里十分值得注意的是：<strong>该test()方法只能遍历装载着Object的集合！！！</strong></p>
<p>强调：<strong>泛型中的<code>&lt;Object&gt;</code>并不是像以前那样有继承关系的，也就是说<code>List&lt;Object&gt;</code>和<code>List&lt;String&gt;</code>是毫无关系的！！！！</strong></p>
<p>即：此处不传List&lt;Object&gt; 是会报类型错误的</p>
<p><img src="image-20210413104657061.png" alt="image-20210413104657061"></p>
<p>那现在咋办？？？我们是不清楚List集合装载的元素是什么类型的，<code>List&lt;Objcet&gt;</code>这样是行不通的……..<strong>于是Java泛型提供了类型通配符 ?</strong></p>
<ul>
<li>方法3：类型通配符</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soutList3</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;234&quot;</span>);</span><br><span class="line">    soutList3(list);</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(<span class="number">123</span>);</span><br><span class="line">    list2.add(<span class="number">234</span>);</span><br><span class="line">    soutList3(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>?号通配符表示可以匹配任意类型，任意的Java类都可以匹配</strong>…..</p>
<p>现在非常值得注意的是，当我们使用?号通配符的时候：<strong>就只能调对象与类型无关的方法，不能调用对象与类型有关的方法。</strong></p>
<p>记住，<strong>只能调用与对象无关的方法，不能调用对象与类型有关的方法</strong>。因为直到外界使用才知道具体的类型是什么。也就是说，在上面的List集合，我是不能使用add()方法的。<strong>因为add()方法是把对象丢进集合中，而现在我是不知道对象的类型是什么。</strong></p>
<p><img src="image-20210413105518011.png" alt="image-20210413105518011"></p>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="1-设定类型通配符上限"><a href="#1-设定类型通配符上限" class="headerlink" title="1. 设定类型通配符上限"></a>1. 设定类型通配符上限</h3><p>首先，我们来看一下设定通配符上限用在哪里….</p>
<p>现在，我想接收一个List集合，它只能操作数字类型的元素【Float、Integer、Double、Byte等数字类型都行】，怎么做？？？</p>
<p>我们学习了通配符，但是如果直接使用通配符的话，该集合就不是只能操作数字了。因此我们需要<strong>用到设定通配符上限</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Number&gt;</span><br></pre></td></tr></table></figure>


<p>上面的代码表示的是：<strong>List集合装载的元素只能是Number的子类或自身</strong></p>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">soutList4(integerList);</span><br></pre></td></tr></table></figure>


<p>否则：</p>
<p><img src="image-20210413105850696.png" alt="image-20210413105850696"></p>
<h3 id="2-设置通配符下限"><a href="#2-设置通配符下限" class="headerlink" title="2. 设置通配符下限"></a>2. 设置通配符下限</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示传递进来的只能是Integer或Integer的父类</span></span><br><span class="line">List&lt;? <span class="keyword">super</span> Integer&gt;</span><br></pre></td></tr></table></figure>


<p>设定通配符的下限这并不少见，在TreeSet集合中就有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>那它有什么用呢？？我们来想一下，当我们想要创建一个<code>TreeSet&lt;String&gt;</code>类型的变量的时候，并传入一个可以比较String大小的Comparator。</p>
<p>那么这个Comparator的选择就有很多了，<strong>它可以是<code>Comparator&lt;String&gt;</code>，还可以是类型参数是String的父类，比如说<code>Comparator&lt;Objcet&gt;</code></strong>….</p>
<p>这样做，就非常<strong>灵活</strong>了。也就是说，<strong>只要它能够比较字符串大小，就行了</strong></p>
<p>经评论去补充：<strong>在泛型的上限和下限中有一个原则：PECS(Producer Extends Consumer Super)</strong></p>
<p>书上是这样写的：</p>
<p>带有子类限定的可以从泛型读取【也就是—&gt;(? extend T)】——–&gt;Producer Extends<br>带有超类限定的可以从泛型写入【也就是—&gt;(? super T)】——–&gt;Consumer Super<br>也有相关博文写得很好：</p>
<p><a href="http://blog.51cto.com/flyingcat2013/1616068">http://blog.51cto.com/flyingc…</a><br><a href="https://blog.csdn.net/xx326664162/article/details/52175283">https://blog.csdn.net/xx32666…</a></p>
<h1 id="通配符和泛型方法"><a href="#通配符和泛型方法" class="headerlink" title="通配符和泛型方法"></a>通配符和泛型方法</h1><p><strong>大多时候，都可以使用泛型方法来代替通配符</strong>…..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用通配符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用泛型方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span>  <span class="title">test2</span><span class="params">(List&lt;T&gt; t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面这两个方法都是可以的…..那么现在问题来了，我们使用通配符还是使用泛型方法呢？？</p>
<p>原则：</p>
<ul>
<li>如果<strong>参数之间的类型有依赖关系</strong>，或者返<strong>回值是与参数之间有依赖关系</strong>的。那么就使用<strong>泛型方法</strong></li>
<li>如果<strong>没有依赖关系</strong>的，就使用<strong>通配符</strong>，通配符会<strong>灵活一些.</strong></li>
</ul>
<h1 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h1><p>泛型是<strong>提供给javac编译器使用的</strong>，它用于限定集合的输入类型，让编译器在源代码级别上，即挡住向集合中插入非法数据。但编译器编译完带有泛形的java程序后，<strong>生成的class文件中将不再带有泛形信息</strong>，以此使程序运行效率不受到影响，这个过程称之为“擦除”。</p>
<h3 id="3-6-1兼容性"><a href="#3-6-1兼容性" class="headerlink" title="3.6.1兼容性"></a>3.6.1兼容性</h3><p>JDK5提出了泛型这个概念，但是JDK5以前是没有泛型的。也就是泛型是需要兼容JDK5以下的集合的。</p>
<p><strong>当把带有泛型特性的集合赋值给老版本的集合时候，会把泛型给擦除了。</strong></p>
<p>值得注意的是：<strong>它保留的就类型参数的上限。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型被擦除了，保留的是类型的上限，String的上限就是Object</span></span><br><span class="line">List list1 = list;</span><br></pre></td></tr></table></figure>


<p>如果我<strong>把没有类型参数的集合赋值给带有类型参数的集合赋值</strong>，这又会怎么样？？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">List&lt;String&gt; list2 = list;</span><br></pre></td></tr></table></figure>
<p>它也不会报错，仅仅是提示“未经检查的转换”</p>
<h1 id="泛型应用"><a href="#泛型应用" class="headerlink" title="泛型应用"></a>泛型应用</h1><p>当我们写网页的时候，常常会有多个DAO，我们要写每次都要写好几个DAO，这样会有点麻烦。</p>
<p>那么我们想要的效果是什么呢？？只写一个抽象DAO，别的DAO只要继承该抽象DAO，就有对应的方法了。</p>
<p>要实现这样的效果，肯定是要用到泛型的。因为在抽象DAO中，是不可能知道哪一个DAO会继承它自己，所以是不知道其具体的类型的。而泛型就是在创建的时候才指定其具体的类型。</p>
<p>抽象DAO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟hibernate....</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//哪个子类调的这个方法，得到的class就是子类处理的类型（非常重要）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = <span class="keyword">this</span>.getClass();  <span class="comment">//拿到的是子类</span></span><br><span class="line">        ParameterizedType  pt = (ParameterizedType) clazz.getGenericSuperclass();  <span class="comment">//BaseDao&lt;Category&gt;</span></span><br><span class="line">        clazz = (Class) pt.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        session.save(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">find</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) session.get(clazz, id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        session.update(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        T t = (T) session.get(clazz, id);</span><br><span class="line">        session.delete(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>继承抽象DAO，该实现类就有对应的增删改查的方法了。<br>CategoryDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>BookDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Book</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象、接口</title>
    <url>/2021/04/26/java/%E5%90%8E%E7%AB%AF/java/2.%20%E6%8A%BD%E8%B1%A1%E3%80%81%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p><strong>接口的设计目的，是对类的行为进行约束</strong></p>
<a id="more"></a>

<p>（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行为进行限制。对“接口为何是约束”的理解，我觉得配合泛型食用效果更佳。</p>
<p><strong>而抽象类的设计目的，是代码复用</strong>。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执行）。</p>
<p> <strong>抽象类是用来捕捉子类的通用特性的，而接口则是抽象方法的集合；</strong>抽象类不能被实例化，只能被用作子类的超类，是被用来创建继承层级里子类的模板，而接口只是一种形式，接口自身不能做任何事情。</p>
<p> 其次，抽象类可以有默认的方法实现，子类使用extends关键字来继承抽象类，如果子类不是抽象类的话，它需要提供抽象类中所有声明方法的实现。而接口完全是抽象的，它根本不存在方法的实现，子类使用关键字implements来实现接口，它需要提供接口中所有声明方法的实现。</p>
<p> 抽象类可以有构造器，除了不能实例化抽象类之外，它和普通Java类没有任何区别，抽象方法可以有public、protected和default这些修饰符。而接口不能有构造器，是完全不同的类型，接口方法默认修饰符是public，不可以使用其它修饰符。                </p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>抽象、接口</tag>
      </tags>
  </entry>
  <entry>
    <title>java判断</title>
    <url>/2021/05/06/java/%E5%90%8E%E7%AB%AF/java/3.%20java%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="判断字符串是否为数字"><a href="#判断字符串是否为数字" class="headerlink" title="判断字符串是否为数字"></a>判断字符串是否为数字</h1><a id="more"></a>

<h2 id="1-使用Character-isDigit-char"><a href="#1-使用Character-isDigit-char" class="headerlink" title="1. 使用Character.isDigit(char)"></a>1. 使用Character.isDigit(char)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先将字符串转为char数组</span></span><br><span class="line"><span class="keyword">char</span>[] countChars = countStr.toCharArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> countCharsItem : countChars) &#123;</span><br><span class="line">    <span class="comment">// 对每个字符进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (!Character.isDigit(countCharsItem)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>


<h2 id="2-使用类型转换判断"><a href="#2-使用类型转换判断" class="headerlink" title="2. 使用类型转换判断"></a>2. 使用类型转换判断</h2><h2 id="（不推荐，不建议使用try…catch…控制代码流向）"><a href="#（不推荐，不建议使用try…catch…控制代码流向）" class="headerlink" title="（不推荐，不建议使用try…catch…控制代码流向）"></a>（不推荐，不建议使用try…catch…控制代码流向）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Integer.parseInt(countStr);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-使用正则表达式判断"><a href="#3-使用正则表达式判断" class="headerlink" title="3. 使用正则表达式判断"></a>3. 使用正则表达式判断</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> isNum = str.matches(<span class="string">&quot;[0-9]+&quot;</span>);</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>判断</category>
      </categories>
      <tags>
        <tag>判断</tag>
      </tags>
  </entry>
  <entry>
    <title>java语法糖</title>
    <url>/2021/05/07/java/%E5%90%8E%E7%AB%AF/java/4.%20java%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    <content><![CDATA[<h1 id="java-中的-及-labmda表达式"><a href="#java-中的-及-labmda表达式" class="headerlink" title="java 中的 :: 及 labmda表达式"></a>java 中的 :: 及 labmda表达式</h1><p>转载自：</p>
<a id="more"></a>

<p><a href="https://www.zhihu.com/question/302776698/answer/1522159326">https://www.zhihu.com/question/302776698/answer/1522159326</a></p>
<p>Java8 推出了属于Java的lambda表达式，与一众的 =&gt; 不同，Java选择了 -&gt; 做为箭头符号。有没有观众知道为什么这么选择。 lambda表达式的基本格式是这样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">( )-&gt;&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>具体是什么意思呢，这里就要提一下使用lambda表达式的前提了。 </p>
<p><strong>注：list、map、Object均可以调用forEach方法</strong></p>
<hr>
<h2 id="labmda表达式一般用来实现一个函数式接口。"><a href="#labmda表达式一般用来实现一个函数式接口。" class="headerlink" title="labmda表达式一般用来实现一个函数式接口。"></a>labmda表达式一般用来实现一个函数式接口。</h2><p>比如java.lang.Iterable 的 foreach(xxx)方法中的xxx位置需要一个 Consumer 接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 Consumer 正好是一个函数式接口，@FunctionalInterface 注解了解一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候可以这么用  <code>Consumer one = (x) -&gt; &#123; System.out.println(x) &#125;</code> ，这句可以和上面结合起来看，x就是accept中的t，花括号里没有return是因为accept返回值是void。因为 Consumer 接口中只有一个方法，因此不会有冲突的可能。 然后再把 <code>one</code> 传进去forEach就可以了。</p>
<hr>
<h2 id="赋值后，也可以直接调用接口中的方法。相似的，我们也可以自己写一个函数式接口。"><a href="#赋值后，也可以直接调用接口中的方法。相似的，我们也可以自己写一个函数式接口。" class="headerlink" title="赋值后，也可以直接调用接口中的方法。相似的，我们也可以自己写一个函数式接口。"></a>赋值后，也可以直接调用接口中的方法。相似的，我们也可以自己写一个函数式接口。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalSay</span></span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saySomething</span><span class="params">(String something,Person person)</span> </span>&#123;</span><br><span class="line">         person.say(something);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mian</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         Person xiaoMing = (x) -&gt; &#123; System.out.println(x); &#125;;    <span class="comment">//1</span></span><br><span class="line">         <span class="comment">//xiaoMing.say(&quot;hello&quot;);</span></span><br><span class="line">         AnimalSay.saySomething(<span class="string">&quot;hello&quot;</span>, xiaoMing );           <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//AnimalSay.saySomething(&quot;hello&quot;, (x)-&gt;&#123;System.out.println(x)&#125;;);    //3</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以直接把 lambda 表达式直接放在需要的位置。这时候 lambda 就可以自动变成所需类 （上面代码被注掉的部分）。</p>
<p>那么回到最开始也有两种用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">Consumer one = (x) -&gt; &#123; System.out.println(x);&#125;;</span><br><span class="line">Iterable.foreach(one);</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">Iterable.foreach( x-&gt;System.out.println(x) );</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="那么双冒号是什么意思？"><a href="#那么双冒号是什么意思？" class="headerlink" title="那么双冒号是什么意思？"></a>那么双冒号是什么意思？</h2><p>lambda 表达式允许4种方式的双冒号</p>
<p><img src="v2-a930dd31e7ef6c02bb7af15c10e3da1b_hd.jpg" alt="img"></p>
<p><img src="v2-a930dd31e7ef6c02bb7af15c10e3da1b_720w.jpg" alt="img"></p>
<p>其中的 Class 指的是类名，产生于 class Class { }。object 是实例对象，产生于 <code>Class object = new Class();</code>  一个一个的说。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object::instanceMethod&#96;  的一个典型用法就是 &#96;System.out::println</span><br></pre></td></tr></table></figure>
<blockquote>
<p> out继承于FilterOutputStream，可以看成System的一个成员对象，通过它可以调用printstream中的输出方法。  <strong><em>System.out是printStream的实例：\</em></strong> 因为System类当中的out 数据成员是由printStream流创建出来的对象，在system类中为public static final printStream out  而且out又是static的，所以只能够通过system来调用,即为System.out了。System.out说是printStream的实例化对象，意思就是说System类当中的out数据成员即为printStream 类的对象了。System.out 整个就表示屏幕输出了，这时候还只是字节流而已，当调用pringStream的方法println()是就表示用什么用的方式打印输出的关系了。 </p>
</blockquote>
<p>在此请回看 Consumer 类的代码，就明白了为什么 <code>Consumer one = System.out::println</code> 是 <code>Consumer one = t -&gt; System.out.println(t)</code> 的简写</p>
<p>在这里插一个多线程的lambda表达式使用技巧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method 1 start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method 1 execute&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method 1 end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method 2 start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method 2 execute&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method 2 end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一种最简洁的启动方法</span></span><br><span class="line"><span class="comment">//        new Thread( ()-&gt; new SynchronizedTest().method1() ).start();</span></span><br><span class="line">        <span class="comment">//新建实例对象的启动方法</span></span><br><span class="line">        <span class="keyword">final</span> SynchronizedTest test = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(test::method1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread( ()-&gt; test.method1() ).start();</span><br><span class="line">        <span class="comment">//显式的赋值Runnable后再启动</span></span><br><span class="line">        Runnable tt = test::method1;</span><br><span class="line">        <span class="keyword">new</span> Thread(tt).start();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">new</span> Thread(test::method2).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行完后对结果有没有疑问？ 为什么2后面还有1？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>语法糖</tag>
      </tags>
  </entry>
  <entry>
    <title>数组、map和对象</title>
    <url>/2021/05/10/java/%E5%90%8E%E7%AB%AF/java/5.%20%E6%95%B0%E7%BB%84%E3%80%81map%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><a id="more"></a>

<h2 id="快速获取数组"><a href="#快速获取数组" class="headerlink" title="快速获取数组"></a>快速获取数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;? extends Serializable&gt; serializables = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>数组、map和对象</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化</title>
    <url>/2021/05/10/java/%E5%90%8E%E7%AB%AF/java/6.%20%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><a id="more"></a>

<blockquote>
<p>在使用中，我们所有的pojo类都会序列化</p>
</blockquote>
<p>传输未序列化的对象时，会直接报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    Name name = <span class="keyword">new</span> Name(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    <span class="comment">// 存入序列化对象</span></span><br><span class="line">    String s = <span class="keyword">new</span> ObjectMapper().writeValueAsString(name);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name1&quot;</span>, s);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存入未序列化对象</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name2&quot;</span>, name);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name2&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>加密</title>
    <url>/2021/04/08/java/%E5%90%8E%E7%AB%AF/%E5%8A%A0%E5%AF%86/%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">String md5 = DigestUtils.md5DigestAsHex(str);</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>加密</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>后台图片处理</title>
    <url>/2021/04/06/java/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E7%8E%B0/%E5%90%8E%E5%8F%B0%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="BufferedImage"><a href="#BufferedImage" class="headerlink" title="BufferedImage"></a>BufferedImage</h1><a id="more"></a>

<p>Image是一个抽象类，BufferedImage是其实现类，是一个带缓冲区图像类，主要作用是将一幅图片加载到内存中（BufferedImage生成的图片在内存里有一个图像缓冲区，利用这个缓冲区我们可以很方便地操作这个图片），提供获得绘图对象、图像缩放、选择图像平滑度等功能，通常用来做图片大小变换、图片变灰、设置透明不透明等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Graphics <span class="title">getGraphics</span><span class="params">()</span>； <span class="comment">//获得在图像上绘图的Graphics对象</span></span></span><br></pre></td></tr></table></figure>




<p>Java将一幅图片加载到内存的方法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String imgPath = <span class="string">&quot;C://demo.jpg&quot;</span>;  </span><br><span class="line">BufferedImage image = ImageIO.read(<span class="keyword">new</span> FileInputStream(imgPath));</span><br></pre></td></tr></table></figure>


<p>继而可以对图片进行操作,比如，获得图片的宽度：image.getWidth()</p>
<p>图片只有加载到内存中才能进行进一步的处理。</p>
<p>RGB:R（红）G（绿）B（蓝）色彩模式是工业界的一种颜色标准。在Java中每个RGB像素所占的位数为8.</p>
<p>创建：</p>
<ul>
<li><p>直接调用构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定宽高、图像字节灰度</span></span><br><span class="line">BufferedImage bi = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY)</span><br><span class="line"><span class="comment">//创建一个不带透明色的对象</span></span><br><span class="line">BufferedImage bimage = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"><span class="comment">//创建一个带透明色的对象</span></span><br><span class="line"><span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>根据已经存在的BufferedImage对象创建一个copy体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BufferedImage <span class="title">createBufferedImage</span><span class="params">(BufferedImage src)</span></span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>通过创建ColorModel（颜色转换为Java中的像素表示）和Raster（光栅，描述像素的）对象创建BufferedImage对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedImage createBufferedImage（<span class="keyword">int</span> width , <span class="keyword">int</span> height, <span class="keyword">byte</span>[] pixels）&#123; <span class="comment">//pixel像素</span></span><br><span class="line"></span><br><span class="line">ColorModel cm = getColorModel();</span><br><span class="line"></span><br><span class="line">SampleModel sm = getIndexSampleModel((IndexColorModel)cm, width,height);</span><br><span class="line"></span><br><span class="line">DataBuffer db = <span class="keyword">new</span> DataBufferByte(pixels, width*height,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">WritableRaster raster = Raster.creatWritableRaster(sm, db,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">BufferedImage image = <span class="keyword">new</span> BufferedImage (cm, raster,<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>读取一个图片文件来转换.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedImage image = ImageIo.read(<span class="keyword">new</span> FileInputStream(filePath));</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>保存：找个位置写出去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File outputfile  = <span class="keyword">new</span> File(<span class="string">&quot;save.png&quot;</span>);</span><br><span class="line">ImageIO.write(bi,<span class="string">&quot;png&quot;</span>,outputfile);</span><br></pre></td></tr></table></figure>


<p>Raster和ColorModel对象、BufferedImage的创建与保存</p>
<p>ImageIO<br>提供read()和write()静态方法，读写图片，比以往的InputStream读写更方便。<br>BufferedImage与byte数组的转换<br>在传输中，图片是不能直接传的，需要先转为字节数组再传输较为方便；而字节数组再转回BufferedImage则还原图片。</p>
<p>BufferedImage–&gt;byte[]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ImageIO.write(BufferedImage image,String format,OutputStream out);</span><br><span class="line"><span class="comment">//format:图片格式，“gif&quot;等；</span></span><br><span class="line"><span class="comment">//out:目标；特别的，如果目标为byte数组，则将其预设为ByteArrayOutputStream即可传入此方法，</span></span><br><span class="line"><span class="comment">//执行完后，只要toByteArray()即可获得byte[].</span></span><br></pre></td></tr></table></figure>

<p>byte[]–&gt;bufferedImage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteArrayInputStream in = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">byte</span>[]b); <span class="comment">//将b作为输入流；</span></span><br><span class="line">BufferedImage image = ImageIO.read(InputStream in);</span><br><span class="line"><span class="comment">//将in作为输入流，读取图片存入image中，而这里in可以为ByteArrayInputStream();</span></span><br></pre></td></tr></table></figure>


<p>参考文章</p>
<p>应用<br>缓存网络图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得图片地址</span></span><br><span class="line">Url img = <span class="keyword">new</span>  URL(url);</span><br><span class="line"><span class="comment">//获得图片输入流</span></span><br><span class="line">InputStream in = img.openStream();</span><br><span class="line"><span class="comment">//把输入流转为BufferedImage</span></span><br><span class="line">JPEGImageDecoder decoderFile = JPEGCodec.createJPEGDecoder(in);</span><br><span class="line">BufferedImage image = decoderFile.decodeAsBufferedImage();</span><br><span class="line"><span class="comment">//获得其byte数组</span></span><br><span class="line">ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, bos);</span><br><span class="line"><span class="comment">//写出</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> ByteArrayInputStream(os.toByteArray());</span><br></pre></td></tr></table></figure>


<p>具体测试与改动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.google.com/intl/en_ALL/images/logo.gif&quot;</span>);</span><br><span class="line">BufferedImage image = ImageIO.read(url);</span><br><span class="line">ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ImageIO.write(image, <span class="string">&quot;gif&quot;</span>, os);</span><br><span class="line">InputStream is = <span class="keyword">new</span> ByteArrayInputStream(os.toByteArray());</span><br></pre></td></tr></table></figure>


<h1 id="Graphics"><a href="#Graphics" class="headerlink" title="Graphics"></a>Graphics</h1><p>提供基本绘图和显示格式化文字的方法，画图用的坐标系原点在左上角，纵轴向下。主要有画线段、矩形、圆、椭圆、圆弧、多边形等各种颜色的图形、线条。</p>
<p>Graphics2D类提供更强大的绘图能力。</p>
<p>在窗口画一条直线：drawLine(int x1,int y1,int x2,int y2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.drawLine(<span class="number">3</span>,<span class="number">3</span>,<span class="number">50</span>,<span class="number">50</span>);<span class="comment">//在(3,3)与(50,50)之间画一条线段</span></span><br><span class="line">g.drawLine(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//画一个点</span></span><br></pre></td></tr></table></figure>


<p>画折线：drawPolyline(int[],int[],int)，各点的x、y坐标，折线数。</p>
<p>画字符串：drawString(String str,int x,int y)，x、y是开始显示的位置，使用默认字体、大小、黑色。再写下一行要写在什么位置就很难精确定位了。若要精确定位，则需要知道字符串显示的长度和字高，可以通过FontMetrics类来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FontMetrics fm = g.getFontMetrics(font); <span class="comment">//从Graphics对象获取FontMetrics对象</span></span><br><span class="line"><span class="keyword">int</span> height = fm.getHeight(); <span class="comment">//调用其getHeight()获得字高</span></span><br><span class="line"><span class="keyword">int</span> width = fm.stringWidth(s1); <span class="comment">//获得字符串宽度</span></span><br></pre></td></tr></table></figure>


<p>应用FontMetrics精确定位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;Hello, Java World!&quot;</span>;</span><br><span class="line">g.setColor(Color.red);</span><br><span class="line">setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>));</span><br><span class="line">Font font = <span class="keyword">new</span> Font(<span class="string">&quot;Arial&quot;</span>, Font.BOLD, <span class="number">18</span>);</span><br><span class="line">g.setFont(font);</span><br><span class="line">FontMetrics fm = g.getFontMetrics(font);</span><br><span class="line"><span class="keyword">int</span> height = fm.getHeight();</span><br><span class="line"><span class="keyword">int</span> width = fm.stringWidth(s1);</span><br><span class="line"><span class="keyword">int</span> posx =<span class="number">50</span>; <span class="keyword">int</span> posy = <span class="number">50</span>;</span><br><span class="line">g.drawString(s1 ,posx, posy);</span><br><span class="line">g.drawString(<span class="string">&quot;I will come in.&quot;</span> ,posx +width, posy+height);</span><br></pre></td></tr></table></figure>


<p>显示效果</p>
<p>设置画笔字体：setFont(Font font)；Java有一个类叫GraphicsEnvironment提供绘图环境，其中getAvailableFontFamilyNames()方法可获取程序所在操作系统的所有字体名（是String不是Font）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GraphicsEnvironment gv =</span><br><span class="line">  GraphicsEnvironment.getLocalGraphicsEnvironment();</span><br><span class="line">  String[] ftNames = gv.getAvailableFontFamilyNames();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ftNames.length; i++)</span><br><span class="line">      Font ft = <span class="keyword">new</span> Font(ftNames[i], Font.BOLD, <span class="number">14</span>);</span><br></pre></td></tr></table></figure>


<p>设置前景色（画笔颜色）：setColor(Color color)，选择颜色有两种方法，一是直接用颜色值RGB创建Color对象：Color color=new Color(int R,int G,int B),由于是8位，所以不能超过255;二是用颜色常量如Color.red,Color.green等，Color类提供了13中颜色常量。</p>
<p>设置背景色：setBackground(new Color(int,int,int))</p>
<p>来个写不同字体的小例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span> <span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">   String s1 = <span class="string">&quot;This Font is &quot;</span>;</span><br><span class="line">   Font font = <span class="keyword">new</span> Font(<span class="string">&quot;Arial&quot;</span>, Font.BOLD, <span class="number">18</span>);</span><br><span class="line">   g.setColor(Color.red);</span><br><span class="line">    setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>));</span><br><span class="line">   g.setFont(font);</span><br><span class="line">   g.drawString(s1 + font.getName() ,<span class="number">20</span>, <span class="number">60</span>);</span><br><span class="line">   g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;隶书&quot;</span>, Font.BOLD, <span class="number">28</span>));</span><br><span class="line">   g.drawString(<span class="string">&quot;现在是隶书&quot;</span> ,<span class="number">20</span>, <span class="number">120</span>);</span><br><span class="line">   g.setColor(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>显示效果</p>
<p>画矩形：drawRect(int x,int y,int width,int height),画矩形线框，x,y指定了左上角位置，后两个为矩形宽高；fillRect(iny x.int y,int width,int height),指定填充颜色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.drawRect(<span class="number">80</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">25</span>);<span class="comment">//画线框</span></span><br><span class="line">g.setColor(Color.yellow);g.fillRect(<span class="number">20</span>,<span class="number">70</span>,<span class="number">20</span>,<span class="number">30</span>);<span class="comment">//画着色块</span></span><br></pre></td></tr></table></figure>


<p>画圆角矩形：drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight),线框，最后两个宽高是圆角弧的横向直径和纵向直径；fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight),颜色填充。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.drawRoundRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">150</span>,<span class="number">70</span>,<span class="number">40</span>,<span class="number">25</span>);<span class="comment">//画一个圆角矩形</span></span><br><span class="line">g.setColor(Color.blue); g.fillRoundRect(<span class="number">80</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">40</span>);<span class="comment">//涂一个圆角矩形块</span></span><br><span class="line">g.drawRoundRect(<span class="number">10</span>,<span class="number">150</span>,<span class="number">40</span>,<span class="number">40</span>,<span class="number">40</span>,<span class="number">40</span>);<span class="comment">//画圆</span></span><br><span class="line">g.setColor(Color.red); g.fillRoundRect(<span class="number">80</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//画圆块</span></span><br></pre></td></tr></table></figure>


<p>画三维矩形: draw3DRect(int x,int y,int width,int height,boolean raised),画一个突出显示的矩形（即3D矩形），raise是突出与否；fill3DRect(int x,int y,int width,int height,boolean raised)，颜色填充。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.draw3DRect(<span class="number">80</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="keyword">true</span>);<span class="comment">//画一个线框</span></span><br><span class="line">g.setColor(Color.yellow); g.fill3DRect(<span class="number">20</span>,<span class="number">70</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="keyword">true</span>);<span class="comment">//画一个着色块</span></span><br></pre></td></tr></table></figure>


<p>画椭圆：drawOval(int x,int y,int width,int height),x、y是中心坐标，长轴、短轴；fillOval(int x,int y,int width,int height),填充。</p>
<p>画圆弧：drawArc(int x,int y,int width,int height,int startAngle,int arcAngle),画椭圆一部分的圆弧线，椭圆中心时它的外接矩形的中心，外接矩形左上角坐标为(x,y)，宽width，高height，startAngle单位是度，其实角度0度是指3点钟方向，startAngle和arcAngle表示从startAngle角度开始，逆时针方向画arcAngle度的弧，约定，正值度数是逆时针方向，负数为顺时针，例如-90°是6点钟方向；fillArc(int x,int y,int width, int height, int startAngle, int arcAngle)，着色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.drawArc(<span class="number">10</span>,<span class="number">40</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">180</span>);<span class="comment">//画圆弧线</span></span><br><span class="line">g.drawArc(<span class="number">100</span>,<span class="number">40</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">180</span>,<span class="number">180</span>);<span class="comment">//画圆弧线</span></span><br><span class="line">g.setColor(Color.yellow); g.fillArc(<span class="number">10</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">40</span>,<span class="number">0</span>,-<span class="number">270</span>);<span class="comment">//填充缺右上角的四分之三的椭圆</span></span><br><span class="line">g.setColor(Color.green); g.fillArc(<span class="number">60</span>,<span class="number">110</span>,<span class="number">110</span>,<span class="number">60</span>,-<span class="number">90</span>,-<span class="number">270</span>);<span class="comment">//填充缺左下角的四分之三的椭圆</span></span><br></pre></td></tr></table></figure>


<p>画多边形：drawPolygon(int xPoints[],int yPoints[],int nPoints),多边形是多条线段首尾连接而成的封笔平面图，多边形线段端点的x,y坐标存储在两个数组中，画多边形就是按给定的坐标点顺序用直线段将它们连起来，nPoints是坐标点个数；fillPolygon(int xPoints[],int yPoints[],int nPoints)，着色。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> px1[]=&#123;<span class="number">50</span>,<span class="number">90</span>,<span class="number">10</span>,<span class="number">50</span>&#125;;<span class="comment">//首末点相重,才能画多边形</span></span><br><span class="line"><span class="keyword">int</span> py1[]=&#123;<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> px2[]=&#123;<span class="number">140</span>,<span class="number">180</span>,<span class="number">170</span>,<span class="number">180</span>,<span class="number">140</span>,<span class="number">100</span>,<span class="number">110</span>,<span class="number">140</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> py2[]=&#123;<span class="number">5</span>,<span class="number">25</span>,<span class="number">35</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">5</span>&#125;;</span><br><span class="line">g.setColor(Color.blue);</span><br><span class="line">g.fillPolygon(px1,py1,<span class="number">4</span>);</span><br><span class="line">g.setColor(Color.red);</span><br><span class="line">g.drawPolygon(px2,py2,<span class="number">9</span>);</span><br></pre></td></tr></table></figure>


<p>也可以用多边形对象Polygon画多边形</p>
<p>Polygon()：创建多边形对象，暂时没有坐标点。<br>Polygon(int xPoints[],int yPoints[],int nPoints)：用指定的坐标点创建多边形对象。<br>addPoint()：将一个坐标点加入到Polygon对象中。<br>drawPolygon(Polygon p)：绘制多边形。<br>fillPolygon(Polygon p)：和指定的颜色填充多边形。<br>画一个三角形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x[]=&#123;<span class="number">140</span>,<span class="number">180</span>,<span class="number">170</span>,<span class="number">180</span>,<span class="number">140</span>,<span class="number">100</span>,<span class="number">110</span>,<span class="number">100</span>&#125;; <span class="comment">//用多边形对象不要求首末点重合</span></span><br><span class="line"><span class="keyword">int</span> y[]=&#123;<span class="number">5</span>,<span class="number">25</span>,<span class="number">35</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">45</span>,<span class="number">35</span>,<span class="number">25</span>&#125;;</span><br><span class="line">Polygon ponlygon1=<span class="keyword">new</span> Polygon();</span><br><span class="line">polygon1.addPoint(<span class="number">50</span>,<span class="number">10</span>);</span><br><span class="line">polygon1.addPoint(<span class="number">90</span>,<span class="number">50</span>);</span><br><span class="line">polygon1.addPoint(<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line">g.drawPolygon(polygon1);</span><br><span class="line">g.setColor(Color.yellow);</span><br><span class="line">Polygon polygon2 = <span class="keyword">new</span> Polygon(x,y,<span class="number">8</span>);</span><br><span class="line">g.fillPolygon(polygon2);</span><br></pre></td></tr></table></figure>


<p>画图片：drawImage(Image image,int x,int y)</p>
<p>擦除矩形块：clearREct(int x,int y,int width,int height),当需要在一个着色图形中有一个空缺的矩形时，可用背景色填充一矩形块实现，相当于在该图形上使用了橡皮擦。以下代码实现了在一个圆中擦除了一个矩形块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.setColor(Color.blue);</span><br><span class="line">g.fillOval(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>);g.clearRect(<span class="number">70</span>,<span class="number">70</span>,<span class="number">40</span>,<span class="number">55</span>);</span><br></pre></td></tr></table></figure>

<p>限定作图显示区域：clipRect(int x,int y,int width,int height),用一个矩形表示图形的显示区域，超出部分不显示，多个限制区有覆盖时，得到交集区域</p>
<p>  <code>g.clipRect(0,0,100,50);g.clipRect(50,25,100,50);</code></p>
<p>复制图形：copyArea(int x,int y,int width,int height,int dx,int dy),dx和dy表示将图形复制到原位置偏移的像素点数，正值为往右或往下偏移，负值为往左或往上偏移，x、y是要复制矩形区域的左上角坐标。以下代码将一个矩形的部分、另一个矩形的全部分别平移</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g.drawRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">90</span>);</span><br><span class="line">g.fillRect(<span class="number">90</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">90</span>);</span><br><span class="line">g.copyArea(<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,-<span class="number">20</span>,<span class="number">80</span>);</span><br><span class="line">g.copyArea(<span class="number">110</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">60</span>,<span class="number">10</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure>

<p>对Point、Rectangle类的应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Point p = <span class="keyword">new</span> Point(cx / <span class="number">2</span>, cy / <span class="number">2</span>); <span class="comment">//定义一个点</span></span><br><span class="line">Rectangle rect = <span class="keyword">new</span> Rectangle((p.x - <span class="number">40</span>), (p.y - <span class="number">40</span>), <span class="number">80</span>, <span class="number">40</span>); <span class="comment">//定义一个矩形</span></span><br><span class="line"><span class="keyword">int</span>[] xP = &#123;(p.x - <span class="number">40</span>), (p.x + <span class="number">90</span>), p.x+<span class="number">200</span>, (p.x - <span class="number">40</span>)&#125;;</span><br><span class="line"><span class="keyword">int</span>[] yP = &#123;(p.y - <span class="number">40</span>), (p.y +<span class="number">140</span>), (p.y + <span class="number">60</span>), (p.y-<span class="number">40</span>)&#125;;</span><br><span class="line">g.drawArc(rect.x, rect.y, rect.width, rect.height * <span class="number">2</span>, <span class="number">270</span>, <span class="number">90</span>); <span class="comment">//画弧</span></span><br><span class="line">g.drawPolygon(xP, yP,<span class="number">3</span>); <span class="comment">//画多边形</span></span><br><span class="line">g.setColor(Color.red);</span><br></pre></td></tr></table></figure>



<p>画图形方法</p>
<p>代码实例<br>github/image_verifyCode分支/thz-parent/thz-manager-web/WebPageController、thz-common/tool/RandomValidateCodeUtil、RandomValidateCodeUtilTest</p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>后台图片处理</tag>
      </tags>
  </entry>
  <entry>
    <title>后台操作数据表格</title>
    <url>/2021/04/06/java/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E7%8E%B0/%E5%90%8E%E5%8F%B0%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>POI</p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>后台操作数据表格</tag>
      </tags>
  </entry>
  <entry>
    <title>后端进行页面跳转</title>
    <url>/2021/04/07/java/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E7%8E%B0/%E5%90%8E%E7%AB%AF%E8%BF%9B%E8%A1%8C%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><a id="more"></a>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Thymeleaf的主要作用是把model中的数据渲染到html中，因此其语法主要是如何解析model中的数据。从以下方面来学习：</p>
<ul>
<li>变量、方法、条件判断、循环、运算 [ 逻辑运算、布尔运算、比较运算、条件运算 ]</li>
<li>其它</li>
</ul>
<p><code>便于后端页面跳转后带参</code></p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳转方法</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Jackson&quot;</span>);</span><br><span class="line">    user.setFriend(<span class="keyword">new</span> User(<span class="string">&quot;李小龙&quot;</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="comment">// 在model中添加数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    User friend;<span class="comment">// 对象类型属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>前端获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    你好：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>请跟我来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="依赖-–-需要引入模板引擎"><a href="#依赖-–-需要引入模板引擎" class="headerlink" title="依赖 – 需要引入模板引擎"></a>依赖 – 需要引入模板引擎</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个方法可设置多个uri</span></span><br><span class="line">    <span class="comment">// 若配置成功时，ctrl+左键可直接跳转至指定页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    thymeleaf:</span><br><span class="line">        cache: false  # 关闭thymleaf缓存，代码更新后不用重启</span><br></pre></td></tr></table></figure>


<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>后台不能使用@ResponseBody 和 @RestController注解，否则会将页面地址作为字符串返回</p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若要进行页面跳转：原因可能为模板引擎引入错误或返回页面未找到</span></span><br><span class="line"><span class="comment">// 若不需要进行页面跳转：可能原因为需要使用注解@ResponseBody或</span></span><br><span class="line"><span class="comment">// 将@Controller替换为@RestController</span></span><br><span class="line">Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] in context with path [] threw exception [Circular view path [adPlace]: would dispatch back to the current handler URL [/adPlace] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to <span class="keyword">default</span> view name generation.)] with root cause</span><br><span class="line"></span><br><span class="line">javax.servlet.ServletException: Circular view path [adPlace]: would dispatch back to the current handler URL [/adPlace] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to <span class="keyword">default</span> view name generation</span><br><span class="line"></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举</title>
    <url>/2021/04/08/java/%E5%90%8E%E7%AB%AF/%E6%9E%9A%E4%B8%BE/%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h1 id="枚举类使用"><a href="#枚举类使用" class="headerlink" title="枚举类使用"></a>枚举类使用</h1><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">EnumSingle</span> </span>&#123;</span><br><span class="line">    FIRST(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumSingle</span> <span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(EnumSingle.FIRST.getCode());  	<span class="comment">// 1</span></span><br><span class="line">System.out.println(EnumSingle.FIRST.getMsg());  	<span class="comment">// one</span></span><br></pre></td></tr></table></figure>


<h1 id="枚举类反反射"><a href="#枚举类反反射" class="headerlink" title="枚举类反反射"></a>枚举类反反射</h1><h2 id="查看枚举类class文件"><a href="#查看枚举类class文件" class="headerlink" title="查看枚举类class文件"></a>查看枚举类class文件</h2><p><img src="image-20210408143533873.png" alt="image-20210408143533873"></p>
<p>可以看到其中包含一个无参构造函数</p>
<p><img src="image-20210408143628886.png" alt="image-20210408143628886"></p>
<p>使用反射获取枚举中的无参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">declaredConstructor.newInstance();</span><br></pre></td></tr></table></figure>


<p>此时代码报错并非反射源码中的</p>
<p><img src="image-20210408144142560.png" alt="枚举"></p>
<p>而是，未找到指定方法异常</p>
<p>Exception in thread “main” java.lang.NoSuchMethodException: com.demo.demoengin.sign.EnumSingle.<init>()</p>
<p>显然受idea所骗，该枚举类中并没有无参的构造函数</p>
<p>使用jad对源码进行反编译</p>
<p><img src="image-20210408144824407.png" alt="image-20210408144824407"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\home&gt;jad -s.java EnumSingle.class</span><br><span class="line">Parsing EnumSingle.class... Generating EnumSingle.java</span><br></pre></td></tr></table></figure>


<p>打开文件可以看到，其构造函数为一个有参数构造</p>
<p><img src="image-20210408145028080.png" alt="image-20210408145028080"></p>
<p>此时修改代码即可获得预期中的报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">declaredConstructor.newInstance(<span class="string">&quot;&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>


<p><code>java.lang.IllegalArgumentException: Cannot reflectively create enum objects</code></p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>枚举</category>
      </categories>
      <tags>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>注解</title>
    <url>/2021/04/06/java/%E5%90%8E%E7%AB%AF/%E6%B3%A8%E8%A7%A3/%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1-RestController"><a href="#1-RestController" class="headerlink" title="1. @RestController"></a>1. @RestController</h2><p>@RestController = @Controller + @ResponseBody</p>
<h1 id="定时器-Scheduled"><a href="#定时器-Scheduled" class="headerlink" title="定时器 @Scheduled"></a>定时器 @Scheduled</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeparateTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">separateTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="判断当前配置或类是否生效"><a href="#判断当前配置或类是否生效" class="headerlink" title="判断当前配置或类是否生效"></a>判断当前配置或类是否生效</h1><p>@ConditionalOnWebApplication</p>
<p>@ConditionalOnXXX</p>
<p>根据其中条件，来判断当前配置或者类是否生效</p>
<h1 id="函数式编程-FunctionalInterface"><a href="#函数式编程-FunctionalInterface" class="headerlink" title="函数式编程 @FunctionalInterface"></a>函数式编程 @FunctionalInterface</h1><p>1、该注解只能标记在”有且仅有一个抽象方法”的接口上。</p>
<p>2、JDK8接口中的静态方法和默认方法，都不算是抽象方法。</p>
<p>3、接口默认继承java.lang.Object，所以如果接口显示声明覆盖了Object中方法，那么也不算抽象方法。</p>
<p>4、该注解不是必须的，如果一个接口符合”函数式接口”定义，那么加不加该注解都没有影响。加上该注解能够更好地让编译器进行检查。如果编写的不是函数式接口，但是加上了@FunctionInterface，那么编译器会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String aaa)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Test test;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> TestObject(aaa -&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


























]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>注解</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>generator函数</title>
    <url>/2021/02/24/java/%E5%89%8D%E7%AB%AF/%E5%87%BD%E6%95%B0/generator%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h2><ul>
<li>yield是ES6的新关键字，使生成器函数执行暂停，yield关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的return关键字。</li>
<li>yield关键字实际返回一个IteratorResult（迭代器）对象，它有两个属性，value和done，分别代表返回值和是否完成。</li>
<li>yield无法单独工作，需要配合generator(生成器)的其他函数，如next，懒汉式操作，展现强大的主动控制特性。</li>
</ul>
<p>​    <a id="more"></a></p>
<h2 id="generator使用"><a href="#generator使用" class="headerlink" title="generator使用"></a>generator使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; list.length; index++) </span><br><span class="line">        <span class="keyword">yield</span> list[index]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取generator对象</span></span><br><span class="line"><span class="keyword">let</span> gen = generator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行next()方法获取迭代结果和是否完成</span></span><br><span class="line"><span class="comment">// 结果： &#123;value: 1, done: false&#125;</span></span><br><span class="line">gen.next();</span><br></pre></td></tr></table></figure>


<h3 id="懒汉式加载"><a href="#懒汉式加载" class="headerlink" title="懒汉式加载"></a>懒汉式加载</h3><blockquote>
<p> 此处可以看出循环中的打印是在Generator对象调用next方法后产生的，由此可知打印代码为next方法调用后执行</p>
</blockquote>
<p><img src="image-20210224111746190.png" alt="image-20210224111746190"></p>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><blockquote>
<p>只要调用next方法，就会执行一次代码不论是在什么场景下(打印，判断)</p>
</blockquote>
<p><img src="image-20210224112336096.png" alt="image-20210224112336096"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li><p>yield并不能直接生产值，而是产生一个等待输出的函数</p>
</li>
<li><p>除IE外，其他所有浏览器均可兼容（包括win10 的Edge）</p>
</li>
<li><p>某个函数包含了yield，意味着这个函数已经是一个Generator</p>
</li>
<li><p>如果yield在其他表达式中，需要用()单独括起来</p>
</li>
<li><p>yield表达式本身没有返回值，或者说总是返回undefined(由next返回) <code>注</code></p>
</li>
</ul>
<ul>
<li>next()可无限调用，但既定循环完成之后总是返回undeinded</li>
</ul>
<blockquote>
<p>注：当yield在赋值表达式的右边，比如 var result = yield 4，yield语句本身没有返回值，或者说返回值是undefined，但是当我们调用next(param)传参的时候，param不但作为next返回对象的value值，它还作为上一条yield 的返回值，所以result 才会被成功赋值。</p>
</blockquote>
<h2 id="next-函数及参数"><a href="#next-函数及参数" class="headerlink" title="next()函数及参数"></a>next()函数及参数</h2><ol>
<li> 在js中，虽然借鉴了python的函数，但是也进行了自己的改造，由于没有send()函数，所以无法直接传递yield的值。</li>
<li> next()可以带一个参数，该参数会被认为是上一个yield整体的返回值，稍后将在代码中展示。</li>
<li> 在某种程度上，next()可以直接当做send()使用</li>
</ol>
<p><strong>它的意义在于，可以在不同阶段从外部直接向内部注入不同的值来调整函数的行为(这一点是其他循环很难做到的，或要付出较大的代价才可以做到)</strong></p>
<h2 id="目前项目中的可用性"><a href="#目前项目中的可用性" class="headerlink" title="目前项目中的可用性"></a>目前项目中的可用性</h2><p>在前端项目中，用的机会很少，完全可以忽略他的存在，但是在后台项目中，就显得比较重要了，因为其优越的可控性，可是极大的提升线程的效率。</p>
<p>如果需要实例的话，可参考github上的一些python后端项目，调用方式稍有不同，由于js参考的python语言，他们又同为动态语言，所以原理都是相同的，用处也一样。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>前端-函数</tag>
      </tags>
  </entry>
  <entry>
    <title>js高阶函数</title>
    <url>/2021/03/08/java/%E5%89%8D%E7%AB%AF/%E5%87%BD%E6%95%B0/js%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><a id="more"></a>

<p><strong>高阶函数</strong>就是那种输入参数里面有一个或者多个函数，输出也是函数的函数，这个在js里面主要是利用闭包实现的，最简单的就是经常看到的在一个函数内部输出另一个函数</p>
<h2 id="常见的高阶函数"><a href="#常见的高阶函数" class="headerlink" title="常见的高阶函数"></a>常见的高阶函数</h2><h3 id="filter-map-reduce"><a href="#filter-map-reduce" class="headerlink" title="filter/ map/ reduce"></a>filter/ map/ reduce</h3><p>// filter</p>
<p>// 筛选数组中大于2的</p>
<p>let array = [1,2,3]</p>
<p>array.filter(item =&gt; {</p>
<p>return item &gt; 2;</p>
<p>})</p>
<p>得到[3]</p>
<p>// reduce</p>
<p>// 对数组中的内容进行运算，并将(运算结果, 下一项)传到下一轮</p>
<p>let array = [1, 2, 3]</p>
<p>array.reduce((a,b) =&gt; {return a + b})</p>
<p>得到 6</p>
<p>let array = [1, 2, 3]</p>
<p>array.reduce((a,b) =&gt; {return a + b}, 0)</p>
<p>最后面的 0 为初始化的值，即第一轮a为0</p>
<p>// map</p>
<p>// 对数组中的每个元素进行统一处理</p>
<p>let array = [1,2,3]</p>
<p>array.map(item =&gt; {</p>
<p>return item * 2;</p>
<p>})</p>
<p>得到 [2, 4, 6]</p>
<p>// 综合  函数式编程</p>
<p>array.filter(item =&gt; {</p>
<p>return item &gt; 2;</p>
<p>}).map(item =&gt; {</p>
<p>return item * 2;</p>
<p>}).reduce((a,b) =&gt; {</p>
<p>return a + b</p>
<p>}, 0);</p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3>]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>observer观察者</title>
    <url>/2021/02/24/java/%E5%89%8D%E7%AB%AF/%E5%87%BD%E6%95%B0/observer%E8%A7%82%E5%AF%9F%E8%80%85/</url>
    <content><![CDATA[<h2 id="创建观察者监测dom元素的改变"><a href="#创建观察者监测dom元素的改变" class="headerlink" title="创建观察者监测dom元素的改变"></a>创建观察者监测dom元素的改变</h2><p>可监测属性、子节点及节点内容的改变</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建观察者对象</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span> (<span class="params">mutations</span>) </span>&#123;</span><br><span class="line">    mutations.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">mutation</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(mutation)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置观察者选项</span></span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">    attributes: <span class="literal">true</span>,   <span class="comment">//检测属性变动</span></span><br><span class="line">    childList: <span class="literal">true</span>,    <span class="comment">//检测子节点变动</span></span><br><span class="line">    characterData: <span class="literal">true</span> <span class="comment">//节点内容或节点文本的变动。</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入目标节点和观察选项</span></span><br><span class="line">observer.observe(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;addFeeConfigStartTime_div&quot;</span>)[<span class="number">0</span>], config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止监测</span></span><br><span class="line">observer.disconnect();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>前端-函数</tag>
      </tags>
  </entry>
  <entry>
    <title>window、location和history</title>
    <url>/2021/04/01/java/%E5%89%8D%E7%AB%AF/%E5%87%BD%E6%95%B0/window%E3%80%81location%E5%92%8Chistory/</url>
    <content><![CDATA[<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><a id="more"></a>

<p>location和history为window中的对象</p>
<p>使用时可省略window直接使用</p>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>localStorage 和 sessionStorage 属性允许在浏览器中存储 key/value 对的数据。</p>
<p>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除。</p>
<p>localStorage 属性是只读的（但是可以被覆盖）。</p>
<p>可用来记录按钮点击次数</p>
<p><strong>localStorage 的优势</strong></p>
<ul>
<li> 1、localStorage 拓展了 cookie 的 4K 限制。</li>
<li> 2、localStorage 会可以将第一次请求的数据直接存储到本地，这个相当于一个 5M 大小的针对于前端页面的数据库，相比于 cookie 可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的。</li>
</ul>
<p><strong>localStorage 的局限</strong></p>
<ul>
<li> 1、浏览器的大小不统一，并且在 IE8 以上的 IE 版本才支持 localStorage 这个属性。</li>
<li> 2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换。</li>
<li> 3、localStorage在浏览器的隐私模式下面是不可读取的。</li>
<li> 4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡。</li>
<li> 5、localStorage不能被爬虫抓取到。</li>
</ul>
<p>localStorage 与 sessionStorage 的唯一一点区别就是 localStorage 属于永久性存储，而 sessionStorage 属于当会话结束的时候，sessionStorage 中的键值对会被清空。</p>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>


<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lastname = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>


<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="location"><a href="#location" class="headerlink" title="location"></a>location</h1><h2 id="获取url参数"><a href="#获取url参数" class="headerlink" title="获取url参数"></a>获取url参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParam</span> (<span class="params">_key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//返回当前 URL 的查询部分（问号 ? 之后的部分）。</span></span><br><span class="line">    <span class="keyword">let</span> urlParameters = location.search;</span><br><span class="line">    <span class="comment">//如果该求青中有请求的参数，则获取请求的参数，否则打印提示此请求没有请求的参数</span></span><br><span class="line">    <span class="keyword">if</span> (urlParameters.indexOf(<span class="string">&#x27;?&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//获取请求参数的字符串</span></span><br><span class="line">        <span class="keyword">let</span> parameters = <span class="built_in">decodeURI</span>(urlParameters.substr(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//将请求的参数以&amp;分割中字符串数组</span></span><br><span class="line">        parameterArray = parameters.split(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">        <span class="comment">//循环遍历，将请求的参数封装到请求参数的对象之中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; parameterArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_key == parameterArray[i].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> parameterArray[i].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="前端进行页面跳转"><a href="#前端进行页面跳转" class="headerlink" title="前端进行页面跳转"></a>前端进行页面跳转</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br></pre></td></tr></table></figure>


<p>注： 不加协议时，页面跳转只会在uri后拼接网址</p>
<p>如：原网址  <a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=window.localStorage">https://www.baidu.com/s?ie=UTF-8&amp;wd=window.localStorage</a></p>
<p>运行代码    window.location.href = “<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a>;</p>
<p>页面跳转至 <a href="https://www.baidu.com/www.baidu.com">https://www.baidu.com/www.baidu.com</a></p>
<p>可使用该特性做<code>站内跳转</code></p>
<h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1>]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>window、location和history</tag>
      </tags>
  </entry>
  <entry>
    <title>其他函数</title>
    <url>/2021/03/08/java/%E5%89%8D%E7%AB%AF/%E5%87%BD%E6%95%B0/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><a id="more"></a>

<p>let arra = [{name:123},{name:456},{name:789}];</p>
<p>let obj = arra.find(item =&gt; {return item[“name”] == 456})</p>
<p>.</p>
<p>得到{name: 456}</p>
<p>find 返回首个符合标准的</p>
<p>filter返回集合</p>
<p><img src="clipboard.png" alt="img"></p>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>splice  插入和删除</p>
<p>list.splice(开始的下标, 删除几个, 插入的元素)</p>
<h3 id="replace-js替换所有匹配项"><a href="#replace-js替换所有匹配项" class="headerlink" title="replace  js替换所有匹配项"></a>replace  js替换所有匹配项</h3><p>let list = [1,2,3,4]</p>
<p>let json = JSON.stringify(list)</p>
<p>let regex = new RegExp(“,”, “g”)</p>
<p>json.replace(regex,”;”)</p>
<p>或</p>
<p>let list = [1,2,3,4]</p>
<p>let json = JSON.stringify(list)</p>
<p>json.replace(/,/g, “;”)</p>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>前端判断</title>
    <url>/2021/02/23/java/%E5%89%8D%E7%AB%AF/%E5%88%A4%E6%96%AD/%E5%89%8D%E7%AB%AF%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h2 id="对象-Map集合"><a href="#对象-Map集合" class="headerlink" title="对象(Map集合)"></a>对象(Map集合)</h2><h3 id="判断是否为对象的几种方法"><a href="#判断是否为对象的几种方法" class="headerlink" title="判断是否为对象的几种方法"></a>判断是否为对象的几种方法</h3><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toString</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;) === <span class="string">&#x27;[object Object]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断指定参数是否是一个纯粹的对象（所谓&quot;纯粹的对象&quot;，就是该对象是通过&quot;&#123;&#125;&quot;或&quot;new Object&quot;创建的。）</span></span><br><span class="line">$.isPlainObject(obj);</span><br></pre></td></tr></table></figure>


<h3 id="判断对象中是否包含某个key"><a href="#判断对象中是否包含某个key" class="headerlink" title="判断对象中是否包含某个key"></a>判断对象中是否包含某个key</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;123&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty</span></span><br><span class="line">map.hasOwnProperty(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reflect</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(map, <span class="string">&quot;aa&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="数组判断"><a href="#数组判断" class="headerlink" title="数组判断"></a>数组判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象是否为数组</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(list);</span><br></pre></td></tr></table></figure>


<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constructor</span></span><br><span class="line">&#123;&#125;.constructor === <span class="built_in">Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof  根据typeof判断对象也不太准确</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; === <span class="built_in">Object</span></span><br><span class="line"><span class="comment">// 表达式	                      返回值</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>	       <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>	               <span class="string">&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>	               <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>	               <span class="string">&#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;abc&quot;</span>	           <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;	   <span class="string">&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;	               <span class="string">&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> []	               <span class="string">&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>


























]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>判断</category>
      </categories>
      <tags>
        <tag>前端-判断</tag>
      </tags>
  </entry>
  <entry>
    <title>js添加水印</title>
    <url>/2021/03/19/java/%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0/js%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
    <content><![CDATA[<p>js添加水印</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watermark</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//默认设置</span></span><br><span class="line">    <span class="keyword">var</span> defaultSettings=&#123;</span><br><span class="line">        watermark_txt:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">        watermark_x:<span class="number">20</span>,<span class="comment">//水印起始位置x轴坐标</span></span><br><span class="line">        watermark_y:<span class="number">20</span>,<span class="comment">//水印起始位置Y轴坐标</span></span><br><span class="line">        watermark_rows:<span class="number">100</span>,<span class="comment">//水印行数</span></span><br><span class="line">        watermark_cols:<span class="number">20</span>,<span class="comment">//水印列数</span></span><br><span class="line">        watermark_x_space:<span class="number">10</span>,<span class="comment">//水印x轴间隔</span></span><br><span class="line">        watermark_y_space:<span class="number">10</span>,<span class="comment">//水印y轴间隔</span></span><br><span class="line">        watermark_color:<span class="string">&#x27;#aaa&#x27;</span>,<span class="comment">//水印字体颜色</span></span><br><span class="line">        watermark_alpha:<span class="number">0.3</span>,<span class="comment">//水印透明度</span></span><br><span class="line">        watermark_fontsize:<span class="string">&#x27;15px&#x27;</span>,<span class="comment">//水印字体大小</span></span><br><span class="line">        watermark_font:<span class="string">&#x27;微软雅黑&#x27;</span>,<span class="comment">//水印字体</span></span><br><span class="line">        watermark_width:<span class="number">150</span>,<span class="comment">//水印宽度</span></span><br><span class="line">        watermark_height:<span class="number">80</span>,<span class="comment">//水印长度</span></span><br><span class="line">        watermark_angle:<span class="number">15</span><span class="comment">//水印倾斜度数</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//采用配置项替换默认值，作用类似jquery.extend</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">1</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] ===<span class="string">&quot;object&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> src=<span class="built_in">arguments</span>[<span class="number">0</span>]||&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> src)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(src[key]&amp;&amp;defaultSettings[key]&amp;&amp;src[key]===defaultSettings[key])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(src[key])</span><br><span class="line">                defaultSettings[key]=src[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> oTemp = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面最大宽度</span></span><br><span class="line">    <span class="keyword">let</span> page_width = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollWidth,<span class="built_in">document</span>.body.clientWidth);</span><br><span class="line">    <span class="keyword">let</span> cutWidth = page_width*<span class="number">0.0150</span>;</span><br><span class="line">     page_width=page_width-cutWidth;</span><br><span class="line">    <span class="comment">//获取页面最大高度</span></span><br><span class="line">    <span class="keyword">let</span> page_height = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollHeight-<span class="number">80</span>,<span class="built_in">document</span>.body.clientHeight-<span class="number">40</span>);</span><br><span class="line">    <span class="comment">// var page_height = document.body.scrollHeight+document.body.scrollTop;</span></span><br><span class="line">    <span class="comment">//如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔</span></span><br><span class="line">    <span class="keyword">if</span> (defaultSettings.watermark_cols == <span class="number">0</span> || (<span class="built_in">parseInt</span>(defaultSettings.watermark_x + defaultSettings.watermark_width *defaultSettings.watermark_cols + defaultSettings.watermark_x_space * (defaultSettings.watermark_cols - <span class="number">1</span>)) &gt; page_width)) &#123;</span><br><span class="line">        defaultSettings.watermark_cols = <span class="built_in">parseInt</span>((page_width-defaultSettings.watermark_x+defaultSettings.watermark_x_space) / (defaultSettings.watermark_width + defaultSettings.watermark_x_space));</span><br><span class="line">        defaultSettings.watermark_x_space = <span class="built_in">parseInt</span>((page_width - defaultSettings.watermark_x - defaultSettings.watermark_width * defaultSettings.watermark_cols) / (defaultSettings.watermark_cols - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔</span></span><br><span class="line">    <span class="keyword">if</span> (defaultSettings.watermark_rows == <span class="number">0</span> || (<span class="built_in">parseInt</span>(defaultSettings.watermark_y + defaultSettings.watermark_height * defaultSettings.watermark_rows + defaultSettings.watermark_y_space * (defaultSettings.watermark_rows - <span class="number">1</span>)) &gt; page_height)) &#123;</span><br><span class="line">        defaultSettings.watermark_rows = <span class="built_in">parseInt</span>((defaultSettings.watermark_y_space + page_height - defaultSettings.watermark_y) / (defaultSettings.watermark_height + defaultSettings.watermark_y_space));</span><br><span class="line">        defaultSettings.watermark_y_space = <span class="built_in">parseInt</span>(((page_height - defaultSettings.watermark_y) - defaultSettings.watermark_height * defaultSettings.watermark_rows) / (defaultSettings.watermark_rows - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> x;</span><br><span class="line">    <span class="keyword">let</span> y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; defaultSettings.watermark_rows; i++) &#123;</span><br><span class="line">        y = defaultSettings.watermark_y + (defaultSettings.watermark_y_space + defaultSettings.watermark_height) * i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; defaultSettings.watermark_cols; j++) &#123;</span><br><span class="line">            x = defaultSettings.watermark_x + (defaultSettings.watermark_width + defaultSettings.watermark_x_space) * j ;</span><br><span class="line">               <span class="keyword">var</span> mask_div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">               mask_div.id = <span class="string">&#x27;mask_div&#x27;</span> + i + j;</span><br><span class="line">               mask_div.className = <span class="string">&#x27;mask_div&#x27;</span>;</span><br><span class="line">               mask_div.appendChild(<span class="built_in">document</span>.createTextNode(defaultSettings.watermark_txt));</span><br><span class="line">               <span class="comment">//设置水印div倾斜显示</span></span><br><span class="line">               mask_div.style.webkitTransform = <span class="string">&quot;rotate(-&quot;</span> + defaultSettings.watermark_angle + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">               mask_div.style.MozTransform = <span class="string">&quot;rotate(-&quot;</span> + defaultSettings.watermark_angle + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">               mask_div.style.msTransform = <span class="string">&quot;rotate(-&quot;</span> + defaultSettings.watermark_angle + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">               mask_div.style.OTransform = <span class="string">&quot;rotate(-&quot;</span> + defaultSettings.watermark_angle + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">               mask_div.style.transform = <span class="string">&quot;rotate(-&quot;</span> + defaultSettings.watermark_angle + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">               mask_div.style.visibility = <span class="string">&quot;&quot;</span>;</span><br><span class="line">               mask_div.style.position = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">               mask_div.style.left = x + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">               mask_div.style.top = y + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">               mask_div.style.overflow = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">               mask_div.style.zIndex = <span class="string">&quot;9999&quot;</span>;</span><br><span class="line">               mask_div.style.pointerEvents=<span class="string">&#x27;none&#x27;</span>;<span class="comment">//pointer-events:none  让水印不遮挡页面的点击事件</span></span><br><span class="line">               <span class="comment">//mask_div.style.border=&quot;solid #eee 1px&quot;;</span></span><br><span class="line">               mask_div.style.opacity = defaultSettings.watermark_alpha;</span><br><span class="line">               mask_div.style.fontSize = defaultSettings.watermark_fontsize;</span><br><span class="line">               mask_div.style.fontFamily = defaultSettings.watermark_font;</span><br><span class="line">               mask_div.style.color = defaultSettings.watermark_color;</span><br><span class="line">               mask_div.style.textAlign = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">               mask_div.style.width = defaultSettings.watermark_width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">               mask_div.style.height = defaultSettings.watermark_height + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">               mask_div.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">               <span class="comment">//交叉网格显示</span></span><br><span class="line">               <span class="keyword">if</span>((i%<span class="number">2</span>==<span class="number">0</span>)&amp;&amp;(j%<span class="number">2</span>==<span class="number">0</span>))&#123;</span><br><span class="line">                  oTemp.appendChild(mask_div);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>((i%<span class="number">2</span>==<span class="number">1</span>)&amp;&amp;(j%<span class="number">2</span>==<span class="number">1</span>))&#123;</span><br><span class="line">                  oTemp.appendChild(mask_div);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(oTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>水印</tag>
      </tags>
  </entry>
  <entry>
    <title>其他</title>
    <url>/2021/04/14/java/%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<h1 id="修改文件上传input样式"><a href="#修改文件上传input样式" class="headerlink" title="修改文件上传input样式"></a>修改文件上传input样式</h1><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.inputFileDiv</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        height: 40px;</span><br><span class="line">        margin: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#DCDFE6</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#606266</span>;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        left: -20px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        padding: 0 15px;	// 文字开头缩进</span><br><span class="line">        line-height: 40px;	// 文字上下居中</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inputFileInput</span> &#123;</span></span><br><span class="line">        position: absolute;			// *</span><br><span class="line"><span class="css">        <span class="selector-tag">filter</span>: <span class="selector-tag">alpha</span>(<span class="selector-tag">opacity</span><span class="selector-pseudo">:0)</span>;	// * </span></span><br><span class="line">        opacity: 0;					// * 设置input透明度</span><br><span class="line">        top: 0;</span><br><span class="line">        right: 85px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 30px;</span><br><span class="line">        width: 100%;</span><br><span class="line">        left: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inputFileDiv&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;</span><br><span class="line">    	addFileManagementInfo.archivesName ? </span><br><span class="line">    	&quot;已选择文件：&quot; + </span><br><span class="line">    		(</span><br><span class="line">    			addFileManagementInfo.archivesName.length &gt; 35 ? </span><br><span class="line">    			addFileManagementInfo.archivesName.substr(0, 35) + &quot;...&quot; : </span><br><span class="line">    			addFileManagementInfo.archivesName+&quot;.&quot;+addFileManagementInfo.fileType</span><br><span class="line">    		) </span><br><span class="line">    	: </span><br><span class="line">    	&quot;未选择文件&quot;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputFileInput&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;getExcelTemplate($event)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">getExcelTemplate</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 文件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (file.size &gt; <span class="number">800</span> * <span class="number">1024</span>) &#123;</span></span><br><span class="line"><span class="javascript">            vc.toast(<span class="string">&#x27;文件大小不能超过 800KB!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            vc.component.fileCanUpload = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 文件名</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> fileName = file.name;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取base64文件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//新建FileReader对象</span></span></span><br><span class="line"><span class="javascript">        reader.readAsDataURL(file); <span class="comment">//读取为base64</span></span></span><br><span class="line"><span class="javascript">        reader.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">            vc.component.addFileManagementInfo.file = reader.result;</span><br><span class="line"><span class="javascript">            vc.component.fileCanUpload = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="数字转汉字数字"><a href="#数字转汉字数字" class="headerlink" title="数字转汉字数字"></a>数字转汉字数字</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToChinaNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;零&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>, <span class="string">&#x27;七&#x27;</span>, <span class="string">&#x27;八&#x27;</span>, <span class="string">&#x27;九&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;百&#x27;</span>, <span class="string">&#x27;千&#x27;</span>, <span class="string">&#x27;万&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;百&#x27;</span>, <span class="string">&#x27;千&#x27;</span>, <span class="string">&#x27;亿&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;百&#x27;</span>, <span class="string">&#x27;千&#x27;</span>,<span class="string">&#x27;万&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;百&#x27;</span>, <span class="string">&#x27;千&#x27;</span>,<span class="string">&#x27;亿&#x27;</span>);<span class="comment">//可继续追加更高位转换值</span></span><br><span class="line">    <span class="keyword">if</span>(!num || <span class="built_in">isNaN</span>(num))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;零&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> english = num.toString().split(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; english.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> des_i = english.length - <span class="number">1</span> - i;<span class="comment">//倒序排列设值</span></span><br><span class="line">        result = arr2[i] + result;</span><br><span class="line">        <span class="keyword">var</span> arr1_index = english[des_i];</span><br><span class="line">        result = arr1[arr1_index] + result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将【零千、零百】换成【零】 【十零】换成【十】</span></span><br><span class="line">    result = result.replace(<span class="regexp">/零(千|百|十)/g</span>, <span class="string">&#x27;零&#x27;</span>).replace(<span class="regexp">/十零/g</span>, <span class="string">&#x27;十&#x27;</span>);</span><br><span class="line">    <span class="comment">//合并中间多个零为一个零</span></span><br><span class="line">    result = result.replace(<span class="regexp">/零+/g</span>, <span class="string">&#x27;零&#x27;</span>);</span><br><span class="line">    <span class="comment">//将【零亿】换成【亿】【零万】换成【万】</span></span><br><span class="line">    result = result.replace(<span class="regexp">/零亿/g</span>, <span class="string">&#x27;亿&#x27;</span>).replace(<span class="regexp">/零万/g</span>, <span class="string">&#x27;万&#x27;</span>);</span><br><span class="line">    <span class="comment">//将【亿万】换成【亿】</span></span><br><span class="line">    result = result.replace(<span class="regexp">/亿万/g</span>, <span class="string">&#x27;亿&#x27;</span>);</span><br><span class="line">    <span class="comment">//移除末尾的零</span></span><br><span class="line">    result = result.replace(<span class="regexp">/零+$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">//将【零一十】换成【零十】</span></span><br><span class="line">    <span class="comment">//result = result.replace(/零一十/g, &#x27;零十&#x27;);//貌似正规读法是零一十</span></span><br><span class="line">    <span class="comment">//将【一十】换成【十】</span></span><br><span class="line">    result = result.replace(<span class="regexp">/^一十/g</span>, <span class="string">&#x27;十&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>前端-实现</tag>
      </tags>
  </entry>
  <entry>
    <title>前端生成Excel并下载</title>
    <url>/2021/02/23/java/%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90Excel%E5%B9%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="通过将json遍历进行字符串拼接，将字符串输出到csv文件（不推荐）"><a href="#通过将json遍历进行字符串拼接，将字符串输出到csv文件（不推荐）" class="headerlink" title="通过将json遍历进行字符串拼接，将字符串输出到csv文件（不推荐）"></a>通过将json遍历进行字符串拼接，将字符串输出到csv文件（不推荐）</h3><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端生成Excel表格并下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fileName 文件名称(如：费用表)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>titleMap 表头对象 &#123;&quot;userId&quot;:&quot;员工编号&quot;, &quot;userName&quot;:&quot;员工姓名&quot;&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>dataList 数据list [&#123;&quot;userId&quot;:&quot;123&quot;, &quot;userName&quot;:&quot;张三&quot;&#125;, &#123;&quot;userId&quot;:&quot;456&quot;, &quot;userName&quot;:&quot;李四&quot;&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">vc.createExcelByFront = <span class="function"><span class="keyword">function</span> (<span class="params">fileName, titleMap, dataList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(dataList) || <span class="built_in">Object</span>.prototype.toString.call(titleMap) !== <span class="string">&#x27;[object Object]&#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&quot;数据list格式错误&quot;</span>);</span><br><span class="line">    <span class="comment">// 列标题，逗号隔开，每一个逗号就是隔开一个单元格</span></span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> titleMap) &#123;</span><br><span class="line">        title += titleMap[key] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    title += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 增加\t为了不让表格显示科学计数法或者其他格式</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; dataList.length ; i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> titleMap) &#123;</span><br><span class="line">            title += <span class="string">`<span class="subst">$&#123;dataList[i][key] + <span class="string">&#x27;\t&#x27;</span>&#125;</span>,`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        title+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// encodeURIComponent解决中文乱码</span></span><br><span class="line">    <span class="keyword">const</span> uri = <span class="string">&#x27;data:text/csv;charset=utf-8,\ufeff&#x27;</span> + <span class="built_in">encodeURIComponent</span>(title);</span><br><span class="line">    <span class="comment">// 通过创建a标签实现</span></span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    link.href = uri;</span><br><span class="line">    <span class="comment">// 对下载的文件命名</span></span><br><span class="line">    link.download =  fileName ? (fileName + <span class="string">&quot;.xls&quot;</span>) : <span class="string">&quot;下载.xls&quot;</span>;</span><br><span class="line">    link.click();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="将table标签，包括tr、td等对json数据进行拼接，将table输出到表格上实现-不推荐"><a href="#将table标签，包括tr、td等对json数据进行拼接，将table输出到表格上实现-不推荐" class="headerlink" title="将table标签，包括tr、td等对json数据进行拼接，将table输出到表格上实现(不推荐)"></a>将table标签，包括tr、td等对json数据进行拼接，将table输出到表格上实现(不推荐)</h3><p>这种方法的弊端在于输出的是伪excel，虽说生成xls为后缀的文件，但文件形式上还是html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;p style=<span class="string">&quot;font-size: 20px;color: red;&quot;</span>&gt;使用table标签方式将json导出xls文件&lt;/p&gt;</span><br><span class="line">    &lt;button onclick=<span class="string">&#x27;tableToExcel()&#x27;</span>&gt;导出&lt;/button&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;  </span><br><span class="line">    <span class="keyword">const</span> tableToExcel = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 要导出的json数据</span></span><br><span class="line">        <span class="keyword">const</span> jsonData = [</span><br><span class="line">            &#123;</span><br><span class="line">                name:<span class="string">&#x27;路人甲&#x27;</span>,</span><br><span class="line">                phone:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">                email:<span class="string">&#x27;123@123456.com&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name:<span class="string">&#x27;炮灰乙&#x27;</span>,</span><br><span class="line">                phone:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">                email:<span class="string">&#x27;123@123456.com&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name:<span class="string">&#x27;土匪丙&#x27;</span>,</span><br><span class="line">                phone:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">                email:<span class="string">&#x27;123@123456.com&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name:<span class="string">&#x27;流氓丁&#x27;</span>,</span><br><span class="line">                phone:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">                email:<span class="string">&#x27;123@123456.com&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">// 列标题</span></span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;电话&lt;/td&gt;&lt;td&gt;邮箱&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 循环遍历，每行加入tr标签，每个单元格加td标签</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; jsonData.length ; i++ )&#123;</span><br><span class="line">            str+=<span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> jsonData[i])&#123;</span><br><span class="line">                <span class="comment">// 增加\t为了不让表格显示科学计数法或者其他格式</span></span><br><span class="line">                str+=<span class="string">`&lt;td&gt;<span class="subst">$&#123; jsonData[i][key] + <span class="string">&#x27;\t&#x27;</span>&#125;</span>&lt;/td&gt;`</span>;     </span><br><span class="line">            &#125;</span><br><span class="line">            str+=<span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Worksheet名</span></span><br><span class="line">        <span class="keyword">const</span> worksheet = <span class="string">&#x27;Sheet1&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> uri = <span class="string">&#x27;data:application/vnd.ms-excel;base64,&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 下载的表格模板数据</span></span><br><span class="line">        <span class="keyword">const</span> template = <span class="string">`&lt;html xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; </span></span><br><span class="line"><span class="string">        xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot; </span></span><br><span class="line"><span class="string">        xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;&lt;x:ExcelWorkbook&gt;&lt;x:ExcelWorksheets&gt;&lt;x:ExcelWorksheet&gt;</span></span><br><span class="line"><span class="string">		&lt;!-- 解决乱码问题 --&gt;</span></span><br><span class="line"><span class="string">		&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;x:Name&gt;<span class="subst">$&#123;worksheet&#125;</span>&lt;/x:Name&gt;</span></span><br><span class="line"><span class="string">        &lt;x:WorksheetOptions&gt;&lt;x:DisplayGridlines/&gt;&lt;/x:WorksheetOptions&gt;&lt;/x:ExcelWorksheet&gt;</span></span><br><span class="line"><span class="string">        &lt;/x:ExcelWorksheets&gt;&lt;/x:ExcelWorkbook&gt;&lt;/xml&gt;&lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;&lt;body&gt;&lt;table&gt;<span class="subst">$&#123;str&#125;</span>&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;`</span>;</span><br><span class="line">        <span class="comment">// 下载模板</span></span><br><span class="line">        <span class="built_in">window</span>.location.href = uri + base64(template);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 输出base64编码</span></span><br><span class="line">    <span class="keyword">const</span> base64 = <span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(s)));</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<h3 id="通过blob-推荐"><a href="#通过blob-推荐" class="headerlink" title="通过blob (推荐)"></a>通过blob (推荐)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端生成Excel表格并下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fileName 文件名称(如：费用表)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>dataList 数据及表头list [[&quot;员工编号&quot;, &quot;员工姓名&quot;], [123, &quot;张三&quot;], [456, &quot;李四&quot;]]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">vc.createExcelByFrontNew = <span class="function"><span class="keyword">function</span> (<span class="params">fileName, dataList</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// csv转sheet对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">csv2sheet</span>(<span class="params">csv</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sheet = &#123;&#125;; <span class="comment">// 将要生成的sheet</span></span><br><span class="line">        csv = csv.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        csv.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">row, i</span>) </span>&#123;</span><br><span class="line">            row = row.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) sheet[<span class="string">&#x27;!ref&#x27;</span>] = <span class="string">&#x27;A1:&#x27;</span>+<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+row.length-<span class="number">1</span>)+(csv.length-<span class="number">1</span>);</span><br><span class="line">            row.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">col, j</span>) </span>&#123;</span><br><span class="line">                sheet[<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+j)+(i+<span class="number">1</span>)] = &#123;<span class="attr">v</span>: col&#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> sheet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将一个sheet转成最终的excel文件的blob对象，然后利用URL.createObjectURL下载</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sheet2blob</span>(<span class="params">sheet, sheetName</span>) </span>&#123;</span><br><span class="line">        sheetName = sheetName || <span class="string">&#x27;sheet1&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> workbook = &#123;</span><br><span class="line">            SheetNames: [sheetName],</span><br><span class="line">            Sheets: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        workbook.Sheets[sheetName] = sheet;</span><br><span class="line">        <span class="comment">// 生成excel的配置项</span></span><br><span class="line">        <span class="keyword">let</span> wopts = &#123;</span><br><span class="line">            bookType: <span class="string">&#x27;xlsx&#x27;</span>, <span class="comment">// 要生成的文件类型</span></span><br><span class="line">            bookSST: <span class="literal">false</span>, <span class="comment">// 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性</span></span><br><span class="line">            type: <span class="string">&#x27;binary&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> wbout = XLSX.write(workbook, wopts);</span><br><span class="line">        <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([s2ab(wbout)], &#123;<span class="attr">type</span>:<span class="string">&quot;application/octet-stream&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">// 字符串转ArrayBuffer</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</span><br><span class="line">            <span class="keyword">let</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i!=s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> blob;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的打开下载对话框方法，没有测试过具体兼容性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>url 下载地址，也可以是一个blob对象，必选</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>saveName 保存文件名，可选</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openDownloadDialog</span>(<span class="params">url, saveName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> url == <span class="string">&#x27;object&#x27;</span> &amp;&amp; url <span class="keyword">instanceof</span> Blob) &#123;</span><br><span class="line">            url = URL.createObjectURL(url); <span class="comment">// 创建blob地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        aLink.href = url;</span><br><span class="line">        aLink.download = saveName || <span class="string">&#x27;&#x27;</span>; <span class="comment">// HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效</span></span><br><span class="line">        <span class="keyword">let</span> event;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.MouseEvent)</span><br><span class="line">            event = <span class="keyword">new</span> MouseEvent(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            event = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;MouseEvents&#x27;</span>);</span><br><span class="line">            event.initMouseEvent(<span class="string">&#x27;click&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="built_in">window</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        aLink.dispatchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入csv，执行后弹出下载框</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span>(<span class="params">csv</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sheet = csv2sheet(csv);</span><br><span class="line">        <span class="keyword">let</span> blob = sheet2blob(sheet);</span><br><span class="line">        openDownloadDialog(blob, <span class="string">&#x27;导出.xlsx&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let aoa = [</span></span><br><span class="line">    <span class="comment">//     [&#x27;姓名&#x27;, &#x27;性别&#x27;, &#x27;年龄&#x27;, &#x27;注册时间&#x27;],</span></span><br><span class="line">    <span class="comment">//     [&#x27;张三&#x27;, &#x27;男&#x27;, 18, new Date()],</span></span><br><span class="line">    <span class="comment">//     [&#x27;李四&#x27;, &#x27;女&#x27;, 22, new Date()]</span></span><br><span class="line">    <span class="comment">// ];</span></span><br><span class="line">    <span class="keyword">let</span> sheet = XLSX.utils.aoa_to_sheet(dataList);</span><br><span class="line">    openDownloadDialog(sheet2blob(sheet), fileName ? (fileName + <span class="string">&quot;.xlsx&quot;</span>) : <span class="string">&#x27;导出.xlsx&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>前端-实现</tag>
      </tags>
  </entry>
  <entry>
    <title>js小数精度问题</title>
    <url>/2021/03/08/java/%E5%89%8D%E7%AB%AF/%E5%BA%95%E5%B1%82/js%E5%B0%8F%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="javascript表示小数的方法"><a href="#javascript表示小数的方法" class="headerlink" title="javascript表示小数的方法"></a>javascript表示小数的方法</h2><a id="more"></a>

<blockquote>
<h3 id="IEEE754标准表示方法："><a href="#IEEE754标准表示方法：" class="headerlink" title="IEEE754标准表示方法："></a>IEEE754标准表示方法：</h3></blockquote>
<p>​    单精度</p>
<p>​    双精度(64位)</p>
<p>​    延伸单精度</p>
<p>​    延伸双精度</p>
<p>​    <code>javascript 采用的是IEEE754的 双精度(64位)</code></p>
<p>​    64位意思为由0或1组成这64位</p>
<p>​    IEEE754将这64位分为三个部分</p>
<p><img src="image-20210308142017517.png" alt="image-20210308142017517"></p>
<p>​    </p>
<p>​    <code>科学计数法：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">666</span> 可表示为 <span class="number">6.66</span> * <span class="number">10</span>^<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">666000</span> 可表示为 <span class="number">6.66</span> * <span class="number">10</span>^<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>​    当数字越大的时候使用科学计数法可以节省更多的空间和时间，计算机也采用这种方式</p>
<p>​    使用计算机的科学计数法来表示24时，可以表示为：</p>
<p><img src="image-20210308142504637.png" alt="image-20210308142504637"></p>
<p>​    再结合IEEE754双精度（64位）</p>
<p><img src="image-20210308142838551.png" alt="image-20210308142838551"></p>
<p>​    </p>
<blockquote>
<h3 id="使用计算机的科学计数法表示小数"><a href="#使用计算机的科学计数法表示小数" class="headerlink" title="使用计算机的科学计数法表示小数"></a>使用计算机的科学计数法表示小数</h3><p><code>十进制转为二进制采用乘2取整法</code></p>
</blockquote>
<p><code>十进制  0.125</code></p>
<p>0.125 * 2 = <code>0</code>.25 整数部分为0</p>
<p>0.25 * 2 = <code>0</code>.5 整数部分为0</p>
<p>0.5 * 2 = <code>1</code> 整数部分为1</p>
<p><code>转化为二进制为 0.001</code></p>
<blockquote>
<h3 id="为什么JavaScript中0-1-0-2-不等于0-3"><a href="#为什么JavaScript中0-1-0-2-不等于0-3" class="headerlink" title="为什么JavaScript中0.1 + 0.2 不等于0.3"></a><code>为什么JavaScript中0.1 + 0.2 不等于0.3</code></h3></blockquote>
<p>十进制  0.1</p>
<p>0.1 * 2 = <code>0</code>.2 整数部分为0</p>
<p>0.2 * 2 = <code>0</code>.4 整数部分为0</p>
<p>0.8 * 2 = <code>1</code>.6 整数部分为1</p>
<p>0.6 * 2 = <code>1</code>.2 整数部分为1</p>
<p>0.2 * 2 = <code>0</code>.4 整数部分为0</p>
<p>……</p>
<p>转化为二进制为 0.0001100110（无限循环）</p>
<p><code>0.1 使用计算机科学计数法表示为 1.10011 * 2^-4</code></p>
<p>十进制  0.2</p>
<p>0.2 * 2 = <code>0</code>.4 整数部分为0</p>
<p>0.4 * 2 = <code>0</code>.8 整数部分为0</p>
<p>0.8 * 2 = <code>1</code>.6 整数部分为1</p>
<p>0.6 * 2 = <code>1</code>.2 整数部分为1</p>
<p>0.2 * 2 = <code>0</code>.4 整数部分为0</p>
<p>0.4 * 2 = <code>0</code>.8 整数部分为0</p>
<p>……</p>
<p>转化为二进制为 0.001100110（无限循环）</p>
<p><code>0.2 使用计算机科学计数法表示为 1.10011 * 2^-3</code></p>
<p><strong>即0.1与0.2使用计算机科学计数法表示时都是无限长的</strong></p>
<p><strong>而使用IEEE754的双精度(64位)来表示数字的话肯定会出现后续位置无法存储进去，因为指数位只有11位，有效数只有52位，有效位肯定无法存储这个无限长度的二进制数，这样就迫使计算机取一个近似的数字</strong></p>
<p><code>**因此0.1 + 0.2之后在转化为十进制时就已经不是纯正的0.3了**</code></p>
<blockquote>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3></blockquote>
<p>4前出现时会与3之间相隔很多个0</p>
<p><img src="image-20210308145541542.png" alt="image-20210308145541542"></p>
<p>因此可以使用四舍五入法</p>
<p>首先使用toFixed保留几位小数，然后使用parentFloat将其转化为小数</p>
<p><img src="image-20210308152532758.png" alt="image-20210308152532758"></p>
<p><img src="image-20210308152740791.png" alt="image-20210308152740791"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>底层</category>
      </categories>
      <tags>
        <tag>小数</tag>
      </tags>
  </entry>
  <entry>
    <title>前端问题</title>
    <url>/2021/03/04/java/%E5%89%8D%E7%AB%AF/%E6%8A%A5%E9%94%99/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>-</p>
<a id="more"></a>

<h2 id="前端页面跳转与异步"><a href="#前端页面跳转与异步" class="headerlink" title="前端页面跳转与异步"></a>前端页面跳转与异步</h2><p>当发送一个异步请求后，若该请求尚未返回就进行页面跳转，此时即使请求返回也不会执行then中的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;localhost:8080/travle/news/list&quot;</span>,</span><br><span class="line">    data: &#123; <span class="attr">page</span>: $(<span class="string">&quot;#page&quot;</span>).val(), <span class="attr">limit</span>: <span class="number">5</span> &#125;,</span><br><span class="line">    dataType: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  若页面跳转将不会进入then方法中</span></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">window</span>.location.href = url;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>问题</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2021/04/02/java/%E5%89%8D%E7%AB%AF/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h1><h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><a id="more"></a>

<p>获取数组遍历对象，类似java的Iterator</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].keys();</span><br></pre></td></tr></table></figure>


<p>获取长度为100的空数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">&#123;<span class="attr">length</span>:<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>


<p>快速获得0-99的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line">[...new <span class="built_in">Array</span>(<span class="number">100</span>).keys()]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">Array</span>(<span class="number">100</span>), <span class="function">(<span class="params">v,k</span>) =&gt;</span>k);</span><br></pre></td></tr></table></figure>


<p>获得对应数组的索引</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> indexList = [...list.keys()];</span><br></pre></td></tr></table></figure>


<p>两个数组组合生成新的数组concat</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.concat([<span class="number">4</span>,<span class="number">5</span>], <span class="number">6</span>)</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>数组对象</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>图片</title>
    <url>/2021/03/08/java/%E5%89%8D%E7%AB%AF/%E6%96%87%E4%BB%B6/%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h2><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载成功</span></span><br><span class="line">img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;图片加载成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载失败</span></span><br><span class="line">img.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&quot;图片加载失败&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="图片转base64"><a href="#图片转base64" class="headerlink" title="图片转base64"></a>图片转base64</h2><p>将图片链接直接转成base64位编码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64Image</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    canvas.width = img.width;</span><br><span class="line">    canvas.height = img.height;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</span><br><span class="line">    <span class="keyword">let</span> ext = img.src.substring(img.src.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">let</span> dataURL = canvas.toDataURL(<span class="string">&quot;image/&quot;</span>+ext);</span><br><span class="line">    <span class="keyword">return</span> dataURL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> imgLink = <span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fa3.att.hudong.com%2F35%2F34%2F19300001295750130986345801104.jpg&amp;refer=http%3A%2F%2Fa3.att.hudong.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1618557160&amp;t=55fd99168b1618ede7a554b27cdb3fd3&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tempImage = <span class="keyword">new</span> Image();</span><br><span class="line">tempImage.src = imgLink;</span><br><span class="line">tempImage.crossOrigin = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">tempImage.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> base64 = getBase64Image(tempImage);</span><br><span class="line">    <span class="built_in">console</span>.log(base64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>image.crossOrigin = &quot;*&quot;</code>是防止跨域请求时报错<code>Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39;</code></p>
<h2 id="文件转base64"><a href="#文件转base64" class="headerlink" title="文件转base64"></a>文件转base64</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getExcelTemplate (e) &#123;</span><br><span class="line">    <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    vc.component.addFileManagementInfo.fileType = file.type;</span><br><span class="line">    vc.component.addFileManagementInfo.archivesName = file.name;</span><br><span class="line">    <span class="comment">// 获取目前上传的文件</span></span><br><span class="line">    <span class="keyword">if</span> (file.size &gt; <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">        vc.toast(<span class="string">&#x27;图片大小不能超过 700KB!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//新建FileReader对象</span></span><br><span class="line">    reader.readAsDataURL(file); <span class="comment">//读取为base64</span></span><br><span class="line">    reader.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> fileText = e.target.result.split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">// base64文件</span></span><br><span class="line">        vc.component.addFileManagementInfo.file = reader.result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


<h2 id="base64转blob-blob转file"><a href="#base64转blob-blob转file" class="headerlink" title="base64转blob  blob转file"></a>base64转blob  blob转file</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base64转blob</span></span><br><span class="line"><span class="keyword">const</span> base64ToBlob = <span class="function"><span class="keyword">function</span>(<span class="params">base64Data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = base64Data.split(<span class="string">&#x27;,&#x27;</span>),</span><br><span class="line">        fileType = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">        bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">        l = bstr.length,</span><br><span class="line">        u8Arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(l);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l--) &#123;</span><br><span class="line">        u8Arr[l] = bstr.charCodeAt(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8Arr], &#123;</span><br><span class="line">        type: fileType</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// blob转file</span></span><br><span class="line"><span class="keyword">const</span> blobToFile = <span class="function"><span class="keyword">function</span>(<span class="params">newBlob, fileName</span>) </span>&#123;</span><br><span class="line">    newBlob.lastModifiedDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    newBlob.name = fileName;</span><br><span class="line">    <span class="keyword">return</span> newBlob;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> blob = base64ToBlob(fileText[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">const</span> file = blobToFile(blob, <span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="blob转base64"><a href="#blob转base64" class="headerlink" title="blob转base64"></a>blob转base64</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">blobToBase64</span>(<span class="params">blob</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        fileReader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(e.target.result);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// readAsDataURL</span></span><br><span class="line">        fileReader.readAsDataURL(blob);</span><br><span class="line">        fileReader.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;文件流异常&#x27;</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xhrequest</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">//前两个参数固定，第三个参数true时是异步，false时是同步</span></span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//选定输出格式为blob格式</span></span><br><span class="line">    xhr.responseType = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">    <span class="comment">//onload后回调this本身  onload本身不携带参数</span></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//关闭xhr  一定要加</span></span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="通过url下载文件"><a href="#通过url下载文件" class="headerlink" title="通过url下载文件"></a>通过url下载文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url, filename</span>) </span>&#123;</span><br><span class="line">    getBlob(url, <span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">        saveAs(blob, filename);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">url, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.responseType = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            cb(xhr.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAs</span>(<span class="params">blob, filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">        navigator.msSaveBlob(blob, filename);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">        link.href = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">        link.download = filename;</span><br><span class="line">        <span class="comment">// fix Firefox</span></span><br><span class="line">        link.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        body.appendChild(link);</span><br><span class="line">        link.click();</span><br><span class="line">        body.removeChild(link);</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(link.href);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = location.origin + <span class="string">`/callComponent/download/getFile/fileByObjId?objId=<span class="subst">$&#123;row.memberId&#125;</span>&amp;fileTypeCd=40000&amp;communityId=<span class="subst">$&#123;row.communityId&#125;</span>&amp;time=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>;</span><br><span class="line">download(url, <span class="string">&quot;文件名.txt&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>文件</category>
      </categories>
      <tags>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>前端样式</title>
    <url>/2021/03/01/java/%E5%89%8D%E7%AB%AF/%E6%A0%B7%E5%BC%8F/%E5%89%8D%E7%AB%AF%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Jquery修改样式"><a href="#Jquery修改样式" class="headerlink" title="Jquery修改样式"></a>Jquery修改样式</h1><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.addInspectionListPoint&quot;</span>).css(&#123;</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;relative&quot;</span>,</span><br><span class="line">    <span class="string">&quot;display&quot;</span>: <span class="string">&quot;inline-block&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;#D0EEFF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border&quot;</span>: <span class="string">&quot;1px solid #99D3F5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-radius&quot;</span>: <span class="string">&quot;4px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;4px 12px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflow&quot;</span>: <span class="string">&quot;hidden&quot;</span>,</span><br><span class="line">    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#1E88C7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-decoration&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-indent&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;line-height&quot;</span>: <span class="string">&quot;20px&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="遮罩层"><a href="#遮罩层" class="headerlink" title="遮罩层"></a>遮罩层</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 100%;</span><br><span class="line"><span class="selector-tag">height</span>: 100%;</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 0;</span><br><span class="line"><span class="selector-tag">top</span>: 0;</span><br><span class="line"><span class="selector-tag">z-index</span>: 2;</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span><br><span class="line"><span class="selector-tag">opacity</span>: 0.2;</span><br></pre></td></tr></table></figure>


<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote>
<p>a标签去掉下划线</p>
</blockquote>
<p>text-decoration: none;</p>
<blockquote>
<p>去除页面默认边框</p>
</blockquote>
<p>html, body {</p>
<p>​    margin: 0;</p>
<p>​    padding: 0;</p>
<p>}</p>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>样式</category>
      </categories>
      <tags>
        <tag>前端-样式</tag>
      </tags>
  </entry>
  <entry>
    <title>选择器</title>
    <url>/2021/03/05/java/%E5%89%8D%E7%AB%AF/%E6%A0%B7%E5%BC%8F/%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="选择最后一个对象"><a href="#选择最后一个对象" class="headerlink" title="选择最后一个对象"></a>选择最后一个对象</h2><a id="more"></a>

<p>#div a:last-child {</p>
<p>}</p>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>样式</category>
      </categories>
      <tags>
        <tag>选择器</tag>
      </tags>
  </entry>
  <entry>
    <title>日期操作</title>
    <url>/2021/03/17/java/%E5%89%8D%E7%AB%AF/%E9%80%BB%E8%BE%91/%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="获取每月最大的天数"><a href="#获取每月最大的天数" class="headerlink" title="获取每月最大的天数"></a>获取每月最大的天数</h2><a id="more"></a>

<p>获取2月最大天数：</p>
<p>new Date(2021, 2, 0).getDate();</p>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>逻辑</category>
      </categories>
      <tags>
        <tag>逻辑-日期操作</tag>
      </tags>
  </entry>
  <entry>
    <title>样式操作</title>
    <url>/2021/03/10/java/%E5%89%8D%E7%AB%AF/%E9%80%BB%E8%BE%91/%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="原生获取节点并修改样式"><a href="#原生获取节点并修改样式" class="headerlink" title="原生获取节点并修改样式"></a>原生获取节点并修改样式</h2><a id="more"></a>

<h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><p>根据单一具体选择器获得（太过局限）</p>
<p><img src="image-20210310104658489.png" alt="image-20210310104658489"></p>
<p>根据组合选择器获得</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取第一个，返回单一Node节点，可直接执行节点操作</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;#promptMessage strong&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部，返回Node节点list，进行节点操作前需要筛选或遍历</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;#promptMessage strong&quot;</span>);</span><br></pre></td></tr></table></figure>


<h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取节点</span></span><br><span class="line"><span class="keyword">let</span> element = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#promptMessage&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 样式修改 style</span></span><br><span class="line">element.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">element.style.width = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">element.style.backgroundColor = <span class="string">&quot;rgba(107, 100, 100, 0.5)&quot;</span>;</span><br><span class="line">element.style.left = e.pixel.x + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">element.style.top = e.pixel.y + <span class="number">50</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">element.style[<span class="string">&quot;font-weight&quot;</span>] = <span class="string">&quot;bold&quot;</span>;</span><br></pre></td></tr></table></figure>


<h2 id="修改文件上传框样式"><a href="#修改文件上传框样式" class="headerlink" title="修改文件上传框样式"></a>修改文件上传框样式</h2><p><img src="image-20210310153603689.png" alt="image-20210310153603689"></p>
<p><img src="image-20210310153541061.png" alt="image-20210310153541061"></p>
<h3 id="实现（上传Excel表格）"><a href="#实现（上传Excel表格）" class="headerlink" title="实现（上传Excel表格）"></a>实现（上传Excel表格）</h3><ol>
<li>使用a标签将input标签包裹</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;add&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">	&lt;input type=<span class="string">&quot;file&quot;</span> @change=<span class="string">&quot;_uploadFile&quot;</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>修改a标签样式</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.add&quot;</span>).css(&#123;</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;relative&quot;</span>,</span><br><span class="line">    <span class="string">&quot;display&quot;</span>: <span class="string">&quot;inline-block&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;#D0EEFF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border&quot;</span>: <span class="string">&quot;1px solid #99D3F5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-radius&quot;</span>: <span class="string">&quot;4px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;4px 12px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflow&quot;</span>: <span class="string">&quot;hidden&quot;</span>,</span><br><span class="line">    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#1E88C7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-decoration&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text-indent&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;line-height&quot;</span>: <span class="string">&quot;20px&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.add input&quot;</span>).css(&#123;</span><br><span class="line">    <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">    <span class="string">&quot;right&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;top&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>事件代码</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_uploadFile (e) &#123;</span><br><span class="line">    <span class="comment">// 获取上传文件路径</span></span><br><span class="line">    <span class="keyword">let</span> filePath = e.path[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">let</span> dateList = [];</span><br><span class="line">    <span class="comment">// 文件格式判断</span></span><br><span class="line">    <span class="keyword">if</span>(filePath.indexOf(<span class="string">&quot;xlsx&quot;</span>)!==-<span class="number">1</span> || filePath.indexOf(<span class="string">&quot;xls&quot;</span>)!==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> arr = filePath.split(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> fileName = arr[arr.length-<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 文件名回显</span></span><br><span class="line">        $(<span class="string">&quot;.addInspectionListPointCheckFile em&quot;</span>).text(<span class="string">&quot;选择文件    &quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> files = e.target.files;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前端读取文件内容</span></span><br><span class="line">        <span class="keyword">let</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> workbook;</span><br><span class="line">            <span class="comment">// 存储获取到的数据</span></span><br><span class="line">            <span class="keyword">let</span> persons = [];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 以二进制流方式读取得到整份excel表格对象</span></span><br><span class="line">                <span class="keyword">let</span> data = ev.target.result;</span><br><span class="line">                workbook = XLSX.read(data, &#123;<span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span>&#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;文件类型不正确&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 表格的表格范围，可用于判断表头是否数量是否正确</span></span><br><span class="line">            <span class="keyword">let</span> fromTo = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// 遍历每张表读取</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> sheet <span class="keyword">in</span> workbook.Sheets) &#123;</span><br><span class="line">                <span class="keyword">if</span> (workbook.Sheets.hasOwnProperty(sheet)) &#123;</span><br><span class="line">                    fromTo = workbook.Sheets[sheet][<span class="string">&#x27;!ref&#x27;</span>];</span><br><span class="line">                    <span class="comment">// console.log(fromTo);</span></span><br><span class="line">                    persons = persons.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));</span><br><span class="line">                    <span class="comment">// 如果只取第一张表，就取消注释这行</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            vc.component._persons = persons;</span><br><span class="line">        &#125;;            </span><br><span class="line">        <span class="comment">// 以二进制方式打开文件</span></span><br><span class="line">        fileReader.readAsBinaryString(files[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;文件类型有误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>逻辑</category>
      </categories>
      <tags>
        <tag>逻辑-样式</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑</title>
    <url>/2021/03/10/java/%E5%89%8D%E7%AB%AF/%E9%80%BB%E8%BE%91/%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>mysql使用问题</title>
    <url>/2021/03/09/java/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20mysql/0.%20mysql%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="字符串类型字段排序问题"><a href="#字符串类型字段排序问题" class="headerlink" title="字符串类型字段排序问题"></a>字符串类型字段排序问题</h1><a id="more"></a>

<p>当使用类型为字符串的字段进行排序时</p>
<p><img src="image-20210309110431796.png" alt="image-20210309110431796"></p>
<p>会出现以较小数开头的大数排在较大数开头的小数前，如1999 和 2，1999排在2前</p>
<p><img src="image-20210309110605344.png" alt="image-20210309110605344"></p>
<p>原因为字符串类型字段进行比较时使用同一位的数字进行比较而不是转换成数字然后进行比较</p>
<p>==解决方法==</p>
<p>排序的字段后边加0，将字符串类型转换为数字类型再进行比较（ps：如此汉字的顺序可能会排到数字前边）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SELECT * FROM floor ORDER BY floor_num + 0</span><br></pre></td></tr></table></figure>
<p><img src="image-20210309111032990.png" alt="image-20210309111032990"></p>
<h1 id="类型长度问题"><a href="#类型长度问题" class="headerlink" title="类型长度问题"></a>类型长度问题</h1><p><img src="image-20210511165008169.png" alt="image-20210511165008169"></p>
<p>设计数据库设置数字类型长度为20</p>
<p>但是此时数据仅11位执行保存也会报错</p>
<p><img src="image-20210511165112054.png" alt="image-20210511165112054"></p>
<p><strong>int类型最大可存入数字为2147483647</strong></p>
<p><strong>需要存入更大数字需要使用bigint</strong></p>
<h1 id="Duplicate-entry-‘id’-for-key-‘PRIMARY’"><a href="#Duplicate-entry-‘id’-for-key-‘PRIMARY’" class="headerlink" title="Duplicate entry ‘id’ for key ‘PRIMARY’"></a>Duplicate entry ‘id’ for key ‘PRIMARY’</h1><p>设置了id为主键，但是想要存入重复id</p>
<h2 id="数据库会冲突的字段"><a href="#数据库会冲突的字段" class="headerlink" title="数据库会冲突的字段"></a>数据库会冲突的字段</h2><p>describe</p>
<p>extends java关键字</p>
<h2 id="数据库记录浏览量"><a href="#数据库记录浏览量" class="headerlink" title="数据库记录浏览量"></a>数据库记录浏览量</h2><p>update <code>archives_storage</code> SET consult_num = consult_num + 1 where archives_id = “1002021031527330001”</p>
<h2 id="下划线类型-user-id-转小驼峰-userId"><a href="#下划线类型-user-id-转小驼峰-userId" class="headerlink" title="下划线类型(user_id)转小驼峰(userId)"></a>下划线类型(user_id)转小驼峰(userId)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frontChange</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list) || list.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> finalStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> newFront = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> splitList = item.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        splitList.forEach(<span class="function">(<span class="params">splitListItem, splitListIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (splitListIndex != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> firstFront = splitListItem.trim().substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                splitListItem = splitListItem.replace(firstFront, firstFront.toUpperCase());</span><br><span class="line">            &#125;</span><br><span class="line">            newFront += splitListItem;</span><br><span class="line">        &#125;)</span><br><span class="line">        finalStr += newFront + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(finalStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="索引问题"><a href="#索引问题" class="headerlink" title="索引问题"></a>索引问题</h2><p> mysql单表超过300w条数据时，就要创建索引了</p>
<h2 id="数据库本质"><a href="#数据库本质" class="headerlink" title="数据库本质"></a>数据库本质</h2><p>读、写</p>
<h3 id="数据库引擎区别解决读的压力"><a href="#数据库引擎区别解决读的压力" class="headerlink" title="数据库引擎区别解决读的压力"></a>数据库引擎区别解决读的压力</h3><p>MyISAM：表锁（若需要查询某条数据，其会将整个表锁起来，其他的查询只能等待这个查询结束之后才能进行查询，十分影响效率，高并发下就会出现严重的锁问题）</p>
<p>Innodb：行锁</p>
<h3 id="使用分库分表解决写的压力"><a href="#使用分库分表解决写的压力" class="headerlink" title="使用分库分表解决写的压力"></a>使用分库分表解决写的压力</h3><p>面对不同的业务使用不同的数据库进行管理</p>
<h1 id="数据库级别的MD5加密"><a href="#数据库级别的MD5加密" class="headerlink" title="数据库级别的MD5加密"></a>数据库级别的MD5加密</h1><p><strong>什么是MD5</strong></p>
<p>主要增强算法复杂度和不可逆性</p>
<p>MD5不可逆，具体的值的md5是一样的</p>
<p>MD5破解网站的原理，背后有一个字典，存有MD5加密后的值和加密前的值</p>
<p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 引号尽量都使用``，否则可能会报错</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8</span><br></pre></td></tr></table></figure>


<p>MD5函数使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5` <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line"><span class="keyword">UPDATE</span> testmd5 <span class="keyword">SET</span> pwd <span class="operator">=</span> MD5(pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入时加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5` <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">&#x27;马六&#x27;</span>, MD5(<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证：将用户传递进来的密码进行md5加密，然后对比加密后的值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> &quot;马六&quot; <span class="keyword">AND</span> pwd <span class="operator">=</span> MD5(<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="comment">-- 去重</span></span><br><span class="line">[<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line"><span class="comment">-- 字段</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="operator">*</span> <span class="comment">-- 所有查询的表中的所有字段</span></span><br><span class="line">	<span class="operator">|</span> table.<span class="operator">*</span> <span class="comment">-- 指定表中的所有字段</span></span><br><span class="line">	<span class="operator">|</span> [table.field1 [<span class="keyword">as</span> alias1][table.field2 [<span class="keyword">as</span> alias2]][,...]] <span class="comment">-- 具体字段</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias] <span class="comment">-- 目标表</span></span><br><span class="line">	<span class="comment">-- 联合查询</span></span><br><span class="line">	[</span><br><span class="line">        <span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2</span><br><span class="line">        <span class="keyword">on</span> ... <span class="comment">-- 联合查询条件</span></span><br><span class="line">    ]</span><br><span class="line">	[<span class="keyword">WHERE</span> ...]	<span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">	[<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]	<span class="comment">-- 指定结果按哪几个字段分组</span></span><br><span class="line">	[<span class="keyword">HAVING</span>] <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">	[<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] <span class="comment">-- 指定查询记录按一个或多个排序</span></span><br><span class="line">	<span class="comment">-- 指定查询结果由哪条到哪条</span></span><br><span class="line">	[LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;]</span><br></pre></td></tr></table></figure>
<p>[] 表示可选，{}表示必选</p>
<blockquote>
<p>select 去重 要查询的字段（表和字段可以取别名）</p>
<p>xx join 要连接的表 on 等值判断</p>
<p>where （具体的值，子查询语句）</p>
<p>group by （通过哪个字段来分组）</p>
<p>Having （过滤分组后的信息，条件和where一样）</p>
<p>order by … （通过..字段排序） [升序/降序]</p>
<p>Limit startIndex,  endIndex （分页）</p>
</blockquote>
<h1 id="数据库方法-循环"><a href="#数据库方法-循环" class="headerlink" title="数据库方法-循环"></a>数据库方法-循环</h1><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`eamil` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`gender` tinyint(<span class="number">4</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`age` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>


<p>执行循环</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="comment">-- 创建方法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data2()</span><br><span class="line"><span class="comment">-- 当仅有一个返回值时使用RETURN多个时使用RETURNS</span></span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="comment">-- 方法开始</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="comment">-- 声明变量</span></span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">10000</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="comment">-- 循环开始</span></span><br><span class="line">	WHILE i<span class="operator">&lt;</span>num DO</span><br><span class="line">		<span class="comment">-- 执行语句</span></span><br><span class="line">		<span class="comment">-- 字符串拼接CONCAT(str1,str2)</span></span><br><span class="line">		<span class="comment">-- RAND() 获得0-1之间的随机数    FLOOR() 向下取整</span></span><br><span class="line">		<span class="comment">-- 获取UUID</span></span><br><span class="line">		<span class="comment">-- 1 9999999999</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`name`, `email`, `phone`, gender, `password`, age) <span class="keyword">VALUES</span> (CONCAT(&quot;用户&quot;, i), CONCAT(<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">9999999999</span>) <span class="operator">+</span> <span class="number">10000000000</span>, <span class="string">&#x27;@qq.com&#x27;</span>), <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">9999999999</span>) <span class="operator">+</span> <span class="number">10000000000</span>, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line">		<span class="comment">-- i自增</span></span><br><span class="line">		<span class="keyword">SET</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	<span class="comment">-- 循环结束</span></span><br><span class="line">	<span class="keyword">END</span> WHILE;</span><br><span class="line">	<span class="comment">-- 返回</span></span><br><span class="line">	<span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="comment">-- 方法结束</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">-- 执行方法</span></span><br><span class="line"><span class="keyword">SELECT</span> mock_data2();</span><br></pre></td></tr></table></figure>




<h1 id="日期默认值"><a href="#日期默认值" class="headerlink" title="日期默认值"></a>日期默认值</h1><p>CURRENT_TIMESTAMP</p>
<h1 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@rank</span>:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">from</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span>,</span><br><span class="line">		<span class="variable">@rank</span>:<span class="operator">=</span></span><br><span class="line">			<span class="keyword">case</span> </span><br><span class="line">				<span class="keyword">when</span> </span><br><span class="line">					<span class="variable">@current</span>_id <span class="operator">!=</span> `extend` </span><br><span class="line">				<span class="keyword">then</span> </span><br><span class="line">					<span class="number">1</span> </span><br><span class="line">				<span class="keyword">else</span> </span><br><span class="line">					<span class="variable">@rank</span> <span class="operator">+</span> <span class="number">1</span> </span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">AS</span> rank,</span><br><span class="line">		<span class="variable">@current</span>_id:<span class="operator">=</span>`extend`</span><br><span class="line">	<span class="keyword">from</span> </span><br><span class="line">		`monitor` </span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">		`extend`</span><br><span class="line">) <span class="keyword">AS</span> data_table</span><br><span class="line"><span class="keyword">WHERE</span> data_table.rank <span class="operator">!=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>解析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 定义变量</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@rank</span>:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">from</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span>,</span><br><span class="line">    	<span class="comment">-- 变量赋值</span></span><br><span class="line">		<span class="variable">@rank</span>:<span class="operator">=</span></span><br><span class="line">    		<span class="comment">-- 进行逻辑判断</span></span><br><span class="line">			<span class="keyword">case</span> </span><br><span class="line">    			<span class="comment">-- extend不等于@current_id变量时</span></span><br><span class="line">    			<span class="comment">-- 注：首次执行时@current_id并没有赋值，因此一定为true，</span></span><br><span class="line">    			<span class="comment">-- 判断完成后才给@current_id赋值，</span></span><br><span class="line">    			<span class="comment">-- 则执行第二条时@current_id的值为第一条的extend的值</span></span><br><span class="line">				<span class="keyword">when</span> </span><br><span class="line">					<span class="variable">@current</span>_id <span class="operator">!=</span> `extend` </span><br><span class="line">    			<span class="comment">-- 为true时</span></span><br><span class="line">				<span class="keyword">then</span> </span><br><span class="line">					<span class="number">1</span> </span><br><span class="line">    			<span class="comment">-- 为false时</span></span><br><span class="line">				<span class="keyword">else</span> </span><br><span class="line">					<span class="variable">@rank</span> <span class="operator">+</span> <span class="number">1</span> </span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">AS</span> rank,</span><br><span class="line">		<span class="variable">@current</span>_id:<span class="operator">=</span>`extend`</span><br><span class="line">	<span class="keyword">from</span> </span><br><span class="line">		`monitor` </span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">		`extend`</span><br><span class="line">) <span class="keyword">AS</span> data_table</span><br><span class="line"><span class="keyword">WHERE</span> data_table.rank <span class="operator">!=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>




<h1 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h1><p>内连接：筛选符合条件的选项</p>
<p>外连接：左外连接左表全表及右表符合条件的</p>
<p>以班级和同学举例</p>
<p><img src="image-20210413151008834.png" alt="学生表"></p>
<p><img src="image-20210413151033033.png" alt="班级表"></p>
<p>内连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	class c, student s</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">	s.class_id <span class="operator">=</span> c.id</span><br><span class="line">	</span><br><span class="line"># 也可写作</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> </span><br><span class="line">`student` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> class c <span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure>
<p>其会将二者结果组合，若student没有class_id则条件不符，这个student将不会出现在结果表中</p>
<p><img src="image-20210413151111758.png" alt="内连接结果"></p>
<p>左外连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	*</span><br><span class="line">from</span><br><span class="line">	student s</span><br><span class="line">LEFT JOIN <span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="title">ON</span> <span class="title">s</span>.<span class="title">class_id</span> </span>= c.id;</span><br></pre></td></tr></table></figure>
<p>​    取前表的所有数据，匹配右表的数据，若匹配不到则为空</p>
<p><img src="image-20210413153905599.png" alt="image-20210413153905599"></p>
<h1 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h1><p>or相当于另起一个where</p>
<h1 id="数据库用户管理"><a href="#数据库用户管理" class="headerlink" title="数据库用户管理"></a>数据库用户管理</h1><h2 id="使用Navicat可视化管理"><a href="#使用Navicat可视化管理" class="headerlink" title="使用Navicat可视化管理"></a>使用Navicat可视化管理</h2><p><img src="image-20210420185522444.png" alt="可视化管理"></p>
<p>添加新用户</p>
<p><img src="image-20210420185555276.png" alt="image-20210420185555276"></p>
<h2 id="使用SQL命令"><a href="#使用SQL命令" class="headerlink" title="使用SQL命令"></a>使用SQL命令</h2><p>用户表：msql.user</p>
<p><img src="image-20210420185822035.png" alt="image-20210420185822035"></p>
<p>本质为对msql.user表进行增删改查</p>
<p>![image-20210420190405993](0. mysql使用问题/image-20210420190405993.png)</p>
<p>对应可视化中的权限</p>
<p><img src="image-20210420190542078.png" alt="image-20210420190542078"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户  CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> usertest1 IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="comment">-- 注：PASSWORD不能带``</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改指定用户密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> usertest <span class="operator">=</span> PASSWORD(<span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名  RENAME USER 旧用户名 TO 新用户名</span></span><br><span class="line">RENAME <span class="keyword">USER</span> usertest <span class="keyword">TO</span> userdemo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- 用户授权 ALL PRIVILEGES 全部的权限</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了让该用户拥有给他人授权的权限外什么都能干</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> userdemo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="comment">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;userdemo&#x27;@&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> userdemo  </span><br><span class="line"><span class="comment">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="comment">-- REVOKE 哪些权限 在哪个库 撤销谁的</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> userdemo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> userdemo</span><br></pre></td></tr></table></figure>


<p>当一个人只有某个库的权限而没有全局权限时，那么这个用户只能操作那个库</p>
<p>注：但是该角色至少需要拥有mysql数据库的读的权限，否则会报错</p>
<p><img src="image-20210422180258226.png" alt="image-20210422180258226"></p>
<h1 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h1><ul>
<li>保证重要的数据不丢失</li>
<li>数据转移</li>
</ul>
<h2 id="方式一：直接拷贝物理文件"><a href="#方式一：直接拷贝物理文件" class="headerlink" title="方式一：直接拷贝物理文件"></a>方式一：直接拷贝物理文件</h2><p>由于数据库存在于物理磁盘上，</p>
<p>打开数据库中的Data文件即可看到本地数据库的库的信息</p>
<p><img src="image-20210422180808755.png" alt="image-20210422180808755"></p>
<p><img src="image-20210422180859576.png" alt="image-20210422180859576"></p>
<h2 id="方式二：在可视化工具中手动导出"><a href="#方式二：在可视化工具中手动导出" class="headerlink" title="方式二：在可视化工具中手动导出"></a>方式二：在可视化工具中手动导出</h2><p><img src="image-20210422181128996.png" alt="image-20210422181128996"></p>
<h2 id="方式三：使用命令行导出"><a href="#方式三：使用命令行导出" class="headerlink" title="方式三：使用命令行导出"></a>方式三：使用命令行导出</h2><h3 id="使用命令行导出-mysqldump"><a href="#使用命令行导出-mysqldump" class="headerlink" title="使用命令行导出  mysqldump"></a>使用命令行导出  mysqldump</h3><blockquote>
<p>使用时需要配置环境变量或在本地 mysql/bin 中使用</p>
</blockquote>
<p>mysqldump</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysqldump -h主机 -u用户名 -p密码 数据库 表名 &gt;到文件</span></span><br><span class="line">mysqldump <span class="operator">-</span>hlocalhost <span class="operator">-</span>uroot <span class="operator">-</span>proot db1 class <span class="operator">&gt;</span>D:<span class="operator">/</span>a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出多张表</span></span><br><span class="line"><span class="comment">-- mysqldump -h主机 -u用户名 -p密码 数据库 表1 表2 表3 &gt;到文件</span></span><br><span class="line">mysqldump <span class="operator">-</span>hlocalhost <span class="operator">-</span>uroot <span class="operator">-</span>proot db1 class <span class="operator">&gt;</span>D:<span class="operator">/</span>b.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出数据库</span></span><br><span class="line"><span class="comment">-- mysqldump -h主机 -u用户名 -p密码 数据库 &gt;到文件</span></span><br><span class="line">mysqldump <span class="operator">-</span>hlocalhost <span class="operator">-</span>uroot <span class="operator">-</span>proot db1 <span class="operator">&gt;</span>D:<span class="operator">/</span>b.sql</span><br></pre></td></tr></table></figure>


<h3 id="使用命令行导入-source"><a href="#使用命令行导入-source" class="headerlink" title="使用命令行导入  source"></a>使用命令行导入  source</h3><blockquote>
<p>最好先登入</p>
<p>mysql -uroot -p1234567</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line">use db1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入数据库</span></span><br><span class="line">source d:<span class="operator">/</span>a.sql</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>事务</title>
    <url>/2021/04/19/java/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20mysql/1.%20%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><a id="more"></a>

<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p><strong>要么都成功，要么都失败</strong></p>
<h2 id="事务四个特性ACID"><a href="#事务四个特性ACID" class="headerlink" title="事务四个特性ACID"></a>事务四个特性ACID</h2><ol>
<li>Atomicity原子性</li>
<li>Consistency一致性</li>
<li>Isolation隔离性</li>
<li>Durability持久性</li>
</ol>
<p>一、原子性（atomicity)</p>
<p>一个事务要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作</p>
<p>二、一致性（consistency)</p>
<blockquote>
<p>最终一致性：A有800，B有200，A要给B转200，二者无论怎么转总钱数都为1000</p>
<p>事务的执行使得数据库从一种正确状态转换成另外一种正确状态</p>
</blockquote>
<p>事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。</p>
<p>如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所作的修改有一部分已写入物理数据库，这是数据库就处于一种不正确的状态，也就是不一致的状态</p>
<p>三、隔离性（isolation）</p>
<blockquote>
<p>在事务正确提交之前，不允许把事务对该数据的改变提供给任何其他事务，即在事务正确提交之前，它可能的结果不应该显示给其他事务</p>
</blockquote>
<p>事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能不被其他事务干扰。不同的事务并发操作相同的数据时，每个事务都有各自完成的数据空间，即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能相互干扰。</p>
<p>四、持久性（durability）</p>
<blockquote>
<p>事务没有提交：若事务没有提交，则数据库恢复到原状</p>
<p>事务已经提交：若事务已经提交，则数据持久化到数据库</p>
<p>事务一旦提交就不可逆</p>
</blockquote>
<p>一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中。–即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束的状态</p>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>ISOLATIONREADUNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；</p>
<p>ISOLATIONREADCOMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别； </p>
<p>ISOLATIONREPEATABLEREAD：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别； ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。 </p>
<p>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务读取到了记录 A。 </p>
<p>不可重复读（数据内容不同） ：是指在一个事务内，多次读同一数据，读出来的数据不一致。事务A读取余额，读到5元，此时事务B开启事务将余额改为0提交，事务A再次读取，读到余额0元。</p>
<p>幻读（数据条数不同） ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p>
<h1 id="事务使用"><a href="#事务使用" class="headerlink" title="事务使用"></a>事务使用</h1><p>mysql是默认开启事务自动提交的</p>
<p>set autocommit = 0        /* 关闭 */</p>
<p>set autocommit = 1        /* 开启（默认） */</p>
<p>各种命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关闭mysql中的自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="comment">-- 标记一个事务的开始，在这之后的sql都在一个事务内</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> xxx</span><br><span class="line"><span class="keyword">DELETE</span> xxx</span><br><span class="line"><span class="keyword">UPDATE</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="comment">-- 重新开启mysql自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点<span class="number">1</span>	<span class="comment">-- 设置保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点<span class="number">1</span>	<span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点<span class="number">1</span>	<span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>


<p><img src="image-20210416103627245.png" alt="image-20210416103627245"></p>
<p>转账实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`money` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> account(`name`, `money`) <span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="number">2000.00</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">10000.00</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行转账</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时查询</span></span><br><span class="line"><span class="comment">-- 1	a	1500</span></span><br><span class="line"><span class="comment">-- 2	b	10500</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="comment">-- 此时查询</span></span><br><span class="line"><span class="comment">-- 1	a	1500</span></span><br><span class="line"><span class="comment">-- 2	b	10500</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="comment">-- 此时查询</span></span><br><span class="line"><span class="comment">-- 1	a	2000</span></span><br><span class="line"><span class="comment">-- 2	b	10000</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启自动提交</span></span><br><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/2021/04/19/java/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20mysql/2.%20%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><a id="more"></a>

<blockquote>
<p>MySQL官方对索引的定义为：<strong>索引（Index）是帮助MySQL高效获取数据的数据结构。</strong></p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h2 id="1-索引分类"><a href="#1-索引分类" class="headerlink" title="1. 索引分类"></a>1. 索引分类</h2><blockquote>
<p>在一个表中主键索引只能有一个，唯一索引可以有多个</p>
</blockquote>
<ul>
<li>主键索引    PRIMARY KEY<ul>
<li>唯一的标识，主键不可重复</li>
</ul>
</li>
<li>唯一索引    UNIQUE KEY<ul>
<li>被唯一索引标识的列中的数据只能出现一次，一张表中可以标记多个列为唯一索引</li>
<li>一般用作不能重复的用户名、身份证号</li>
</ul>
</li>
<li>常规索引    KEY<ul>
<li>默认的、index、key关键字来设置</li>
</ul>
</li>
<li>全文索引    FullText<ul>
<li>在特定的数据库引擎下才有，MySAM</li>
</ul>
</li>
</ul>
<h2 id="2-索引的使用"><a href="#2-索引的使用" class="headerlink" title="2. 索引的使用"></a>2. 索引的使用</h2><h3 id="为表添加索引"><a href="#为表添加索引" class="headerlink" title="为表添加索引"></a>为表添加索引</h3><h4 id="1-在创建表的时候给字段增加索引"><a href="#1-在创建表的时候给字段增加索引" class="headerlink" title="1. 在创建表的时候给字段增加索引"></a>1. 在创建表的时候给字段增加索引</h4><h4 id="2-创建完毕后，增加索引"><a href="#2-创建完毕后，增加索引" class="headerlink" title="2. 创建完毕后，增加索引"></a>2. 创建完毕后，增加索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法1. 增加全文索引 - 索引名（列名）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT INDEX `name`(`name`)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- id _ 表明 _ 字段名</span></span><br><span class="line"><span class="comment">-- 方法2. CREATE INDEX 索引名 ON 表(字段)</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_user_name <span class="keyword">ON</span> `<span class="keyword">user</span>`(`name`)</span><br></pre></td></tr></table></figure>


<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示student表所有的索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>


<h3 id="分析sql"><a href="#分析sql" class="headerlink" title="分析sql"></a>分析sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分析sql执行的状况</span></span><br><span class="line"><span class="comment">-- 非全文索引</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(`name`) AGAINST(<span class="string">&#x27;王&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="3-分析sql执行的状况-全文索引-explain"><a href="#3-分析sql执行的状况-全文索引-explain" class="headerlink" title="3. 分析sql执行的状况-全文索引-explain"></a>3. 分析sql执行的状况-全文索引-explain</h2><p>索引在小数据量时，用处不大，但是大数据量时，区别十分明显</p>
<p>分析查询语句，查询无全文索引的phone</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `phone` <span class="operator">=</span> <span class="string">&#x27;12134521856&#x27;</span>   <span class="comment">-- 执行时长0.014s</span></span><br></pre></td></tr></table></figure>


<p>结果可看出，结果为查询了9738条语句后得出的</p>
<p><img src="image-20210419144648716.png" alt="分析sql-全文索引前"></p>
<p>分析查询语句，查询建有全文索引的name，首先发现查询时间少了非常多</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>	<span class="comment">-- 执行时长0.003s</span></span><br></pre></td></tr></table></figure>


<p>结果可看出，建立全文索引后仅查询了一条数据</p>
<p><img src="image-20210419152828742.png" alt="分析sql-全文索引后"></p>
<p>作用可类比为使用list和map存储数据</p>
<p>未建立索引时为使用list存储数据，当需要查询某条数据时，需要将list遍历，找到需要的数据将数据返回</p>
<p>建立索引可理解为使用map存储数据，key为索引列内容，当需要找某条数据时，可直接获取，不用遍历数据</p>
<h2 id="4-索引原则"><a href="#4-索引原则" class="headerlink" title="4. 索引原则"></a>4. 索引原则</h2><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在常用来查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<h1 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h1><ol>
<li>有or必全有索引;</li>
<li>复合索引未用左列字段;</li>
<li>like以%开头;</li>
<li>需要类型转换;</li>
<li>where中索引列有运算;</li>
<li>where中索引列使用了函数;</li>
<li>如果mysql觉得全表扫描更快时（数据少）;</li>
</ol>
<h1 id="没必要加索引"><a href="#没必要加索引" class="headerlink" title="没必要加索引"></a>没必要加索引</h1><ol>
<li>唯一性差;</li>
<li>频繁更新的字段不用（更新索引消耗）;</li>
<li>where中不用的字段;</li>
<li>索引使用&lt;&gt;时，效果一般;</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库设计</title>
    <url>/2021/04/23/java/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20mysql/3.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="为什么需要设计"><a href="#为什么需要设计" class="headerlink" title="为什么需要设计"></a>为什么需要设计</h1><a id="more"></a>

<p><strong>糟糕的数据库设计</strong>：</p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除都会麻烦、异常【屏蔽使用物理外键】</li>
<li>程序的性能差</li>
</ul>
<p><strong>良好的数据库设计</strong>：</p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便我们开发系统</li>
</ul>
<p><strong>软件开发中关于数据库的设计</strong>：</p>
<ul>
<li>分析需求：分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图 E-R 图</li>
</ul>
<h1 id="设计数据库必须要有的字段"><a href="#设计数据库必须要有的字段" class="headerlink" title="设计数据库必须要有的字段"></a>设计数据库必须要有的字段</h1><p>真实开发中必须存在的字段：version（乐观锁）、status_cd/deleted（逻辑删除）、gmt_create（创建时间）、gmt_modified（修改时间）</p>
<p>gmt：世界时</p>
<h1 id="数据库的三大范式"><a href="#数据库的三大范式" class="headerlink" title="数据库的三大范式"></a>数据库的三大范式</h1><h2 id="1-为什么需要数据规范化"><a href="#1-为什么需要数据规范化" class="headerlink" title="1. 为什么需要数据规范化"></a>1. 为什么需要数据规范化</h2><ul>
<li>数据重复</li>
<li>更新异常（外键等原因）</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<h2 id="2-三大范式"><a href="#2-三大范式" class="headerlink" title="2. 三大范式"></a>2. 三大范式</h2><p>目前<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/1237340">关系数据库</a>有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、<a href="https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F/3193985">第四范式</a>(4NF）和<a href="https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F/5025271">第五范式</a>（5NF，又称完美范式）。</p>
<p>而通常我们用的最多的就是第一范式（1NF）、第二范式（2NF）、第三范式（3NF），也就是本文要讲的“三大范式”。</p>
<h3 id="第一范式（1NF）："><a href="#第一范式（1NF）：" class="headerlink" title="第一范式（1NF）："></a>第一范式（1NF）：</h3><blockquote>
<p>原子性：保证每一列不可再分</p>
</blockquote>
<p><strong>要求数据库表的每一列都是不可分割的原子数据项。</strong></p>
<p>举例说明：</p>
<p><img src="1218459-20180909201651535-1215699096.png" alt="img"></p>
<p>在上面的表中，“家庭信息”和“学校信息”列均不满足原子性的要求，故不满足第一范式，调整如下：</p>
<p><img src="1218459-20180909202243826-1032549277.png" alt="img"></p>
<p>可见，调整后的每一列都是不可再分的，因此满足第一范式（1NF）；</p>
<h3 id="第二范式（2NF）："><a href="#第二范式（2NF）：" class="headerlink" title="第二范式（2NF）："></a>第二范式（2NF）：</h3><blockquote>
<p>前提：满足第一范式的前提下</p>
<p>每张表只描述一件事情</p>
</blockquote>
<p><strong>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</strong></p>
<p><strong>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p>
<p>举例说明：</p>
<p><img src="1218459-20180909204750951-639647799.png" alt="img"></p>
<p>在上图所示的情况中，同一个订单中可能包含不同的产品，因此主键必须是“订单号”和“产品号”联合组成，</p>
<p>但可以发现，产品数量、产品折扣、产品价格与“订单号”和“产品号”都相关，但是订单金额和订单时间仅与“订单号”相关，与“产品号”无关，</p>
<p>这样就不满足第二范式的要求，调整如下，需分成两个表：</p>
<p> <img src="1218459-20180909210444227-1008056975.png" alt="img"> </p>
<p><img src="1218459-20180909210458847-2092897116.png" alt="img"></p>
<h3 id="第三范式（3NF）："><a href="#第三范式（3NF）：" class="headerlink" title="第三范式（3NF）："></a>第三范式（3NF）：</h3><p><strong>在2NF基础上，任何非主<a href="https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7">属性</a>不依赖于其它非主属性（在2NF基础上消除传递依赖）</strong></p>
<p><strong>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</strong></p>
<p>举例说明：</p>
<p><img src="1218459-20180909211311408-1364899740.png" alt="img"></p>
<p>上表中，所有属性都完全依赖于学号，所以满足第二范式，但是“班主任性别”和“班主任年龄”直接依赖的是“班主任姓名”，</p>
<p>而不是主键“学号”，所以需做如下调整：</p>
<p><img src="1218459-20180909211539242-1391100354.png" alt="img"> </p>
<p><img src="1218459-20180909211602202-1069383439.png" alt="img"></p>
<p>这样以来，就满足了第三范式的要求。</p>
<h3 id="规范性-和-性能的问题"><a href="#规范性-和-性能的问题" class="headerlink" title="规范性 和 性能的问题"></a>规范性 和 性能的问题</h3><p>关联查询的表不得超过三张表</p>
<ul>
<li>考虑商业化的需求和目标（成本，用户体验！） 数据库的性能更加重要</li>
<li>在规范性能的问题的时候，需要适当的考虑下规范性</li>
<li>故意给某些表增加一些冗余的字段（将多表查询变为单表查询）</li>
<li>故意增加一些计算列（如百万条数据时，查询count需要统计所有的数据，增加计算列后均需查询最后一条数据，从大数据量降低为小数据量的查询：索引）</li>
</ul>
<h1 id="设计数据库的步骤（以个人博客为例）："><a href="#设计数据库的步骤（以个人博客为例）：" class="headerlink" title="设计数据库的步骤（以个人博客为例）："></a>设计数据库的步骤（以个人博客为例）：</h1><h2 id="1-收集信息，分析需求"><a href="#1-收集信息，分析需求" class="headerlink" title="1. 收集信息，分析需求"></a>1. 收集信息，分析需求</h2><ul>
<li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li>
<li>分类表（文章分类，创建者）</li>
<li>文章表（文章信息）</li>
<li>友链表（友链信息）</li>
<li>自定义表（系统信息，某个关键的字，或者一些主字段）key：value</li>
</ul>
<h2 id="2-标识实体类（把需求落地到每个字段）"><a href="#2-标识实体类（把需求落地到每个字段）" class="headerlink" title="2. 标识实体类（把需求落地到每个字段）"></a>2. 标识实体类（把需求落地到每个字段）</h2><ol>
<li><p>category_name：数据库是不区分大小写的，因此不提倡使用驼峰命名法，而是使用下划线</p>
</li>
<li><p>时间格式</p>
<ol>
<li>data：精确到天</li>
<li>datatime：精确到时分秒</li>
</ol>
</li>
<li><table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>TINYTEXT</td>
<td>256 bytes</td>
<td></td>
</tr>
<tr>
<td>TEXT</td>
<td>65,535 bytes</td>
<td>~64kb</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>16,777,215 bytes</td>
<td>~16MB</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>4,294,967,295 bytes</td>
<td>~4GB</td>
</tr>
</tbody></table>
</li>
</ol>
<ul>
<li>用户表 user</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>类型</th>
<th>修饰</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户id</td>
<td>int 10</td>
<td>主键、非空、自增</td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
<td>varchar 60</td>
<td>非空</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>varchar 60</td>
<td>非空</td>
</tr>
<tr>
<td>sex</td>
<td>性别</td>
<td>varchar 2</td>
<td>非空</td>
</tr>
<tr>
<td>age</td>
<td>年龄</td>
<td>int 3</td>
<td></td>
</tr>
<tr>
<td>sign</td>
<td>签名（作用未知）</td>
<td>varchar 200</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>分类表  category</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>类型</th>
<th>修饰</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>分类id</td>
<td>int 10</td>
<td>主键、非空</td>
</tr>
<tr>
<td>category_name</td>
<td>用户名</td>
<td>varchar 60</td>
<td>非空</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>varchar 60</td>
<td>非空</td>
</tr>
<tr>
<td>sex</td>
<td>性别</td>
<td>varchar 2</td>
<td>非空</td>
</tr>
<tr>
<td>age</td>
<td>年龄</td>
<td>int 3</td>
<td></td>
</tr>
<tr>
<td>sign</td>
<td>签名（作用未知）</td>
<td>varchar 200</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>文章表 blog</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>类型</th>
<th>修饰</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>文章id</td>
<td>int 10</td>
<td>主键、非空</td>
</tr>
<tr>
<td>title</td>
<td>文章标题</td>
<td>varchar 100</td>
<td>非空</td>
</tr>
<tr>
<td>auth_id</td>
<td>编写文章的用户</td>
<td>int 10</td>
<td>非空</td>
</tr>
<tr>
<td>category_id</td>
<td>分类</td>
<td>int 10</td>
<td>非空</td>
</tr>
<tr>
<td>content</td>
<td>文章内容</td>
<td>text</td>
<td>非空</td>
</tr>
<tr>
<td>create_time</td>
<td>创建时间</td>
<td>datatime</td>
<td></td>
</tr>
<tr>
<td>update_time</td>
<td>修改时间</td>
<td>datatime</td>
<td></td>
</tr>
<tr>
<td>love</td>
<td>点赞</td>
<td>int 10</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>评论表 comment</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>类型</th>
<th>修饰</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>评论id</td>
<td>int 10</td>
<td>主键、非空</td>
</tr>
<tr>
<td>blog_id</td>
<td>所属文章</td>
<td>int 10</td>
<td>非空</td>
</tr>
<tr>
<td>user_id</td>
<td>评论人</td>
<td>int 10</td>
<td>非空</td>
</tr>
<tr>
<td>content</td>
<td>评论内容</td>
<td>int 10</td>
<td>非空</td>
</tr>
<tr>
<td>create_time</td>
<td>评论时间</td>
<td>datatime</td>
<td></td>
</tr>
<tr>
<td>user_id_parent</td>
<td>是否有父id，有则表示是回复别人的</td>
<td>int 10</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>友链表 links</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>类型</th>
<th>修饰</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>友链id</td>
<td>int 10</td>
<td>主键、非空</td>
</tr>
<tr>
<td>links</td>
<td>网站名称</td>
<td>varchar 50</td>
<td>非空</td>
</tr>
<tr>
<td>href</td>
<td>网站链接</td>
<td>varchar 2000</td>
<td>非空</td>
</tr>
<tr>
<td>sort</td>
<td>排序</td>
<td>int 10</td>
<td>非空</td>
</tr>
</tbody></table>
<ul>
<li>粉丝表 user_follow</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>类型</th>
<th>修饰</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>int 10</td>
<td>主键、非空</td>
</tr>
<tr>
<td>user_id</td>
<td>被关注id</td>
<td>int 10</td>
<td>非空</td>
</tr>
<tr>
<td>follow_id</td>
<td>关注人id</td>
<td>int 10</td>
<td>非空</td>
</tr>
</tbody></table>
<h2 id="3-标识实体之间的关系"><a href="#3-标识实体之间的关系" class="headerlink" title="3. 标识实体之间的关系"></a>3. 标识实体之间的关系</h2><ul>
<li>写博客：user –&gt; blog</li>
<li>创建分类：user –&gt; category</li>
<li>关注：user –&gt; user</li>
<li>友链：links</li>
<li>评论：user –&gt; user  –&gt;  blog</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus</title>
    <url>/2021/04/27/java/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20MybatisPlus/0.%20MybatisPlus/</url>
    <content><![CDATA[<h1 id="MybatisPlus概述"><a href="#MybatisPlus概述" class="headerlink" title="MybatisPlus概述"></a>MybatisPlus概述</h1><a id="more"></a>

<p>MybatisPlus可以节省大量的工作时间，所有的CRUD代码都可以自动化完成！</p>
<p>官网：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p>
<p><img src="image-20210427090724744.png" alt="image-20210427090724744"></p>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p><img src="image-20210427090954879.png" alt="image-20210427090954879"></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li><p>简单的mapper层CRUD已经完备，不需要写sql即可使用</p>
</li>
<li><p>拥有打印、分析sql执行日志的功能</p>
</li>
<li><p>ID生成策略</p>
</li>
<li><p>自动填充功能，可自动填充数据创建时间及自动更新数据修改时间</p>
</li>
<li><p>拥有内置分页插件，使用page对象即可操作分页</p>
</li>
<li><p>可自动处理逻辑删除操作，将删除操作自动改为修改操作</p>
</li>
<li><p>丰富的条件查询器wrapper</p>
</li>
<li><p>拥有代码生成器，经过配置可自动需要的mapper层，service层，entity及controller层（仅类，接口需自己实现）代码，</p>
<p>经配置entity中可自动生成swagger、id生成策略、乐观锁控制、逻辑删除控制、自动填充功能及lombok等注解</p>
</li>
</ol>
<h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><p>​    注：使用mybatis-plus可以节省大量的代码，但尽量不要同时导入 mybatis 和 mybatis-plus，由于引用的依赖版本差异可能导致报错</p>
<h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><p>所有数据库表：gmt_create、gmt_modified（创建、修改时间）几乎所有的表都要配置上，而且需要自动化</p>
<blockquote>
<p>方式一：数据库级别（工作中不允许修改数据库）</p>
</blockquote>
<ol>
<li><p> 在表中新增字段create_time（timestamp），update_time（<strong>timestamp</strong>）</p>
</li>
<li><p>设置默认值为  CURRENT_TIMESTAMP</p>
</li>
<li><p>勾选update_time下的根据当前时间戳更新</p>
<p>注：  Navicat中datetime类型的不能选择根据当前时间戳更新</p>
</li>
</ol>
<p><img src="image-20210508182429798.png" alt="image-20210508182429798"></p>
<blockquote>
<p>方式二：代码级别</p>
</blockquote>
<ol>
<li>删除数据库的默认值及更新操作！</li>
</ol>
<p><img src="image-20210508183903426.png" alt="image-20210508183903426"></p>
<ol start="2">
<li>实体类上加固有注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字段添加填充内容</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>编写处理器来处理这个注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 创建一个处理器类</span></span><br><span class="line"><span class="comment"> * 2. 继承MetaObjectHandler</span></span><br><span class="line"><span class="comment"> * 3. 添加<span class="doctag">@Component</span>注解，将该处理器类交给框架管理</span></span><br><span class="line"><span class="comment"> * 4. 实现insertFill（插入时的填充策略）和updateFill（更新时的填充策略）方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 其他：</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@Slf</span>4j为lombok日志注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h1><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol>
<li>独立数据库<br>即一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。</li>
</ol>
<p>优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。</p>
<p>缺点：增多了数据库的安装数量，随之带来维护成本和购置成本的增加。</p>
<ol start="2">
<li>共享数据库，独立 Schema<br>也就是说 共同使用一个数据库 使用表进行数据隔离<br>多个或所有租户共享Database，但是每个租户一个Schema（也可叫做一个user）。底层库比如是：DB2、ORACLE等，一个数据库下可以有多个SCHEMA。</li>
</ol>
<p>优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可支持更多的租户数量。</p>
<p>缺点：如果出现故障，数据恢复比较困难，因为恢复数据库将牵涉到其他租户的数据；</p>
<ol start="3">
<li>共享数据库，共享 Schema，共享数据表<br>也就是说 共同使用一个数据库一个表 使用字段进行数据隔离</li>
</ol>
<p>即租户共享同一个Database、同一个Schema，但在表中增加TenantID多租户的数据字段。这是共享程度最高、隔离级别最低的模式。</p>
<p>简单来讲，即每插入一条数据时都需要有一个客户的标识。这样才能在同一张表中区分出不同客户的数据，这也是我们系统目前用到的(tenant_id)</p>
<p>优点：三种方案比较，第三种方案的维护和购置成本最低，允许每个数据库支持的租户数量最多。</p>
<p>缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量；数据备份和恢复最困难，需要逐表逐条备份和还原。</p>
<h2 id="mybatisplus实现方法为第三种"><a href="#mybatisplus实现方法为第三种" class="headerlink" title="mybatisplus实现方法为第三种"></a>mybatisplus实现方法为第三种</h2>]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>乐观锁、悲观锁</title>
    <url>/2021/05/10/java/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20MybatisPlus/2.%20%E4%B9%90%E8%A7%82%E9%94%81%E3%80%81%E6%82%B2%E8%A7%82%E9%94%81/</url>
    <content><![CDATA[<h1 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h1><blockquote>
<p>乐观锁：顾名思义，十分乐观！其总是认为不会出现问题，无论干什么都不去上锁！如果出现了问题，需要再次更新测试</p>
<p>悲观锁：顾名思义，十分悲观！其总是认为会出现问题，无论干什么都会上锁！</p>
</blockquote>
<a id="more"></a>

<h2 id="乐观锁实现方式："><a href="#乐观锁实现方式：" class="headerlink" title="乐观锁实现方式："></a>乐观锁实现方式：</h2><blockquote>
<ul>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时， set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新失败</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A线程</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- B线程</span></span><br><span class="line"><span class="comment">-- 若此时A线程需要执行但是被B线程抢先执行，这个时候version = 2，会导致A修改失败</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>


<h2 id="MybatisPlus的乐观锁插件"><a href="#MybatisPlus的乐观锁插件" class="headerlink" title="MybatisPlus的乐观锁插件"></a>MybatisPlus的乐观锁插件</h2><ol>
<li><p>数据库添加乐观锁（version）字段</p>
<p><img src="image-20210510094232362.png" alt="image-20210510094232362"></p>
</li>
</ol>
<ol start="2">
<li><p>实体类中添加对应字段，并添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span>    <span class="comment">// 乐观锁Version注解</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li><p>注册组件</p>
<p>旧版本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.yoga.usermanage.mapper&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>   新版本（3.4.2）使用</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将所有关于数据库的操作放置在同一个地方</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.yoga.usermanage.mapper&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="4">
<li><p>测试</p>
<blockquote>
<p>注：使用时主键id及乐观锁字段必不能为空</p>
</blockquote>
<p>成功测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       User user = userMapper.selectById(<span class="number">1390945262396645383L</span>);</span><br><span class="line">       user.setUsername(<span class="string">&quot;成功乐观锁&quot;</span>);</span><br><span class="line">       userMapper.updateById(user);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>   失败测试，模拟线程被插队</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 线程1 此时线程1 查询并修改了数据</span></span><br><span class="line">       User user1 = userMapper.selectById(<span class="number">1390982665840857090L</span>);</span><br><span class="line">       user1.setUsername(<span class="string">&quot;乐观锁测试1&quot;</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 模拟另外一个线程执行了插队操作</span></span><br><span class="line">       User user2 = userMapper.selectById(<span class="number">1390982665840857090L</span>);</span><br><span class="line">       user2.setUsername(<span class="string">&quot;乐观锁测试2&quot;</span>);</span><br><span class="line">       userMapper.updateById(user2);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 线程2修改完毕后才轮到线程1执行修改</span></span><br><span class="line">       <span class="comment">// 如果没有乐观锁，其就会覆盖插队线程的值</span></span><br><span class="line">       userMapper.updateById(user1);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>   可以看到被插队的线程的修改并没有成功</p>
<p>   <img src="image-20210510104948682.png" alt="image-20210510104948682"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码自动生成器</title>
    <url>/2021/05/11/java/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20MybatisPlus/3.%20%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>MyBatis-Plus 从 <code>3.0.3</code> 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-生成代码"><a href="#2-生成代码" class="headerlink" title="2. 生成代码"></a>2. 生成代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码生成器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建一个代码生成器对象</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 全局配置</span></span><br><span class="line">        <span class="comment">// 注：对象在 com.baomidou.mybatisplus.generator.AutoGenerator 包下</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">// 设置文件生产的位置</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        globalConfig.setOutputDir(projectPath + <span class="string">&quot;/user-manage/src/main/java&quot;</span>);</span><br><span class="line">        <span class="comment">// 作者信息</span></span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;xc&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否打开资源管理器，是否打开windows文件夹</span></span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 是否覆盖原来生成的，设置为true时，当数据库修改后再次运行即可覆盖原有的数据</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置service命名格式 %s 为类名</span></span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置Id生成策略</span></span><br><span class="line">        globalConfig.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">        <span class="comment">// 设置日期类型</span></span><br><span class="line">        globalConfig.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        globalConfig.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将配置项交给代码生成器对象</span></span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置数据源</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/book_manage?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 包的配置</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.yoga&quot;</span>);</span><br><span class="line">        <span class="comment">// 会拼接到parent后</span></span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;usermanage&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// 要映射的表名</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">// 表名命名格式  underline_to_camel 下滑线转驼峰命名</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// 列名命名格式</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">//        strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span></span><br><span class="line">        <span class="comment">// 自动配置lombok</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 逻辑删除字段</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动填充策略</span></span><br><span class="line">        TableFill create_time = <span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill update_time = <span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.UPDATE);</span><br><span class="line">        List&lt;TableFill&gt; tableFills = Arrays.asList(create_time, update_time);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">// 乐观锁配置</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 RestFul 驼峰命名</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 下划线命名</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        autoGenerator.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


































]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>代码自动生成器</tag>
      </tags>
  </entry>
  <entry>
    <title>代码自动生成器</title>
    <url>/2021/05/11/java/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20MybatisPlus/4.%20%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="MyBatis-Plus事务整合"><a href="#MyBatis-Plus事务整合" class="headerlink" title="MyBatis-Plus事务整合"></a>MyBatis-Plus事务整合</h1><a id="more"></a>

<h2 id="1-启动类或任意注有-Configuration的类上添加注解："><a href="#1-启动类或任意注有-Configuration的类上添加注解：" class="headerlink" title="1. 启动类或任意注有@Configuration的类上添加注解："></a>1. 启动类或任意注有@Configuration的类上添加注解：</h2><h2 id="EnableTransactionManagement-启动事务"><a href="#EnableTransactionManagement-启动事务" class="headerlink" title="@EnableTransactionManagement 启动事务"></a>@EnableTransactionManagement 启动事务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xatali.signplatform.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlConfig</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-方法上添加-Transactional"><a href="#2-方法上添加-Transactional" class="headerlink" title="2. 方法上添加 @Transactional"></a>2. 方法上添加 @Transactional</h2><h2 id="使用抛出RuntimeException进行回滚"><a href="#使用抛出RuntimeException进行回滚" class="headerlink" title="使用抛出RuntimeException进行回滚"></a>使用抛出RuntimeException进行回滚</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;addAndUpdate&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">addAndUpdate</span> <span class="params">(<span class="meta">@RequestBody</span> List&lt;SeparateInfo&gt; separateInfoList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行错误时，抛出RuntimeException</span></span><br><span class="line">    <span class="comment">// 此时事务将会执行并自动回滚</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ErrorConstants.SEPARATE_INFO_UPDATE_FAIL.getMsg());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行代码 2</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


































]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>代码自动生成器</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统唯一ID生成方案</title>
    <url>/2021/05/08/java/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20MybatisPlus/z.%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="转载自："><a href="#转载自：" class="headerlink" title="转载自："></a>转载自：</h1><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p>
<a id="more"></a>



<h1 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h1><p>系统唯一ID是我们在设计一个系统的时候常常会遇见的问题，也常常为这个问题而纠结。生成ID的方法有很多，适应不同的场景、需求以及性能要求。所以有些比较复杂的系统会有多个ID生成的策略。下面就介绍一些常见的ID生成策略。</p>
<h2 id="1-数据库自增长序列或字段"><a href="#1-数据库自增长序列或字段" class="headerlink" title="1. 数据库自增长序列或字段"></a>1. 数据库自增长序列或字段</h2><p>最常见的方式。利用数据库，全数据库唯一。</p>
<p>优点：</p>
<p>1）简单，代码方便，性能可以接受。</p>
<p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p>
<p>缺点：</p>
<p>1）不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</p>
<p>2）在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</p>
<p>3）在性能达不到要求的情况下，比较难于扩展。</p>
<p>4）如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</p>
<p>5）分表分库的时候会有麻烦。</p>
<p>优化方案：</p>
<p>1）针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1，4，7，10，Master2生成的是2,5,8,11 Master3生成的是 3,6,9,12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p>
<h2 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2. UUID"></a>2. UUID</h2><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p>
<p>优点：</p>
<p>1）简单，代码方便。</p>
<p>2）生成ID性能非常好，基本不会有性能问题。</p>
<p>3）全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</p>
<p>缺点：</p>
<p>1）没有排序，无法保证趋势递增。</p>
<p>2）UUID往往是使用字符串存储，查询的效率比较低。</p>
<p>3）存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</p>
<p>4）传输数据量大</p>
<p>5）不可读。</p>
<h2 id="3-UUID的变种"><a href="#3-UUID的变种" class="headerlink" title="3. UUID的变种"></a>3. UUID的变种</h2><p>1）为了解决UUID不可读，可以使用UUID to Int64的方法，即</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 根据GUID获取唯一数字序列</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">GuidToInt64</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = Guid.NewGuid().ToByteArray();</span><br><span class="line">    <span class="keyword">return</span> BitConverter.ToInt64(bytes, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>2）为了解决UUID无序的问题，NHibernate在其主键生成方式中提供了Comb算法（combined guid/timestamp）。保留GUID的10个字节，用另6个字节表示GUID生成的时间（DateTime）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt; </span></span><br><span class="line"><span class="comment">/// Generate a new &lt;see cref=&quot;Guid&quot;/&gt; using the comb algorithm. </span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt; </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Guid <span class="title">GenerateComb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] guidArray = Guid.NewGuid().ToByteArray();</span><br><span class="line"> </span><br><span class="line">    DateTime baseDate = <span class="keyword">new</span> DateTime(<span class="number">1900</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    DateTime now = DateTime.Now;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get the days and milliseconds which will be used to build    </span></span><br><span class="line">    <span class="comment">//the byte string    </span></span><br><span class="line">    TimeSpan days = <span class="keyword">new</span> TimeSpan(now.Ticks - baseDate.Ticks);</span><br><span class="line">    TimeSpan msecs = now.TimeOfDay;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Convert to a byte array        </span></span><br><span class="line">    <span class="comment">// Note that SQL Server is accurate to 1/300th of a    </span></span><br><span class="line">    <span class="comment">// millisecond so we divide by 3.333333    </span></span><br><span class="line">    <span class="keyword">byte</span>[] daysArray = BitConverter.GetBytes(days.Days);</span><br><span class="line">    <span class="keyword">byte</span>[] msecsArray = BitConverter.GetBytes((<span class="keyword">long</span>)</span><br><span class="line">      (msecs.TotalMilliseconds / <span class="number">3.333333</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Reverse the bytes to match SQL Servers ordering    </span></span><br><span class="line">    Array.Reverse(daysArray);</span><br><span class="line">    Array.Reverse(msecsArray);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Copy the bytes into the guid    </span></span><br><span class="line">    Array.Copy(daysArray, daysArray.Length - <span class="number">2</span>, guidArray,</span><br><span class="line">      guidArray.Length - <span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    Array.Copy(msecsArray, msecsArray.Length - <span class="number">4</span>, guidArray,</span><br><span class="line">      guidArray.Length - <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Guid(guidArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>用上面的算法测试一下，得到如下的结果：作为比较，前面3个是使用COMB算法得出的结果，最后12个字符串是时间序（统一毫秒生成的3个UUID），过段时间如果再次生成，则12个字符串会比图示的要大。后面3个是直接生成的GUID。</p>
<p><a href="http://images2015.cnblogs.com/blog/15700/201602/15700-20160227213048174-1443183768.png"><img src="https://images2015.cnblogs.com/blog/15700/201602/15700-20160227213048721-177386520.png" alt="ODX}_`4N5X$F93OAS~`8Z)C"></a></p>
<p>如果想把时间序放在前面，可以生成后改变12个字符串的位置，也可以修改算法类的最后两个Array.Copy。</p>
<h2 id="4-Redis生成ID"><a href="#4-Redis生成ID" class="headerlink" title="4. Redis生成ID"></a>4. Redis生成ID</h2><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。</p>
<p>可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1,2,3,4,5，然后步长都是5。各个Redis生成的ID为：</p>
<p>A：1,6,11,16,21</p>
<p>B：2,7,12,17,22</p>
<p>C：3,8,13,18,23</p>
<p>D：4,9,14,19,24</p>
<p>E：5,10,15,20,25</p>
<p>这个，随便负载到哪个机确定好，未来很难做修改。但是3-5台服务器基本能够满足器上，都可以获得不同的ID。但是步长和初始值一定需要事先需要了。使用Redis集群也可以方式单点故障的问题。</p>
<p>另外，比较适合使用Redis来生成每天从0开始的流水号。比如订单号=日期+当日自增长号。可以每天在Redis中生成一个Key，使用INCR进行累加。</p>
<p>优点：</p>
<p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p>
<p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p>
<p>缺点：</p>
<p>1）如果系统中没有Redis，还需要引入新的组件，增加系统复杂度。</p>
<p>2）需要编码和配置的工作量比较大。</p>
<h2 id="5-Twitter的snowflake算法（雪花算法）"><a href="#5-Twitter的snowflake算法（雪花算法）" class="headerlink" title="5. Twitter的snowflake算法（雪花算法）"></a>5. Twitter的snowflake算法（雪花算法）</h2><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。具体实现的代码可以参看<a href="https://github.com/twitter/snowflake%E3%80%82">https://github.com/twitter/snowflake。</a></p>
<p>C#代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> From: https://github.com/twitter/snowflake</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> An object that generates IDs.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This is broken into a separate class in case</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> we ever want to support multiple worker threads</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> per process</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdWorker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> workerId;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> datacenterId;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> twepoch = <span class="number">1288834974657L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> maxWorkerId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; (<span class="built_in">int</span>)workerIdBits);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> maxDatacenterId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; (<span class="built_in">int</span>)datacenterIdBits);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> workerIdShift = sequenceBits;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> sequenceMask = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; (<span class="built_in">int</span>)sequenceBits);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> lastTimestamp = <span class="number">-1L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">object</span> syncRoot = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span>(<span class="params"><span class="built_in">long</span> workerId, <span class="built_in">long</span> datacenterId</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// sanity check for workerId</span></span><br><span class="line">            <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="built_in">string</span>.Format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="built_in">string</span>.Format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">            <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">nextId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (syncRoot)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (timestamp &lt; lastTimestamp)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(<span class="built_in">string</span>.Format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lastTimestamp == timestamp)</span><br><span class="line">                &#123;</span><br><span class="line">                    sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                    <span class="keyword">if</span> (sequence == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sequence = <span class="number">0L</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; (<span class="built_in">int</span>)timestampLeftShift) | (datacenterId &lt;&lt; (<span class="built_in">int</span>)datacenterIdShift) | (workerId &lt;&lt; (<span class="built_in">int</span>)workerIdShift) | sequence;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="built_in">long</span> <span class="title">tilNextMillis</span>(<span class="params"><span class="built_in">long</span> lastTimestamp</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">long</span> timestamp = timeGen();</span><br><span class="line">            <span class="keyword">while</span> (timestamp &lt;= lastTimestamp)</span><br><span class="line">            &#123;</span><br><span class="line">                timestamp = timeGen();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> timestamp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="built_in">long</span> <span class="title">timeGen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">long</span>)(DateTime.UtcNow - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc)).TotalMilliseconds;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestIdWorker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashSet&lt;<span class="keyword">long</span>&gt; set = <span class="keyword">new</span> HashSet&lt;<span class="keyword">long</span>&gt;();</span><br><span class="line">            IdWorker idWorker1 = <span class="keyword">new</span> IdWorker(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            IdWorker idWorker2 = <span class="keyword">new</span> IdWorker(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(() =&gt; DoTestIdWoker(idWorker1, set));</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(() =&gt; DoTestIdWoker(idWorker2, set));</span><br><span class="line">            t1.IsBackground = <span class="keyword">true</span>;</span><br><span class="line">            t2.IsBackground = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            t1.Start();</span><br><span class="line">            t2.Start();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">30000</span>);</span><br><span class="line">                t1.Abort();</span><br><span class="line">                t2.Abort();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoTestIdWoker</span><span class="params">(IdWorker idWorker, HashSet&lt;<span class="keyword">long</span>&gt; set)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">                <span class="keyword">if</span> (!set.Add(id))</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;duplicate:&quot;</span> + id);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<p>snowflake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。</p>
<p>优点：</p>
<p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p>
<p>2）ID按照时间在单机上是递增的。</p>
<p>缺点：</p>
<p>1）在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p>
<h2 id="6-利用zookeeper生成唯一ID"><a href="#6-利用zookeeper生成唯一ID" class="headerlink" title="6. 利用zookeeper生成唯一ID"></a>6. 利用zookeeper生成唯一ID</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zookeeper主要通过其znode数据版本来生成序列号，可以生成32位和64位的数据版本号，客户端可以使用这个版本号来作为唯一的序列号。</span><br><span class="line">很少会使用zookeeper来生成唯一ID。主要是由于需要依赖zookeeper，并且是多步调用API，如果在竞争较大的情况下，需要考虑使用分布式锁。因此，性能在高并发的分布式环境下，也不甚理想。</span><br><span class="line"> </span><br><span class="line">7. MongoDB的ObjectId</span><br><span class="line">MongoDB的ObjectId和snowflake算法类似。它设计成轻量型的，不同的机器都能用全局唯一的同种方法方便地生成它。MongoDB 从一开始就设计用来作为分布式数据库，处理多个节点是一个核心要求。使其在分片环境中要容易生成得多。</span><br></pre></td></tr></table></figure>
<p>其格式如下：</p>
<p><img src="http://images.blogjava.net/blogjava_net/dongbule/46046/o_111.PNG" alt="img"></p>
<p>前4 个字节是从标准纪元开始的时间戳，单位为秒。时间戳，与随后的5 个字节组合起来，提供了秒级别的唯一性。由于时间戳在前，这意味着ObjectId 大致会按照插入的顺序排列。这对于某些方面很有用，如将其作为索引提高效率。这4 个字节也隐含了文档创建的时间。绝大多数客户端类库都会公开一个方法从ObjectId 获取这个信息。<br>接下来的3 字节是所在主机的唯一标识符。通常是机器主机名的散列值。这样就可以确保不同主机生成不同的ObjectId，不产生冲突。<br>为了确保在同一台机器上并发的多个进程产生的ObjectId 是唯一的，接下来的两字节来自产生ObjectId 的进程标识符（PID）。<br>前9 字节保证了同一秒钟不同机器不同进程产生的ObjectId 是唯一的。后3 字节就是一个自动增加的计数器，确保相同进程同一秒产生的ObjectId 也是不一样的。同一秒钟最多允许每个进程拥有2563（16 777 216）个不同的ObjectId。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>redis使用</title>
    <url>/2021/03/12/java/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="redis清理缓存"><a href="#redis清理缓存" class="headerlink" title="redis清理缓存"></a>redis清理缓存</h2><a id="more"></a>

<p>客户端登录redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis.cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>


<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis.cli</span><br></pre></td></tr></table></figure>


<p>windows使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 查看数据条数 </span><br><span class="line">dbsize </span><br><span class="line"></span><br><span class="line">// 清空数据 </span><br><span class="line">flushall </span><br><span class="line"></span><br><span class="line">// 查看是否清空 </span><br><span class="line">keys *</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis安装</title>
    <url>/2021/03/03/java/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Linux安装redis"><a href="#Linux安装redis" class="headerlink" title="Linux安装redis"></a>Linux安装redis</h2><a id="more"></a>

<blockquote>
<h3 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h3></blockquote>
<p><a href="https://redis.io/download">https://redis.io/download</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>可选择下载好以后上传服务器，或直接使用命令：</p>
<p><code>wget http://download.redis.io/releases/redis-5.0.7.tar.gz</code></p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p><code>tar -zvxf redis-5.0.7.tar.gz</code></p>
<h4 id="移动redis目录"><a href="#移动redis目录" class="headerlink" title="移动redis目录"></a><strong>移动redis目录</strong></h4><p>一般都会将redis目录放置到 /usr/local/redis目录，所以这里输入下面命令将目前在/root目录下的redis-5.0.7文件夹更改目录，同时更改文件夹名称为redis。</p>
<p><code>mv /root/redis-5.0.7 /usr/local/redis</code></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h4><p>cd到/usr/local/redis目录，输入命令make执行编译命令，接下来控制台会输出各种编译过程中输出的内容。</p>
<p><code>make</code></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a><strong>安装</strong></h4><p>输入以下命令</p>
<p><code>make PREFIX=/usr/local/redis install</code></p>
<blockquote>
<p>这里多了一个关键字 <strong>PREFIX=</strong> 这个关键字的作用是编译的时候用于指定程序存放的路径。比如我们现在就是指定了redis必须存放在/usr/local/redis目录。假设不添加该关键字Linux会将可执行文件存放在/usr/local/bin目录，库文件会存放在/usr/local/lib目录。配置文件会存放在/usr/local/etc目录。其他的资源文件会存放在usr/local/share目录。这里指定号目录也方便后续的卸载，后续直接rm -rf /usr/local/redis 即可删除redis。</p>
</blockquote>
<h4 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a><strong>启动redis</strong></h4><p>根据上面的操作已经将redis安装完成了。在目录/usr/local/redis 输入下面命令启动redis</p>
<p><code>./bin/redis-server&amp; ./redis.conf</code></p>
<p>上面的启动方式是采取后台进程方式，下面是采取显示启动方式(如在配置文件设置了daemonize属性为yes则跟后台进程方式启动其实一样)。</p>
<p><code>./bin/redis-server ./redis.conf</code></p>
<p>两种方式区别无非是有无带符号&amp;的区别。 redis-server 后面是配置文件，目的是根据该配置文件的配置启动redis服务。redis.conf配置文件允许自定义多个配置文件，通过启动时指定读取哪个即可。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>redis.conf配置文件</strong></p>
<p>在目录/usr/local/redis下有一个redis.conf的配置文件。我们上面启动方式就是执行了该配置文件的配置运行的。我么可以通过cat、vim、less等Linux内置的读取命令读取该文件。</p>
<p>也可以通过redis-cli命令进入redis控制台后通过CONFIG GET * 的方式读取所有配置项。 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">CONFIG GET *</span><br></pre></td></tr></table></figure>
<p><img src="image-20210303102754615.png" alt="image-20210303102754615"></p>
<p>回车确认后会将所有配置项读取出来，如下图</p>
<p><img src="2-1639211591.png" alt="img"></p>
<p>这里列举下比较重要的配置项</p>
<table>
<thead>
<tr>
<th>配置项名称</th>
<th>配置项值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>daemonize</td>
<td>yes、no</td>
<td>yes表示启用守护进程，默认是no即不以守护进程方式运行。其中Windows系统下不支持启用守护进程方式运行</td>
</tr>
<tr>
<td>port</td>
<td></td>
<td>指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td>bind</td>
<td></td>
<td>绑定的主机地址,如果需要设置远程访问则直接将这个属性备注下或者改为bind * 即可,这个属性和下面的protected-mode控制了是否可以远程访问 。</td>
</tr>
<tr>
<td>protected-mode</td>
<td>yes 、no</td>
<td>保护模式，该模式控制外部网是否可以连接redis服务，默认是yes,所以默认我们外网是无法访问的，如需外网连接rendis服务则需要将此属性改为no。</td>
</tr>
<tr>
<td>timeout</td>
<td>300</td>
<td>当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td>
</tr>
<tr>
<td>loglevel</td>
<td>debug、verbose、notice、warning</td>
<td>日志级别，默认为 notice</td>
</tr>
<tr>
<td>databases</td>
<td>16</td>
<td>设置数据库的数量，默认的数据库是0。整个通过客户端工具可以看得到</td>
</tr>
<tr>
<td>rdbcompression</td>
<td>yes、no</td>
<td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大。</td>
</tr>
<tr>
<td>dbfilename</td>
<td>dump.rdb</td>
<td>指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td>dir</td>
<td></td>
<td>指定本地数据库存放目录</td>
</tr>
<tr>
<td>requirepass</td>
<td></td>
<td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr>
<td>maxclients</td>
<td>0</td>
<td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息。</td>
</tr>
<tr>
<td>maxmemory</td>
<td>XXX <bytes></td>
<td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区。配置项值范围列里XXX为数值。</td>
</tr>
</tbody></table>
<blockquote>
<p>这里我要将daemonize改为yes，不然我每次启动都得在redis-server命令后面加符号&amp;，不这样操作则只要回到Linux控制台则redis服务会自动关闭，同时也将bind注释，将protected-mode设置为no。</p>
<p>这样启动后我就可以在外网访问了。</p>
</blockquote>
<h3 id="查看Redis是否正在运行"><a href="#查看Redis是否正在运行" class="headerlink" title="查看Redis是否正在运行"></a><strong>查看Redis是否正在运行</strong></h3><h4 id="1、采取查看进程方式"><a href="#1、采取查看进程方式" class="headerlink" title="1、采取查看进程方式"></a><strong>1、采取查看进程方式</strong></h4><p><code>ps -aux | grep redis</code></p>
<p>结果如下图：</p>
<p><img src="0-1407665728.png" alt="img"></p>
<h4 id="2、采取端口监听查看方式"><a href="#2、采取端口监听查看方式" class="headerlink" title="2、采取端口监听查看方式"></a><strong>2、采取端口监听查看方式</strong></h4><p><code>netstat -lanp | grep 6379</code></p>
<p>结果如下图：</p>
<p><img src="1-1025164897.png" alt="img"></p>
<h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a><strong>redis-cli</strong></h3><p>redis-cli是连接本地redis服务的一个命令，通过该命令可以连接redis的脚本控制台。如下图</p>
<p><img src="5-1345838995.png" alt="img"></p>
<p>输入exit可以退出redis脚本控制台</p>
<h4 id="关闭运行中的Redis服务"><a href="#关闭运行中的Redis服务" class="headerlink" title="关闭运行中的Redis服务"></a><strong>关闭运行中的Redis服务</strong></h4><p>输入redis-cli 进入控制台后输入命令shutdown即可关闭运行中的Redis服务了。如下图:</p>
<p><img src="8-1051623110.png" alt="img"></p>
<h4 id="远程连接不上问题"><a href="#远程连接不上问题" class="headerlink" title="远程连接不上问题"></a><strong>远程连接不上问题</strong></h4><p>如下图，已经开放了Redis服务的ip不为127.0.0.1,理论上远程客户端应该可以连接了，而且云服务器的端口号也在安全组里开放了。</p>
<p><img src="57-703255053.png" alt="img"></p>
<h2 id="Windows安装redis"><a href="#Windows安装redis" class="headerlink" title="Windows安装redis"></a>Windows安装redis</h2><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3>]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>数据库-redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloudAlibaba</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringCloudAlibaba/0.%20SpringCloudAlibaba/</url>
    <content><![CDATA[<h1 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h1><a id="more"></a>

<h2 id="1-演变"><a href="#1-演变" class="headerlink" title="1. 演变"></a>1. 演变</h2><p>单体应用架构 –&gt; 垂直应用架构 –&gt; 分布式架构 –&gt; SOA架构 –&gt; 微服务架构</p>
<h2 id="2-各种架构"><a href="#2-各种架构" class="headerlink" title="2. 各种架构"></a>2. 各种架构</h2><h3 id="2-1-单体应用架构-all-in-one"><a href="#2-1-单体应用架构-all-in-one" class="headerlink" title="2.1 单体应用架构  all in one"></a>2.1 单体应用架构  all in one</h3><p>所有应用都在一台服务器里边；</p>
<p>以电商平台为例：</p>
<p>电商平台会有订单、商品、用户等模块，这些模块都是放在一个应用中，部署时打成一个war包进行部署，<code>非常节约成本</code>；</p>
<img src="image-20210730093627442.png" alt="image-20210730093627442" style="zoom: 80%;" />

<p>但是随着用户量、业务量的增大，如订单、商品模块用户访问量非常大，但是其他模块访问量一般，对于单体应用来说，此时只能针对整个应用进行负载均衡，带来的成效很低，并且如果某个模块出现问题会导致整个应用都宕机无法使用；</p>
<h3 id="2-2-垂直应用架构"><a href="#2-2-垂直应用架构" class="headerlink" title="2.2 垂直应用架构"></a>2.2 垂直应用架构</h3><p><strong>分层</strong> 设计开发的应用，就符合 垂直应用架构。 主要体现：前后端分离、 Web框架(MVC)</p>
<p>通过 联想到 植被的垂直分布，就比较好理解——分层。</p>
<p><img src="826961-20161212192238886-1706117926.jpg" alt="img"></p>
<h3 id="2-3-分布式架构"><a href="#2-3-分布式架构" class="headerlink" title="2.3 分布式架构"></a>2.3 分布式架构</h3><pre><code> 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。
此时，用于提高业务复用及整合的 分布式服务框架(RPC) 是关键。</code></pre>
<h3 id="2-4-SOA架构"><a href="#2-4-SOA架构" class="headerlink" title="2.4 SOA架构"></a>2.4 SOA架构</h3><p>​    SOA是一种设计方法，其中包含多个服务，而服务之间通过配合最终会提供一系列功能。一个服务通常以独立的形式存在于操作系统进程中。服务之间通过网络调用，而非采用进程内调用的方式进行通信。</p>
<p>SOA粗暴理解：把系统按照实际业务，拆分成刚刚好大小的、合适的、独立部署的模块，每个模块之间相互独立。</p>
<p>比如现我有一个数据库，一个JavaWeb（或者PHP等）的网站客户端，一个安卓app客户端，一个IOS客户端。</p>
<p>现在我要从这个数据库中获取注册用户列表，如果不用SOA的设计思想，那么就会这样：JavaWeb里面写一个查询方法从数据库里面查数据然后在网页显示，安卓app里面写一个查询方法查询后在app上显示，IOS同样如此。这里就会出现查询方法重叠了，这样的坏处很明显了，三个地方都有相同的业务代码，要改三个地方都要改，而且要改的一模一样。当然问题不止这一个。</p>
<p>于是乎出现了这样的设计思想，比如用Java（或者是其他语言皆可）单独创建一个工程部署在一台服务器上，并且写一个方法（或称函数）执行上述查询操作，然后使其他人可以通过某种途径（可以是http链接，或者是基于socket的RPC调用）访问这个方法得到返回数据，返回的数据类型是通用的json或者xml数据，就是说把这个操作封装到一个工程中去，然后暴露访问的方式，形成“服务”。比如这里就是注册用户服务，而关于注册用户的所有相关增删改查操作这个服务都会提供方法。</p>
<p>这样一来，JavaWeb这边可以访问这个服务然后得到数据使用，安卓和IOS这里也可以通过这个服务得到数据。而且最重要的是，要修改关于注册用户的业务方法只要改这个服务就好了，很好的解耦。同理，其他业务比如商品、广告等业务都可以单独形成服务部署在单独服务器上。</p>
<p>还有就是一旦哪天突然有一堆人要注册，假设这堆人仅仅只是注册而不做其他事情，其他业务比如商品、广告服务等都不忙，唯独注册这个功能压力很大，而原有的一台部署了注册服务的服务器已经承受不了这么高的并发，这时候就可以单独集群部署这个注册服务，提供多几台服务器提供注册服务，而其他服务还不忙，那就维持原样。</p>
<p>当然，还有很多其他好处。</p>
<p>服务治理</p>
<p>什么是服务治理，就是当服务越来越多，调用方也越来越多的时候，它们之间的关系就变得非常混乱，需要对这些关系进行管理。举例，还是上面的例子，假如我有一个用户服务，一开始有调用方1和调用方2来使用这个服务，后来越来越多，将近上百个调用方，这个时候作为服务方，它只知道提供服务，却不知道具体为谁提供了服务。而对于开发者来说，知道这N多调用方和N多服务方之间的关系是非常重要的。</p>
<p>所以这个时候就需要能进行服务治理的框架，比如dubbo+zookeeper，比如SpringCloud，有了服务治理功能，我们就能清晰地看到服务被谁谁谁调用，谁谁谁调用了哪些服务，哪些服务是热点服务需要配置服务器集群，而对这个服务集群的负载均衡也是服务治理可以完成的重要功能之一。</p>
<p>这个时候就是更加完善一点的SOA了。</p>
<p>当然，还可以更进一步，加上服务监控跟踪等等等等之类的。</p>
<p>实际上SOA只是一种架构设计模式，而SOAP、REST、RPC就是根据这种设计模式构建出来的规范，其中SOAP通俗理解就是http+xml的形式，REST就是http+json的形式，RPC是基于socket的形式。上文提到的CXF就是典型的SOAP/REST框架，dubbo就是典型的RPC框架，而SpringCloud就是遵守REST规范的生态系统。</p>
<h3 id="2-5-微服务架构"><a href="#2-5-微服务架构" class="headerlink" title="2.5 微服务架构"></a>2.5 微服务架构</h3><p>将例子中的各个模块拆分成一个一个细小的服务，每一个服务其实就是使用SpringBoot创建出来的应用，这些应用都需要独立的进行部署</p>
<img src="image-20210730175947394.png" alt="image-20210730175947394" style="zoom:80%;" />

<p>此时就会出现远程的服务调用问题，如此时想要下订单，就需要先访问订单服务，而订单服务需要查询商品信息…因此各服务之间的调用链路是非常复杂的；</p>
<p>如何保证这个调用高效且可靠，Spring推出了Spring Cloud以微服务为核心的整体解决方案，SpringCloudAlibaba就是其中的一个解决方案；</p>
<p>Nacos + Ribbon/LoadBalancer + Feign + Sentinel + Seata + Skywalking</p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>SpringCloudAlibaba</category>
      </categories>
      <tags>
        <tag>SpringCloudAlibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot打war包部署</title>
    <url>/2021/04/29/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/%E6%89%93%E5%8C%85/1.%20springboot%E6%89%93war%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="将打包方式修改为war"><a href="#将打包方式修改为war" class="headerlink" title="将打包方式修改为war"></a>将打包方式修改为war</h2><p><code>&lt;packaging&gt;war&lt;/packaging&gt;</code></p>
<p>没有时，将其添加在properties 同级</p>
<h2 id="移除tomcat依赖或者将tomcat依赖scope改为provide"><a href="#移除tomcat依赖或者将tomcat依赖scope改为provide" class="headerlink" title="移除tomcat依赖或者将tomcat依赖scope改为provide"></a>移除tomcat依赖或者将tomcat依赖scope改为provide</h2><h3 id="移除tomcat依赖"><a href="#移除tomcat依赖" class="headerlink" title="移除tomcat依赖"></a>移除tomcat依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">　　	 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">&lt;!-- 移除嵌入式tomcat插件 --&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="或者（推荐）"><a href="#或者（推荐）" class="headerlink" title="或者（推荐）"></a>或者（推荐）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加servlet-api的依赖,用来打war包  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h2><blockquote>
<p>继承org.springframework.boot.web.servlet.support.SpringBootServletInitializer，实现configure方法：</p>
</blockquote>
<blockquote>
<p> 为什么继承该类，SpringBootServletInitializer源码注释：</p>
<p>Note that a WebApplicationInitializer is only needed if you are building a war file and deploying it. If you prefer to run an embedded web server then you won’t need this at all.</p>
<p>注意，如果您正在构建WAR文件并部署它，则需要WebApplicationInitializer。如果你喜欢运行一个嵌入式Web服务器，那么你根本不需要这个。</p>
</blockquote>
<p>启动类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>1.方式一，启动类继承SpringBootServletInitializer实现configure（推荐）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Application 为启动类名</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>2.方式二，新增加一个类继承SpringBootServletInitializer实现configure：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处的Application.class为带有@SpringBootApplication注解的启动类</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用外部Tomcat部署访问的时候，application.properties(或者application.yml)中配置的</p>
<p>server.port=</p>
<p>server.servlet.context-path=</p>
<p>将失效，需使用tomcat的端口，tomcat，webapps下项目名进行访问。为了防止应用上下文所导致的项目访问资源加载不到的问题，建议pom.xml文件中<code>&lt;build&gt;&lt;/build&gt;</code>标签下添加<code>&lt;finalName&gt;&lt;/finalName&gt;</code>标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应与application.properties(或application.yml)中context-path保持一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>war包名称<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="使用idea生成war包"><a href="#使用idea生成war包" class="headerlink" title="使用idea生成war包"></a>使用idea生成war包</h2><p>在idea菜单栏中找到Build—-&gt;build Arufacts生成war，生成的war包会在target文件夹中找到</p>
<h2 id="打开tomcat"><a href="#打开tomcat" class="headerlink" title="打开tomcat"></a>打开tomcat</h2><p>在地址栏输入服务器地址及端口号，进入之后会有如下页面</p>
<p>![img](1. springboot打war包部署/31135647793.jpeg)</p>
<p>点击manager app 需要输入用户名和密码</p>
<p>![img](1. springboot打war包部署/231135926636.png)</p>
<p>登录成功后在最下面会有个deploy按钮，先选择之前已经准备好的war包，点击deploy就会部署到tomcat服务器端，部署成功之后项目会自动运行。</p>
<p>如果可以远程到服务器的话可以像部署到本地tomcat一样，直接把war包放在webAPP下，然后启动tomcat就行了。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>测试类</title>
    <url>/2021/04/29/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%B1%BB/1.%20%E6%B5%8B%E8%AF%95%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="SpringBoot测试类"><a href="#SpringBoot测试类" class="headerlink" title="SpringBoot测试类"></a>SpringBoot测试类</h1><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.demoengin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.demoengin.springboot.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoEnginApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
























]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>测试类</category>
      </categories>
      <tags>
        <tag>测试类</tag>
      </tags>
  </entry>
  <entry>
    <title>报错</title>
    <url>/2021/04/29/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/%E6%8A%A5%E9%94%99/0.%20%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="搭建项目报错"><a href="#搭建项目报错" class="headerlink" title="搭建项目报错"></a>搭建项目报错</h1><a id="more"></a>

<p>使用idea自带模板创建项目时，可能碰上springboot依赖过高的情况报错</p>
<p>org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat</p>
<p>此时可将项目版本适当调低：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="java-lang-AbstractMethodError-null"><a href="#java-lang-AbstractMethodError-null" class="headerlink" title="java.lang.AbstractMethodError: null"></a>java.lang.AbstractMethodError: null</h1><p>项目中使用的依赖版本冲突！</p>
<p>在使用springcloud的时候运行报这个错,原因是版本冲突导致的,在idea中创建springcloud项目的时候,这里默认是${spring-cloud.version},但是如果你使用的是高版本的springcloud的话还好,不会有什么问题,但是当你把parent版本下调到2.1.0以下的时候,再使用一些组件比如eureka的时候就会发现报错了,就算添加依赖的时候明确指出了组件的版本号,它也不会跟据你的版本号下载,而是下载2.1.0的</p>
<h1 id="使用依赖注入时，注入内容不能使用static修饰，否则会无法注入"><a href="#使用依赖注入时，注入内容不能使用static修饰，否则会无法注入" class="headerlink" title="使用依赖注入时，注入内容不能使用static修饰，否则会无法注入"></a>使用依赖注入时，注入内容不能使用static修饰，否则会无法注入</h1>]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>vue使用</title>
    <url>/2021/03/23/java/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/vue/vue%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><a id="more"></a>

<p>el-select</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-select </span><br><span class="line">	<span class="comment">// 默认显示</span></span><br><span class="line">	placeholder=<span class="string">&quot;请选择档案分类&quot;</span> </span><br><span class="line">	<span class="comment">// 数据绑定</span></span><br><span class="line">	v-model=<span class="string">&quot;archivesType&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">	</span><br><span class="line">    &lt;el-option </span><br><span class="line">    	<span class="comment">// 选择框数据</span></span><br><span class="line">    	v-<span class="keyword">for</span>=<span class="string">&quot;item in filetypeList&quot;</span> </span><br><span class="line">    	<span class="comment">// key值最好为唯一</span></span><br><span class="line">    	:key=<span class="string">&quot;item.archivesClassifyId&quot;</span> </span><br><span class="line">    	<span class="comment">// 展示的内容</span></span><br><span class="line">    	:label=<span class="string">&quot;item.classifyName&quot;</span> </span><br><span class="line">    	<span class="comment">// 选择后提交到v-model的内容</span></span><br><span class="line">    	:value=<span class="string">&quot;item.archivesClassifyId&quot;</span>&gt;</span><br><span class="line">    &lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure>


<p>传event和值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@change=<span class="string">&quot;getExcelTemplate($event, item)&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="选择及修改下拉框"><a href="#选择及修改下拉框" class="headerlink" title="选择及修改下拉框"></a>选择及修改下拉框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;selectItemId&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">           <span class="attr">remote</span></span></span><br><span class="line"><span class="tag">           <span class="attr">reserve-keyword</span></span></span><br><span class="line"><span class="tag">           <span class="attr">allow-create</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:remote-method</span>=<span class="string">&quot;remoteMethod&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">change</span>=<span class="string">&quot;remoteMethodChange&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">placeholder</span>=<span class="string">&quot;请输入客户名称&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in showCustomers&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:key</span>=<span class="string">&quot;item.customerId&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:label</span>=<span class="string">&quot;item.customerName&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:value</span>=<span class="string">&quot;item.customerId&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
<th align="left">类型</th>
<th align="left">可选值</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">value / v-model</td>
<td align="left">绑定值</td>
<td align="left">boolean / string / number</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">multiple</td>
<td align="left">是否多选</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">disabled</td>
<td align="left">是否禁用</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">value-key</td>
<td align="left">作为 value 唯一标识的键名，绑定值为对象类型时必填</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">value</td>
</tr>
<tr>
<td align="left">size</td>
<td align="left">输入框尺寸</td>
<td align="left">string</td>
<td align="left">medium/small/mini</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">clearable</td>
<td align="left">是否可以清空选项</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">collapse-tags</td>
<td align="left">多选时是否将选中值按文字的形式展示</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">multiple-limit</td>
<td align="left">多选时用户最多可以选择的项目数，为 0 则不限制</td>
<td align="left">number</td>
<td align="left">—</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">select input 的 name 属性</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">autocomplete</td>
<td align="left">select input 的 autocomplete 属性</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">auto-complete</td>
<td align="left">下个主版本弃用</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">placeholder</td>
<td align="left">占位符</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">请选择</td>
</tr>
<tr>
<td align="left">filterable</td>
<td align="left">是否可搜索</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">allow-create</td>
<td align="left">是否允许用户创建新条目，需配合 <code>filterable</code> 使用</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">filter-method</td>
<td align="left">自定义搜索方法</td>
<td align="left">function</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">remote</td>
<td align="left">是否为远程搜索</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">remote-method</td>
<td align="left">远程搜索方法</td>
<td align="left">function</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">loading</td>
<td align="left">是否正在从远程获取数据</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">loading-text</td>
<td align="left">远程加载时显示的文字</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">加载中</td>
</tr>
<tr>
<td align="left">no-match-text</td>
<td align="left">搜索条件无匹配时显示的文字，也可以使用<code>slot=&quot;empty&quot;</code>设置</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">无匹配数据</td>
</tr>
<tr>
<td align="left">no-data-text</td>
<td align="left">选项为空时显示的文字，也可以使用<code>slot=&quot;empty&quot;</code>设置</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">无数据</td>
</tr>
<tr>
<td align="left">popper-class</td>
<td align="left">Select 下拉框的类名</td>
<td align="left">string</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">reserve-keyword</td>
<td align="left">多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词</td>
<td align="left">boolean</td>
<td align="left">—</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">default-first-option</td>
<td align="left">在输入框按下回车，选择第一个匹配项。需配合 <code>filterable</code> 或 <code>remote</code> 使用</td>
<td align="left">boolean</td>
<td align="left">-</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">popper-append-to-body</td>
<td align="left">是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false</td>
<td align="left">boolean</td>
<td align="left">-</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">automatic-dropdown</td>
<td align="left">对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单</td>
<td align="left">boolean</td>
<td align="left">-</td>
<td align="left">false</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>框架</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JSR303</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E7%8B%82%E7%A5%9E/1.%20JSR303-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="JSR303-数据校验"><a href="#JSR303-数据校验" class="headerlink" title="JSR303 - 数据校验"></a>JSR303 - 数据校验</h1><a id="more"></a>

<p>对对象中注入的参数进行格式校验</p>
<h2 id="注解内容："><a href="#注解内容：" class="headerlink" title="注解内容："></a>注解内容：</h2><blockquote>
<p>核心： @Pattern 正则表达式验证</p>
</blockquote>
<p><img src="20200525161753312.png" alt="在这里插入图片描述"></p>
<p><img src="20200525161900254.png" alt="在这里插入图片描述"></p>
<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><p>需要引入 javax.validation 和 hibernate-validator 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.validation/validation-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.18.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-对象"><a href="#2-对象" class="headerlink" title="2. 对象"></a>2. 对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 1. 开启数据校验</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 具体的数据校验注解</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="comment">// 1. 参数中添加 BindingResult 类，里边参数校验的结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">hello</span> <span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> Person person, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 自定义校验内容</span></span><br><span class="line">    <span class="comment">// 若存在参数校验错误</span></span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</span><br><span class="line">        List&lt;String&gt; messages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        allErrors.forEach(item -&gt; &#123;</span><br><span class="line">            messages.add(item.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> messages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






























]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>web开发</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E7%8B%82%E7%A5%9E/2.%20web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="要解决的问题："><a href="#要解决的问题：" class="headerlink" title="要解决的问题："></a>要解决的问题：</h1><a id="more"></a>

<ul>
<li>导入静态资源</li>
<li>首页</li>
<li>jsp、模板引擎thymeleaf</li>
<li>装配扩展SpringMVC</li>
<li>增删改查</li>
<li>拦截器</li>
<li>国际化</li>
</ul>
<h1 id="静态资源位置"><a href="#静态资源位置" class="headerlink" title="静态资源位置"></a>静态资源位置</h1><p>找到自动配置类 WebMvcAutoConfiguration</p>
<blockquote>
<p>webjars：可以使用maven的方式引入前端依赖<br>官网：<a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
</blockquote>
<p>资源下载的路径</p>
<p><img src="image-20210628184736510.png" alt="image-20210628184736510"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有配置关于Mvc参数</span></span><br><span class="line">    <span class="comment">// Default resource handling disabled 默认的资源失效</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若没配置则会在根目录下找 webjars</span></span><br><span class="line">        <span class="keyword">this</span>.addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 点击可看出，资源路径包括（优先级由高到底）：</span></span><br><span class="line">            <span class="comment">// &quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;</span></span><br><span class="line">            <span class="comment">// static：放置静态资源；public：放置公共资源；resources：放置上传的文件</span></span><br><span class="line">            registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ServletContextResource resource = <span class="keyword">new</span> ServletContextResource(<span class="keyword">this</span>.servletContext, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                registration.addResourceLocations(<span class="keyword">new</span> Resource[]&#123;resource&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><p>能不配置资源路径就不配置资源路径</p>
<h1 id="首页定制"><a href="#首页定制" class="headerlink" title="首页定制"></a>首页定制</h1><p>自定义图标</p>
<p><a href="https://www.cnblogs.com/nosouln/p/12624192.html">https://www.cnblogs.com/nosouln/p/12624192.html</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E7%8B%82%E7%A5%9E/3.%20thymeleaf/</url>
    <content><![CDATA[<h1 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h1><a id="more"></a>

<p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，我们来组装一些数据， 我们把这些数据找到。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎,不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎,他的这个语法更简单。而且呢，功能更强大。</p>
<p>配置信息位于 ThymeleafProperties 中</p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><blockquote>
<p>文档路径： G:\book\usingthymeleaf.pdf<br>网络路径：<a href="https://www.thymeleaf.org/documentation.html">https://www.thymeleaf.org/documentation.html</a></p>
</blockquote>
<h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-将页面放置在thymeleafs目录下"><a href="#2-将页面放置在thymeleafs目录下" class="headerlink" title="2. 将页面放置在thymeleafs目录下"></a>2. 将页面放置在thymeleafs目录下</h2><h2 id="添加命名空间"><a href="#添加命名空间" class="headerlink" title="添加命名空间"></a>添加命名空间</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="3-基础使用"><a href="#3-基础使用" class="headerlink" title="3. 基础使用"></a>3. 基础使用</h2><p>页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有的html元素都可以被thymeleaf替换接管（th:元素名）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">test</span> <span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;String:hello,thymeleaf&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;item:$&#123;list&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;item&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;item:$&#123;list&#125;&quot;</span>&gt;</span>[[item]]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E7%8B%82%E7%A5%9E/4.%20springmvc/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><a id="more"></a>

<blockquote>
<p>资料地址<br><a href="https://docs.spring.io/spring-boot/docs/2.4.8/reference/html/spring-boot-features.html#boot-features-spring-mvc">https://docs.spring.io/spring-boot/docs/2.4.8/reference/html/spring-boot-features.html#boot-features-spring-mvc</a></p>
</blockquote>
<h2 id="自定义视图解析器"><a href="#自定义视图解析器" class="headerlink" title="自定义视图解析器"></a>自定义视图解析器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现了视图解析器的类就可以看做视图解析器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>使用Search Everywhere查询 DispatcherServlet ，该类中有 doDispatch 方法，所有的请求都会经过这个方法：</p>
<p><img src="image-20210705185649501.png" alt="image-20210705185649501"></p>
<p>因此可以在此方法中打断点来验证</p>
<p>![image-20210706110854966](4. springmvc/image-20210706110854966.png)</p>
<h2 id="自定义跳转"><a href="#自定义跳转" class="headerlink" title="自定义跳转"></a>自定义跳转</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现了视图解析器的类就可以看做视图解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当访问 /admin 路径时，其会访问 test页面，并不会访问test接口</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/admin&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="注：不能添加注解-EnableWebMvc"><a href="#注：不能添加注解-EnableWebMvc" class="headerlink" title="注：不能添加注解 @EnableWebMvc"></a>注：不能添加注解 @EnableWebMvc</h2><p>查看 WebMvcAutoConfiguration ,该类标有注解<br>@ConditionalOnMissingBean({WebMvcConfigurationSupport.class})<br>意为，若存在WebMvcConfigurationSupport类则，WebMvc自动配置全部失效</p>
<p>![image-20210706133904479](4. springmvc/image-20210706133904479.png)</p>
<p>点击注解 @EnableWebMvc ，进入查看<br>其引入了一个类 DelegatingWebMvcConfiguration</p>
<p>![image-20210706133706094](4. springmvc/image-20210706133706094.png)</p>
<p>查看该类，这个类正是继承了 WebMvcConfigurationSupport </p>
<p>![image-20210706133731527](4. springmvc/image-20210706133731527.png)</p>
<blockquote>
<p>因此如果配置了注解 @EnableWebMvc 则关于 WebMvc 很多东西都会失效</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>注解和配置</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/0.%20%E6%B3%A8%E8%A7%A3%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><a id="more"></a>

<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表明这是SpringBoot主程序</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure>


<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置上传文件的大小"><a href="#配置上传文件的大小" class="headerlink" title="配置上传文件的大小"></a>配置上传文件的大小</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure>


<h2 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目相关配置</span></span><br><span class="line"><span class="attr">base:</span></span><br><span class="line">  <span class="comment"># 名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">question-Bank</span></span><br><span class="line">  <span class="comment"># 版本</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># 版权年份</span></span><br><span class="line">  <span class="attr">copyrightYear:</span> <span class="number">2021</span></span><br><span class="line">  <span class="comment"># 实例演示开关</span></span><br><span class="line">  <span class="attr">demoEnabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文件路径 示例（ Windows配置D:/wendu/uploadPath，Linux配置 /home/wendu/uploadPath）</span></span><br><span class="line">  <span class="attr">profile:</span> <span class="string">./file</span></span><br><span class="line">  <span class="comment"># 获取ip地址开关</span></span><br><span class="line">  <span class="attr">addressEnabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 服务器的HTTP端口，默认为80</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># 应用的访问路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="comment"># tomcat的URI编码</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># tomcat最大线程数，默认为200</span></span><br><span class="line">    <span class="attr">max-threads:</span> <span class="number">800</span></span><br><span class="line">    <span class="comment"># Tomcat启动初始化的线程数，默认值25</span></span><br><span class="line">    <span class="attr">min-spare-threads:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>


<h2 id="静态资源配置"><a href="#静态资源配置" class="headerlink" title="静态资源配置"></a>静态资源配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="comment"># 访问静态资源时使用的映射，默认为/**，配置后会导致welcome配置失效</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="comment"># 静态资源允许存放的位置，只有存放在以下位置才能被找到</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha</span>, <span class="string">classpath:/heihei</span>]</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>web开发</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/0.%20%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="SpringBoot的单例和多例如何选择"><a href="#SpringBoot的单例和多例如何选择" class="headerlink" title="SpringBoot的单例和多例如何选择"></a>SpringBoot的单例和多例如何选择</h1><a id="more"></a>

<p> 单例多例需要搞明白两个问题： </p>
<ol>
<li>什么是单例多例； </li>
<li>如何产生单例多例；</li>
<li>为什么要用单例多例 </li>
<li>什么时候用单例，什么时候用多例。</li>
</ol>
<ol>
<li>什么是单例多例: </li>
</ol>
<p>所谓单例就是所有的请求都用一个对象来处理，我们称之为Full模式，比如我们常用的service和dao层的对象通常都是单例的。而多例则指每个请求用一个新的对象来处理，我们称之为Lite模式，比如action;</p>
<ol start="2">
<li><p>如何产生单例多例: </p>
<p>单例在spring中是默认的，如果要产生多例，则在配置文件的bean中添加scope=”prototype”，或者在springboot中的MyConfig类的@Configuration()注解中添加proxyBeanMethods = false。</p>
</li>
<li><p>为什么用单例多例： </p>
<p>之所以用单例，是因为没必要每个请求都新建一个对象，这样子既浪费CPU又浪费内存；</p>
<p>之所以用多例，是为了防止并发问题；即一个请求改变了对象的状态，此时对象又处理另一个请求，而之前请求对对象状态的改变导致了对象对另一个请求做了错误的处理； </p>
<p>用单例和多例的标准只有一个： 当对象含有可改变的状态时（更精确的说就是在实际应用中该状态会改变），或类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断，即多例；当类组件之间有依赖关系，方法会被调用得到之前单实例组件时，用Full模式，即单例。</p>
</li>
<li><p>何时用单例？</p>
<p>1、需要频繁实例化然后销毁的对象。<br>2、创建对象时耗时过多或者耗资源过多，但又经常用到的对象。<br>3、有状态的工具类对象。<br>4、频繁访问数据库或文件的对象。<br>5、其他要求只有一个对象的场景。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础入门</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/1.%20SpringBoot%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Spring和SpringBoot"><a href="#Spring和SpringBoot" class="headerlink" title="Spring和SpringBoot"></a>Spring和SpringBoot</h1><a id="more"></a>

<blockquote>
<p>参考博客：<a href="https://www.yuque.com/atguigu/springboot">https://www.yuque.com/atguigu/springboot</a></p>
</blockquote>
<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1. Spring"></a>1. Spring</h2><h3 id="1-1-Spring介绍"><a href="#1-1-Spring介绍" class="headerlink" title="1.1 Spring介绍"></a>1.1 Spring介绍</h3><blockquote>
<p>也可以称为SpringFramework</p>
</blockquote>
<p><img src="image-20210707190259223.png" alt="image-20210707190259223"></p>
<p>Microservices：微服务开发</p>
<p>每个应用随着时间推移都可能会成长为一个大型应用，如果将所有的模块代码全部写在一个项目里边，是不合适的，我们应该把这些模块拆分成一个一个微小的功能模块，每一个微小的功能模块称为是微服务。</p>
<p>Reactive：响应式编程</p>
<p>响应式编程基于异步非阻塞的方式，我们可以通过在每个应用之间构建一个异步数据流的方式，数据流允许占用少量服务器的线程、CPU资源就可以构建一个<code>高吞吐量，高并发</code>的应用。</p>
<p>Cloud：Spring可以用来做分布式云开发</p>
<p>Web app：做web开发</p>
<p>Serverless：无服务开发（FaaS，Function as a Service，”功能即服务”）</p>
<p>Event Driven：事件驱动</p>
<p>Spring可以将整个的分布式系统，构建出一个实时的streaming data（数据流），有了这个实时数据流以后就可以通过响应式的方式，让系统占用少量的资源就能完成高吞吐量的业务。</p>
<p>Batch：批处理业务</p>
<h3 id="1-2-Spring5重大升级"><a href="#1-2-Spring5重大升级" class="headerlink" title="1.2 Spring5重大升级"></a>1.2 Spring5重大升级</h3><h4 id="1-2-1-响应式编程"><a href="#1-2-1-响应式编程" class="headerlink" title="1.2.1 响应式编程"></a>1.2.1 响应式编程</h4><p>其中包含了两套的技术栈</p>
<ol>
<li>Reactive Stack 响应式编程栈</li>
<li>Servlet Stack</li>
</ol>
<h4 id="1-2-2-适配器-Template"><a href="#1-2-2-适配器-Template" class="headerlink" title="1.2.2 适配器 Template"></a>1.2.2 适配器 Template</h4><p>如：</p>
<p>一个接口，有方法：1、2、3、4、5，</p>
<p>此时A类仅用到了方法1、2，但是如果A类直接继承该接口时，即使不用方法3、4、5，这三个方法也是必须实现的</p>
<p>Spring底层会大量使用<code>适配器模式（Template）</code>，在Template中，其将接口中的所有的方法先全部进行默认实现，实现成一个空方法，此时A类仅用方法1、2时，只需要实现方法1、2。</p>
<p>而JAVA8中有了接口的默认实现后，适配器就没用了，因此适应JAVA8新特性</p>
<h2 id="2-SpringBoot"><a href="#2-SpringBoot" class="headerlink" title="2. SpringBoot"></a>2. SpringBoot</h2><blockquote>
<p>SpringBoot是整合Spring技术栈的一站式框架<br>SpringBoot是简化Spring技术栈的快速开发脚手架</p>
</blockquote>
<img src="image-20210707193042662.png" alt="image-20210707193042662" style="zoom:50%;" />

<p>Spring拥有一套非常庞大的生态体系，但是使用Spring整合其他框架时却写需要非常多且复杂的配置文件，为了<code>简化配置问题</code>，出现了SpringBoot。</p>
<p>SpringBoot是一个高层框架，其底层是Spring框架。</p>
<blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
<p>能快速创建出生产级别的Spring应用</p>
</blockquote>
<h3 id="2-1-SpringBoot优点"><a href="#2-1-SpringBoot优点" class="headerlink" title="2.1 SpringBoot优点"></a>2.1 SpringBoot优点</h3><ul>
<li><p>Create stand alone Spring applications</p>
<ul>
<li>创建独立Spring应用</li>
</ul>
</li>
<li><p>Embed Tomcat, Jetty or Under tow directly (no need to deploy WAR files)</p>
<ul>
<li>内嵌web服务器</li>
</ul>
</li>
<li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p>
<blockquote>
<p>使用Spring开发时，由于场景需要可能需要导入各种各样的jar包，而且多个jar包之间可能会有版本冲突，使用SpringBoot后仅需添加该场景需要的starter，就会将所需的jar包都导入进来，并控制好版本。</p>
</blockquote>
<ul>
<li>自动starter依赖， 简化构建配置</li>
</ul>
</li>
<li><p>Automatically configure Spring and 3rd party libraries whenever possible</p>
<ul>
<li>自动配置Spring以及第三方功能</li>
</ul>
</li>
<li><p>Provide production ready features such as metrics, health checks, and extemalized configuration</p>
<ul>
<li>提供生产级别的监控、健康检查及外部化配置</li>
</ul>
</li>
<li><p>Absolutely no code generation and no requirement for XML configuration</p>
<ul>
<li>无代码生成、无需编写XML</li>
</ul>
</li>
</ul>
<h3 id="2-2-SpringBoot缺点"><a href="#2-2-SpringBoot缺点" class="headerlink" title="2.2 SpringBoot缺点"></a>2.2 SpringBoot缺点</h3><ul>
<li>版本迭代快，需要时刻关注变化</li>
<li>封装太深，内部原理复杂，不容易精通</li>
</ul>
<h1 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h1><h2 id="1-微服务"><a href="#1-微服务" class="headerlink" title="1. 微服务"></a>1. 微服务</h2><blockquote>
<p>介绍：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a><br>中文介绍：<a href="http://blog.cuicc.com/blog/2015/07/22/microservices/">http://blog.cuicc.com/blog/2015/07/22/microservices/</a></p>
</blockquote>
<ul>
<li><p>微服务是一种架构风格</p>
</li>
<li><p>一个应用拆分为一组小型服务</p>
</li>
<li><p>每个服务运行在自己的进程内，也就是可独立部署和升级</p>
</li>
<li><p>服务之间使用轻量级HTTP交互</p>
</li>
<li><p>服务围绕业务功能拆分</p>
</li>
<li><p>可以由全自动部署机制独立部署</p>
</li>
<li><p>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</p>
</li>
</ul>
<h2 id="2-分布式"><a href="#2-分布式" class="headerlink" title="2. 分布式"></a>2. 分布式</h2><h3 id="2-1-分布式的困难"><a href="#2-1-分布式的困难" class="headerlink" title="2.1 分布式的困难"></a>2.1 分布式的困难</h3><ul>
<li><p>远程调用（使用http进行交互）</p>
</li>
<li><p>服务发现（查询可用的服务器）</p>
</li>
<li><p>负载均衡</p>
</li>
<li><p>服务容错（单体服务出错基本为代码问题，出错可以抛出异常；分布式出错可能是代码问题，也可能是网络问题，因此应对不同的错误需要有不同的错误处理）</p>
</li>
<li><p>配置管理（添加配置中心(Zookeeper)，将配置文件放在配置中心中，一处修改多处生效）</p>
</li>
<li><p>服务监控（多个服务以及云平台的资源消耗和健康状况）</p>
</li>
<li><p>链路追踪（一个复杂的业务流程可能需要连续调用多个微服务，我们需要记录一个完整业务逻辑涉及的每一个微服务的运行状态，再通过可视化<strong>链路图</strong>展现，帮助软件工程师在系统出错时分析解决问题，常见的解决方案有Zipkin，SkyWalking。）</p>
</li>
<li><p>日志管理（微服务架构默认将应用日志<strong>分散保存</strong>在每一个微服务节点上，当系统进行用户行为分析、数据统计时必须收集<strong>所有节点</strong>日志数据，非常不方便。这时候我们需要一个独立的<strong>日志平台</strong>，收集所有节点的日志数据并可方便对其进行汇总分析，常见的解决方案有ELK，EFK。）</p>
</li>
<li><p>任务调度</p>
</li>
</ul>
<h3 id="2-2-分布式解决方案"><a href="#2-2-分布式解决方案" class="headerlink" title="2.2 分布式解决方案"></a>2.2 分布式解决方案</h3><p><img src="1599799119457-841ef47a-6585-4ca4-8e3d-8298e796012c.png" alt="img"></p>
<p>想要构建出一个分布式应用：</p>
<p>可以使用SpringBoot快速的构建出一个应用，</p>
<p>在这个应用中微服务模块众多，接下来使用SpringCloud将他们网状的互联互调起来，</p>
<p>然后这些网状之间的数据流可以使用SpringCloud Data Flow做成响应式数据流</p>
<h3 id="2-3-云原生（服务部署问题）"><a href="#2-3-云原生（服务部署问题）" class="headerlink" title="2.3 云原生（服务部署问题）"></a>2.3 云原生（服务部署问题）</h3><h4 id="上云困难"><a href="#上云困难" class="headerlink" title="上云困难"></a>上云困难</h4><ul>
<li><p>服务自愈（其中某个服务挂掉之后，是否会在其他地方重新拉起一个该服务）</p>
</li>
<li><p>弹性伸缩（流量高峰时自动扩充，非高峰时又自动下线）</p>
</li>
<li><p>服务隔离（在同一台服务器上部署的多个服务之间不会相互干扰）</p>
</li>
<li><p>自动化部署</p>
</li>
<li><p>灰度发布（服务更新时，先把服务部署在其中一两台上看运行效果，没有问题了再慢慢全部升级）</p>
</li>
<li><p>流量治理</p>
</li>
</ul>
<h4 id="上云解决"><a href="#上云解决" class="headerlink" title="上云解决"></a>上云解决</h4><p><img src="1599563498261-8b0b4d86-bd9b-49a3-aefc-89696a375dcb.png" alt="img"></p>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><h2 id="官方PDF下载"><a href="#官方PDF下载" class="headerlink" title="官方PDF下载"></a>官方PDF下载</h2><p><img src="image-20210709135923002.png" alt="image-20210709135923002"></p>
<p><img src="image-20210709135948960.png" alt="image-20210709135948960"></p>
<h2 id="SpringBoot文档"><a href="#SpringBoot文档" class="headerlink" title="SpringBoot文档"></a>SpringBoot文档</h2><p><img src="image-20210709142127822.png" alt="image-20210709142127822"></p>
<h2 id="项目发布日志"><a href="#项目发布日志" class="headerlink" title="项目发布日志"></a>项目发布日志</h2><p><img src="image-20210709142633036.png" alt="image-20210709142633036"></p>
<h1 id="使用入门HelloWorld"><a href="#使用入门HelloWorld" class="headerlink" title="使用入门HelloWorld"></a>使用入门HelloWorld</h1><h2 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1. 系统要求"></a>1. 系统要求</h2><ul>
<li>java8 &amp; 兼容java14</li>
<li>Maven 3.3 + </li>
<li>idea 2019.1.2 +</li>
</ul>
<h2 id="2-创建SpringBoot项目"><a href="#2-创建SpringBoot项目" class="headerlink" title="2. 创建SpringBoot项目"></a>2. 创建SpringBoot项目</h2><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入springboot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 web starter --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其中包括：web、webmvc、tomcat等依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简化打包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-2-添加启动类"><a href="#2-2-添加启动类" class="headerlink" title="2.2 添加启动类"></a>2.2 添加启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication：声明这是一个SpringBoot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动SpringBoot SpringApplication.run </span></span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-3-整合配置文件"><a href="#2-3-整合配置文件" class="headerlink" title="2.3 整合配置文件"></a>2.3 整合配置文件</h3><p>resources/application.yml</p>
<p>官方配置文档</p>
<p>![image-20210622104558107](0. SpringBoot基础入门/image-20210622104558107.png)</p>
<p>![image-20210622104659942](0. SpringBoot基础入门/image-20210622104659942.png)</p>
<h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><h2 id="1-SpringBoot特点"><a href="#1-SpringBoot特点" class="headerlink" title="1. SpringBoot特点"></a>1. SpringBoot特点</h2><h3 id="1-1-依赖管理"><a href="#1-1-依赖管理" class="headerlink" title="1.1 依赖管理"></a>1.1 依赖管理</h3><ul>
<li><p><strong>父项目做依赖管理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父项目的父项目 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在这之中声明了开发中几乎所有用到的jar包的版本号 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动版本仲裁机制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.16.2<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>开发导入starter场景启动器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. spring-boot-starter-* ： * 就代表某种场景</span><br><span class="line">2. 只要引入starter，这个场景所有的常用的依赖都会引入</span><br><span class="line">3. SpringBoot支持的所有starter：</span><br><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</span><br><span class="line">4. *-spring-boot-starter 一般都是第三方提供</span><br><span class="line">5. 所有场景启动器最底层的依赖（随便点进一个场景中即可看到）</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>无需依赖版本号，自动版本仲裁</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">只要 spring-boot-dependencies 中声明的依赖，引入时都不用写版本号</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="注-若对自动版本仲裁机制中提供的版本不满意时"><a href="#注-若对自动版本仲裁机制中提供的版本不满意时" class="headerlink" title="注. 若对自动版本仲裁机制中提供的版本不满意时"></a>注. 若对自动版本仲裁机制中提供的版本不满意时</h3><p>如：需要调整logback的版本</p>
<p>![image-20210713092518565](0. SpringBoot基础入门/image-20210713092518565.png)</p>
<p>此时可以在pom文件中添加properties标签，里边标签对应 自动版本仲裁机制 中的标签，版本号为自身想要的版本号</p>
<p>![image-20210713092804298](0. SpringBoot基础入门/image-20210713092804298.png)</p>
<h3 id="1-2-自动装配"><a href="#1-2-自动装配" class="headerlink" title="1.2 自动装配"></a>1.2 自动装配</h3><ul>
<li><p>自动配置Tomcat</p>
<ul>
<li>引入tomcat依赖 spring-boot-starter-web 中就有引用tomcat场景</li>
<li>配置tomcat</li>
</ul>
</li>
<li><p>自动配置好SpringMVC  也是在 spring-boot-starter-web 中引入</p>
<ul>
<li>引入SpringMVC全套组件</li>
<li>自动配好SpringMVC常用组件（功能）</li>
</ul>
</li>
<li><p>自动配置好Web常见功能，如：字符编码问题</p>
<ul>
<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>
</ul>
</li>
<li><p>默认的包结构</p>
<ul>
<li>主程序（启动类）所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>
<li>无需添加包扫描的配置</li>
<li>若非要将组件放置在主程序（启动类）父级或更高级上，需要配置默认扫描包的位置<code>@SpringBootApplication(scanBasePackages=&quot;com&quot;)</code>或<code>@ComponentScan</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line">相当于</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure></li>
<li><p>各种配置拥有默认值</p>
<ul>
<li><p>默认配置最终都是映射到XXXProperties</p>
</li>
<li><p>配置文件的值最终都会绑定到某个类上，这个类会在容器中创建对象</p>
</li>
</ul>
</li>
<li><p>按需加载所有自动配置项</p>
<ul>
<li>非常多的starter</li>
<li>引入了哪个场景这个场景的自动配置才会启动</li>
<li>SpringBoot所有的自动配置功能都在spring-boot-autoconfigure中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">进入</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其中依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">再其中引用了</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>






















</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/2.%20%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h1><a id="more"></a>

<p>告诉SpringBoot这是一个配置类</p>
<h2 id="1-给容器中添加组件"><a href="#1-给容器中添加组件" class="headerlink" title="1. 给容器中添加组件"></a>1. 给容器中添加组件</h2><p>容器中的组件默认为单例的</p>
<h3 id="1-0-Bean注解使用"><a href="#1-0-Bean注解使用" class="headerlink" title="1.0 Bean注解使用"></a>1.0 Bean注解使用</h3><p>文件上传解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个方法的意思为：如果用户配置有文件上传解析器，但是解析器名称不为multipartResolver</span></span><br><span class="line"><span class="comment">// 此时这个方法就会获取容器中的文件上传解析器然后返回，相当于仅改了组件的名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 容器中有MultipartResolver组件</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class="line"><span class="comment">// 容器中没有multipartResolver名字的组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;multipartResolver&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// @Bean标注的方法的参数，是从容器中获取的</span></span><br><span class="line">   <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">   <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="1-1-添加组件"><a href="#1-1-添加组件" class="headerlink" title="1.1 添加组件"></a>1.1 添加组件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 告诉SpringBoot这是一个配置类，相当于配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 给容器中添加组件，以方法名作为组件名，返回类型就是组件类型，返回的值就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>验证方式：在主程序中打印容器中是否有注入的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">        String[] beanDefinitionNames = run.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : beanDefinitionNames) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>从容器中获取组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">        <span class="comment">// 获取名称为 zhangsan 的组件</span></span><br><span class="line">        Object zhangsan = run.getBean(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过类型获取</span></span><br><span class="line">        Object zhangsan1 = run.getBean(User.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 两者组合获取</span></span><br><span class="line">        Object zhangsan2 = run.getBean(<span class="string">&quot;zhangsan&quot;</span>, User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="1-2-注解配置"><a href="#1-2-注解配置" class="headerlink" title="1.2 注解配置"></a>1.2 注解配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(</span></span><br><span class="line"><span class="meta">    // 指定组件名称</span></span><br><span class="line"><span class="meta">    name = &quot;zhangsan&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>


<h3 id="1-3-从容器中获取的组件默认是单实例的"><a href="#1-3-从容器中获取的组件默认是单实例的" class="headerlink" title="1.3 从容器中获取的组件默认是单实例的"></a>1.3 从容器中获取的组件默认是单实例的</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">        Object zhangsan1 = run.getBean(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        Object zhangsan2 = run.getBean(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;user-----:&quot;</span>);</span><br><span class="line">        System.out.println(zhangsan1 == zhangsan2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-配置项"><a href="#2-配置项" class="headerlink" title="2. 配置项"></a>2. 配置项</h2><h3 id="proxyBeanMethods-代理对象方法，默认为true"><a href="#proxyBeanMethods-代理对象方法，默认为true" class="headerlink" title="proxyBeanMethods 代理对象方法，默认为true"></a>proxyBeanMethods 代理对象方法，默认为true</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">        <span class="comment">// 代理对象方法</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        <span class="comment">// MyConfig:com.example.demo.config.MyConfig$$EnhancerBySpringCGLIB$$e63c8da0@5f96f6a2</span></span><br><span class="line">        <span class="comment">// 可以看出注有@Configuration的类会被SpringCGLIB增强</span></span><br><span class="line">        System.out.print(<span class="string">&quot;MyConfig:&quot;</span> + bean);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此时未配置 proxyBeanMethods，直接调用创建组件的方法</span></span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        User user2 = bean.user01();</span><br><span class="line">        System.out.print(<span class="string">&quot;userCompare:&quot;</span>);</span><br><span class="line">        <span class="comment">// userCompare:true</span></span><br><span class="line">        <span class="comment">// 当proxyBeanMethods = true时，调用创建组件的方法时，</span></span><br><span class="line">        <span class="comment">// 并不会直接调用到创建组件的方法，而是会调用到代理方法，</span></span><br><span class="line">        <span class="comment">// 代理方法中先验证容器中是否有这个组件，</span></span><br><span class="line">        <span class="comment">// 如果没有则生成该组件，如果有则不生成</span></span><br><span class="line">        <span class="comment">// 用来保证组件单实例</span></span><br><span class="line">        System.out.println(user1 == user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="组件依赖"><a href="#组件依赖" class="headerlink" title="组件依赖"></a>组件依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">// 当一个组件需要用到另外一个组件时，称为组件依赖</span></span><br><span class="line">        <span class="comment">// 此时就需要保证被依赖的组件是单例模式的即proxyBeanMethods=true</span></span><br><span class="line">        <span class="comment">// 在高版本SpringBoot中proxyBeanMethods为false时，</span></span><br><span class="line">        <span class="comment">// 是不允许组件依赖的，会报错</span></span><br><span class="line">        user.setDog(dog());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;dog&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog(<span class="string">&quot;黑子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Full-proxyBeanMethods-true-和-Lite-proxyBeanMethods-false-模式"><a href="#Full-proxyBeanMethods-true-和-Lite-proxyBeanMethods-false-模式" class="headerlink" title="Full(proxyBeanMethods=true) 和 Lite(proxyBeanMethods=false) 模式"></a>Full(proxyBeanMethods=true) 和 Lite(proxyBeanMethods=false) 模式</h3><blockquote>
<p>Full：全模式，该模式中，每次添加组件时都会进行验证，因此项目启动慢<br>Lite：轻量级模式，该模式中，不需要验证，启动快</p>
</blockquote>
<h1 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>给容器中自动创建出写入的类型的参数</p>
<p>需要放置在组件类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看</span></span><br><span class="line">String[] beanNamesForType = run.getBeanNamesForType(User.class);</span><br><span class="line"><span class="keyword">for</span> (String bean : beanNamesForType) &#123;</span><br><span class="line">    <span class="comment">// 使用@Import注入的组件名称为组件带包名全名</span></span><br><span class="line">    <span class="comment">// com.example.demo.entity.User</span></span><br><span class="line">    System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h1><p>条件配置：满足Conditional指定的条件，则进行组件注入</p>
<p><img src="image-20210722141026143.png" alt="image-20210722141026143"></p>
<p>如：</p>
<p>@ConditionalOnBean 当容器中存在指定的Bean时，则给容器中注入某个组件</p>
<p>@ConditionalOnMissingBean 当容器中不存在指定Bean时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;zhangsan&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(value = Dog.class, name = &quot;dog1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setDog(dog());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Bean(name=&quot;dog1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dog <span class="title">dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dog(<span class="string">&quot;黑子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看是否存在 zhangsan 组件</span></span><br><span class="line"><span class="keyword">boolean</span> zhangsan = run.containsBean(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">System.out.println(zhangsan); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>


<p>验证是否开启</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty(prefix = <span class="meta-string">&quot;hello&quot;</span>, value = <span class="meta-string">&quot;enable&quot;</span>, matchIfMissing = true)</span></span><br></pre></td></tr></table></figure>


<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote>
<p><a href="https://blog.csdn.net/gottst0113/article/details/80978966">https://blog.csdn.net/gottst0113/article/details/80978966</a></p>
</blockquote>
<p>prefix 前缀，一般指什么功能模块，如aop的：prefix = “spring.aop”</p>
<p>name 属性名称，如aop的：auto</p>
<p>value 整体属性名，相当于 prefix + name </p>
<p>matchifmissing</p>
<p>​    当matchIfMissing = true时，即使没有该属性也会加载正常</p>
<p>​    如： @ConditionalOnProperty(prefix = “spring.aop”, name = “auto”, havingValue = “true”, matchIfMissing = true)</p>
<p>​    即使没有配置spring.aop.auto 属性，也认为这个属性为true</p>
<h1 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h1><p>当其他人或第三方组件中仍然采用的是较为老旧的方式（配置xml的方式）引入组件时</p>
<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.demo.entity.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(value = &quot;classpath:bean/bean.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">        <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        System.out.println(haha);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h1><p>获取配置文件中的内容，只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heizi</span></span><br></pre></td></tr></table></figure>


<h2 id="使用方式一"><a href="#使用方式一" class="headerlink" title="使用方式一"></a>使用方式一</h2><p>@ConfigurationProperties使用前提：该对象为一个组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="使用方式二"><a href="#使用方式二" class="headerlink" title="使用方式二"></a>使用方式二</h2><p>当该对象不是一个组件时，需要开启该组件的属性注解时</p>
<p><code>@EnableConfigurationProperties(Dog.class)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 1、 开启Dog配置绑定功能</span></span><br><span class="line"><span class="comment">// 2、 把Dog这个组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Dog.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">        Dog bean = run.getBean(Dog.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="注：EnableConfigurationProperties使用问题"><a href="#注：EnableConfigurationProperties使用问题" class="headerlink" title="注：EnableConfigurationProperties使用问题"></a>注：EnableConfigurationProperties使用问题</h2><p>当使用EnableConfigurationProperties注解进行注入时，注入的组件名称格式为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 配置文件名 - 带包类名</span><br><span class="line">dog-properties-com.example.demo.entity.DogEntity</span><br><span class="line"></span><br><span class="line">dog-properties:</span><br><span class="line">  name: heizi</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog-properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>若容器中多次注入该组件，即之前xml中注入过一次</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.demo.entity.DogEntity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时再用@EnableConfigurationProperties(DogEntity.class)注入时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此时在主程序中使类型的方式是获取不到该组件的</span></span><br><span class="line">DogEntity bean = run.getBean(DogEntity.class);</span><br><span class="line">System.out.println(bean); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可使用Autowired进行注入，当容器中存在多个时其就会报红提示存在多个</span></span><br><span class="line"><span class="comment">// 建议使用@Qualifier注解精准选择</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;dog-properties-com.example.demo.entity.DogEntity&quot;)</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DogEntity dog;</span><br></pre></td></tr></table></figure>


<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="AutoConfigureAfter-SecurityAutoConfiguration-class"><a href="#AutoConfigureAfter-SecurityAutoConfiguration-class" class="headerlink" title="@AutoConfigureAfter(SecurityAutoConfiguration.class)"></a>@AutoConfigureAfter(SecurityAutoConfiguration.class)</h2><p>本组件在SecurityAutoConfiguration组件加载完毕后加载</p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/3.%20%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="自动配置原理入门"><a href="#自动配置原理入门" class="headerlink" title="自动配置原理入门"></a>自动配置原理入门</h1><a id="more"></a>

<h2 id="1-注解"><a href="#1-注解" class="headerlink" title="1. 注解"></a>1. 注解</h2><p><code>@SpringBootApplication</code>相当于 </p>
<p><code>@SpringBootConfiguration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于@Configuration，表示当前是一个配置类</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="comment">// 核心注解</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="comment">// 指定要扫描那些包</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure>
<h3 id="1-1-SpringBootConfiguration"><a href="#1-1-SpringBootConfiguration" class="headerlink" title="1.1 @SpringBootConfiguration"></a>1.1 @SpringBootConfiguration</h3><p>相当于@Configuration，表示当前是一个配置类</p>
<h3 id="1-2-ComponentScan"><a href="#1-2-ComponentScan" class="headerlink" title="1.2 @ComponentScan"></a>1.2 @ComponentScan</h3><p>指定要扫描那些包</p>
<h3 id="1-3-EnableAutoConfiguration-核心注解"><a href="#1-3-EnableAutoConfiguration-核心注解" class="headerlink" title="1.3 @EnableAutoConfiguration  核心注解"></a>1.3 @EnableAutoConfiguration  核心注解</h3><blockquote>
<p><strong>启动时加载所有的场景的自动配置，最终按照条件（@Conditional）装配规则，按需配置</strong></p>
</blockquote>
<h4 id="1-3-1-AutoConfigurationPackage"><a href="#1-3-1-AutoConfigurationPackage" class="headerlink" title="1.3.1 @AutoConfigurationPackage"></a>1.3.1 @AutoConfigurationPackage</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用Registrar给容器中批量导入一系列组件</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 AutoConfigurationPackages的Registrar 方法</span></span><br><span class="line"><span class="comment">// 将主程序下的所有组件导入进来</span></span><br></pre></td></tr></table></figure>
<p><img src="image-20210723152906487.png" alt="image-20210723152906487"></p>
<h4 id="1-3-2-Import-AutoConfigurationImportSelector-class"><a href="#1-3-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="1.3.2 @Import(AutoConfigurationImportSelector.class)"></a>1.3.2 @Import(AutoConfigurationImportSelector.class)</h4><p>加载所有的场景</p>
<ol>
<li><p>使用Selector给容器中批量导入主要为实现了<code>DeferredImportSelector</code> 接口的 <code>selectImports</code> 方法</p>
</li>
<li><p><code>selectImports</code> 方法中主要为调用 <code>getAutoConfigurationEntry</code></p>
</li>
<li><p><code>getAutoConfigurationEntry</code>中主要通过<code>getCandidateConfigurations</code>方法加载所有的组件</p>
</li>
<li><p><code>getCandidateConfigurations</code>中通过<code>SpringFactoriesLoader</code>加载所有的组件</p>
</li>
<li><p>在<code>SpringFactoriesLoader</code>中的<code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader)</code></p>
<ul>
<li>方法中会加载所有的<code>META-INF</code>下的<code>spring.factories</code>文件</li>
<li>最主要的就是<code>spring-boot-autoconfigure-2.5.2.jar</code>包下的<code>META-INF/spring.factories</code>文件</li>
<li>打开<code>META-INF/spring.factories</code>文件，其中以# Auto Configure标明自动注入的组件都有哪些</li>
</ul>
</li>
</ol>
<p>思维导图：</p>
<p>原导图地址：<a href="https://www.processon.com/mindmap/60c9c9d107912975024b848c">https://www.processon.com/mindmap/60c9c9d107912975024b848c</a></p>
<p><img src="SpringBoot.png" alt="SpringBoot"></p>
<h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><p>@ConditionalOnProperty注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 是否存在spring.aop 的 auto配置，并且他的值是true</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop &quot;, name = &quot;auto&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="comment">// 若存在Advice类则AspectJAutoProxyingConfiguration类生效</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(Advice.class)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyingConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">		<span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = false)</span></span><br><span class="line">		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;false&quot;)</span></span><br><span class="line">		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAutoProxyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">		<span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line">		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">				matchIfMissing = true)</span></span><br><span class="line">		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibAutoProxyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="comment">// 若不存在Advice类则 ClassProxyingConfiguration类生效</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingClass(&quot;org.aspectj.weaver.Advice&quot;)</span></span><br><span class="line">	<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">			matchIfMissing = true)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassProxyingConfiguration</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">static</span> BeanFactoryPostProcessor <span class="title">forceAutoProxyCreatorToUseClassProxying</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (beanFactory) -&gt; &#123;</span><br><span class="line">				<span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">					BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">					AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">					AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>文件上传解析器 - 重命名用户配置的文件上传解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个方法的意思为：如果用户配置有文件上传解析器，但是解析器名称不为multipartResolver</span></span><br><span class="line"><span class="comment">// 此时这个方法就会获取容器中的文件上传解析器然后返回，相当于仅改了组件的名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 容器中有MultipartResolver组件</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class="line"><span class="comment">// 容器中没有multipartResolver名字的组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;multipartResolver&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// @Bean标注的方法的参数，是从容器中获取的</span></span><br><span class="line">   <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">   <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>SpringBoot默认会在底层配置好所有的组件，但是如果用户自己配置了以用户的优先</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 当容器中没有该组件时生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>配置文件如何控制组件中的配置</p>
<p><img src="image-20210726143026340.png" alt="image-20210726143026340"></p>
<p>总结：</p>
<ul>
<li>SpringBoot先加载所有配置类</li>
<li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，都会从xxxProperties里边获取，xxxProperties和配置文件进行了绑定</li>
<li>生效的配置类就会给容器中装配很多组件</li>
<li>只要容器中有这些组件，相当于这些功能就有了</li>
<li>只要用户有自己配置的，就以用户的优先<ul>
<li>用户直接自己@Bean替换底层的组件</li>
<li>用户去看这个组件是获取的配置文件的什么值，就去设置什么值即可</li>
<li>xxxAutoConfiguration –&gt; 组件 –&gt;  xxxProperties里边拿值 –&gt; application.properties/yml</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>开发技巧</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/4.%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><a id="more"></a>

<ul>
<li>引入场景依赖<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></li>
</ul>
</li>
<li>查看自动配置了哪些（选做）<ul>
<li>自己分析，引入场景对应的自动配置一般都生效了</li>
<li>配置文件中添加：debug=true，打印启用的组件，会描述不生效的原因<ul>
<li>Negative 不生效的</li>
<li>Positive 生效的</li>
</ul>
</li>
</ul>
</li>
<li>是否需要修改<ul>
<li>修改配置项<ul>
<li>参照文档： <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></li>
<li>自己分析，xxxProperties绑定了配置文件的哪些</li>
</ul>
</li>
<li>自定义加入或替换组件<ul>
<li>@Bean、@Component</li>
</ul>
</li>
<li>自定义器  xxxCustomzier</li>
</ul>
</li>
</ul>
<h1 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h1><h2 id="1-Lombok"><a href="#1-Lombok" class="headerlink" title="1. Lombok"></a>1. Lombok</h2><p>简化javabean开发</p>
<h2 id="2-dev-tools（很不好用）"><a href="#2-dev-tools（很不好用）" class="headerlink" title="2. dev-tools（很不好用）"></a>2. dev-tools（很不好用）</h2><p>热更新</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>


<h2 id="3-SpringInitailizer"><a href="#3-SpringInitailizer" class="headerlink" title="3. SpringInitailizer"></a>3. SpringInitailizer</h2><p>使用idea创建springboot项目</p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>配置文件</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/5.%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><a id="more"></a>

<h2 id="1-properties"><a href="#1-properties" class="headerlink" title="1. properties"></a>1. properties</h2><h2 id="2-yaml"><a href="#2-yaml" class="headerlink" title="2. yaml"></a>2. yaml</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><ul>
<li>key: value；（kv之间必须要空格）</li>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许使用空格（使用idea开发时，使用tab也是可以的）</li>
<li>缩进的空格数不重要，只要相同层级的元素左对器即可</li>
<li><code>#</code> 表示注释</li>
<li>字符串：’’ 特殊字符会被 转义，”” 特殊字符不会被转义，如：\n<ul>
<li>‘’ 会被转义为字符串输入  heizi \n lisi</li>
<li>“” 不会转义，作为换行输出</li>
</ul>
</li>
</ul>
<h3 id="2-2-属性配置-ConfigurationProperties"><a href="#2-2-属性配置-ConfigurationProperties" class="headerlink" title="2.2 属性配置 @ConfigurationProperties"></a>2.2 属性配置 @ConfigurationProperties</h3><p>bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog-properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> House house;</span><br><span class="line">    <span class="keyword">private</span> String[] interests;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;House&gt;&gt; allHouse;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dog-properties:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heizi</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="string">Thu</span> <span class="string">Jul</span> <span class="number">08</span> <span class="number">00</span><span class="string">:00:00</span> <span class="string">CST</span> <span class="number">2021</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">house:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">bighouse</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">a</span>, <span class="string">b</span>, <span class="string">c</span>]</span><br><span class="line"><span class="comment">#  interests:</span></span><br><span class="line"><span class="comment">#    - a</span></span><br><span class="line"><span class="comment">#    - b</span></span><br><span class="line"><span class="comment">#    - c</span></span><br><span class="line">  <span class="attr">animal:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">a1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">a2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">a3</span></span><br><span class="line">  <span class="attr">score:</span> &#123;<span class="attr">s1:</span> <span class="string">v1</span>, <span class="attr">s2:</span> <span class="string">v2</span>, <span class="attr">s3:</span> <span class="string">v3</span>&#125;</span><br><span class="line"><span class="comment">#  score:</span></span><br><span class="line"><span class="comment">#    s1: v1</span></span><br><span class="line"><span class="comment">#    s2: v2</span></span><br><span class="line"><span class="comment">#    s3: v3</span></span><br><span class="line">  <span class="attr">salarys:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">0.1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">0.2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">0.3</span></span><br><span class="line">  <span class="attr">allHouse:</span> &#123;<span class="attr">all1:</span> [&#123;<span class="attr">name:</span> <span class="string">house1</span>, <span class="attr">age:</span> <span class="number">1</span>&#125;, &#123;<span class="attr">name:</span> <span class="string">house2</span>, <span class="attr">age:</span> <span class="number">2</span>&#125;, &#123;<span class="attr">name:</span> <span class="string">house3</span>, <span class="attr">age:</span> <span class="number">3</span>&#125;]&#125;</span><br><span class="line"><span class="comment">#  allHouse:</span></span><br><span class="line"><span class="comment">#    all1:</span></span><br><span class="line"><span class="comment">#      - name: house1</span></span><br><span class="line"><span class="comment">#        age: 1</span></span><br><span class="line"><span class="comment">#      - name: house2</span></span><br><span class="line"><span class="comment">#        age: 2</span></span><br><span class="line"><span class="comment">#      - name: house3</span></span><br><span class="line"><span class="comment">#        age: 3</span></span><br></pre></td></tr></table></figure>


<h2 id="3-自定义类绑定时的提示"><a href="#3-自定义类绑定时的提示" class="headerlink" title="3. 自定义类绑定时的提示"></a>3. 自定义类绑定时的提示</h2><p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>重启项目后，当bean上添加</p>
<p><code>@ConfigurationProperties(prefix = &quot;dog-properties&quot;)</code>注解时，配置会有提示</p>
<p>配置提示前提：配置文件中未配置该属性</p>
<p>打包时排除spring-boot-configuration-processor的依赖（使用2.5.2版本的SpringBoot时不需要添加也不会打入，添加反而会报错）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
















































]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>web开发</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E9%9B%B7/6.%20Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="SpringMVC自动配置概览"><a href="#SpringMVC自动配置概览" class="headerlink" title="SpringMVC自动配置概览"></a>SpringMVC自动配置概览</h1><a id="more"></a>

<blockquote>
<p>官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.auto-configuration">https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.auto-configuration</a></p>
</blockquote>
<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>
<p>SpringBoot为SpringMVC提供的自动配置，可用于大多数应用程序</p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</li>
<li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.static-content">later in this document</a>).</li>
<li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</li>
<li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.message-converters">later in this document</a>).</li>
<li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.message-codes">later in this document</a>)（国际化）.</li>
<li>Static <code>index.html</code> support. 静态index.html 支持</li>
<li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.binding-initializer">later in this document</a>).</li>
</ul>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<h1 id="简单功能分析"><a href="#简单功能分析" class="headerlink" title="简单功能分析"></a>简单功能分析</h1><h2 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1. 静态资源访问"></a>1. 静态资源访问</h2><h3 id="1-1-默认静态资源目录"><a href="#1-1-默认静态资源目录" class="headerlink" title="1.1 默认静态资源目录"></a>1.1 默认静态资源目录</h3><p>只要静态资源放在类路径下： <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p><strong>未进行MVC设置时</strong>，访问 ： 当前项目根路径/ + 静态资源名</p>
<p>SpringBoot会默认将这些路径的文件映射到 <code>/**</code> </p>
<p>请求进来时，先去找Controller看能不能处理，不能处理的所有请求都交给静态资源处理器。</p>
<p>如果静态资源能找到，就会返回，如果找不到则会返回404。</p>
<h3 id="1-2-设置静态资源访问前缀"><a href="#1-2-设置静态资源访问前缀" class="headerlink" title="1.2 设置静态资源访问前缀"></a>1.2 设置静态资源访问前缀</h3><p>SpringBoot会默认将这些路径的文件映射到 <code>/**</code> </p>
<p>如：项目中会有很多静态资源和很多动态请求，也会有很多拦截器，为了拦截器拦截方便，可以给访问静态资源目录增加前缀，然后在拦截器中放行指定前缀的资源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="comment"># 访问静态资源时使用的映射，默认为/**，会导致welcome配置失效</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="comment"># 静态资源允许存放的位置</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha</span>, <span class="string">classpath:/heihei</span>]</span><br></pre></td></tr></table></figure>


<h2 id="2-欢迎页支持"><a href="#2-欢迎页支持" class="headerlink" title="2. 欢迎页支持"></a>2. 欢迎页支持</h2><ul>
<li>静态资源路径下 index.html<ul>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀，否则就会导致index.html不能被默认访问</li>
</ul>
</li>
<li></li>
</ul>
<p>将图标放置在资源根路径下，html配置favicon</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;bookmark&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h1>]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>雷</category>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java操作Redis</title>
    <url>/2021/05/19/%E6%8A%80%E6%9C%AF/redis/3.%20Java%E6%93%8D%E4%BD%9CRedis/</url>
    <content><![CDATA[<h1 id="远程连接Redis"><a href="#远程连接Redis" class="headerlink" title="远程连接Redis"></a>远程连接Redis</h1><a id="more"></a>

<p>需要设置：</p>
<ol>
<li>关闭防火墙/开放端口</li>
<li>注释掉 redis.conf 中的：bind 127.0.0.1<ol>
<li>只需通过从服务器运行的同一主机连接到Redis，从环回接口发送命令’CONFIG SET protected-mode no’来禁用保护模式，但是如果这样做，请确保Redis不能从internet公开访问。使用CONFIG REWRITE将此更改永久化。</li>
<li>或者，您可以通过编辑Redis配置文件，将protected-mode选项设置为no，然后重新启动服务器来禁用protected-mode。</li>
<li> 如果只是为了测试而手动启动服务器，请使用“protected-mode no”选项重新启动服务器。</li>
<li> <strong>设置绑定地址或身份验证密码。</strong></li>
<li>注意：您只需要执行上述操作之一，服务器就可以开始接受来自外部的连接。</li>
</ol>
</li>
</ol>
<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>Jedis是官方推荐的java连接开发工具，使用java操作Redis的中间件</p>
<h2 id="1-连接测试"><a href="#1-连接测试" class="headerlink" title="1. 连接测试"></a>1. 连接测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.88.130&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">System.out.println(ping);	<span class="comment">// PONG</span></span><br></pre></td></tr></table></figure>


<p>Jedis中操作Redis的方法与Redis命令一致</p>
<h2 id="2-事务测试"><a href="#2-事务测试" class="headerlink" title="2. 事务测试"></a>2. 事务测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.88.130&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">jedis.flushAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    multi.set(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;zhang3&quot;</span>);</span><br><span class="line">    multi.set(<span class="string">&quot;user2&quot;</span>, <span class="string">&quot;wang5&quot;</span>);</span><br><span class="line">    <span class="comment">// 验证事务出错</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    multi.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="comment">// 放弃事务</span></span><br><span class="line">    multi.discard();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">    <span class="comment">// 断开连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><blockquote>
<p>SpringBoot操作数据：spring-data  jpa    jdbc    MongoDB redis</p>
<p>使用配置时应尽量使用lettuce</p>
</blockquote>
<h2 id="1-整合测试"><a href="#1-整合测试" class="headerlink" title="1. 整合测试"></a>1. 整合测试</h2><h3 id="1-0-说明：在SpringBoot-2-X-之后原来的jedis被替换为了lettuce"><a href="#1-0-说明：在SpringBoot-2-X-之后原来的jedis被替换为了lettuce" class="headerlink" title="1.0 说明：在SpringBoot 2.X 之后原来的jedis被替换为了lettuce"></a>1.0 说明：在SpringBoot 2.X 之后原来的jedis被替换为了lettuce</h3><p>jedis：采用的是直连，多个线程操作的话，是不安全的，如果想要避免不安全，需要使用jedis pool连接池，更像 BIO 模式</p>
<p>lettuce：采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据，更像 NIO 模式</p>
<h3 id="1-1-源码分析"><a href="#1-1-源码分析" class="headerlink" title="1.1 源码分析"></a>1.1 源码分析</h3><p>SpringBoot 的所有配置类，都有一个自动配置类</p>
<p>所有配置类都会绑定一个properties 配置文件</p>
<p>可在 <code>org.springframework.boot:spring-boot-autoconfigure -&gt; META-INF -&gt; spring.factories</code> 中查看关于redis自动配置类源码 <code>RedisAutoConfiguration</code></p>
<p><code>RedisAutoConfiguration</code> -&gt; <code>RedisProperties</code> 可查看具体配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 如果用户没有设置redisTemplate，则使用默认的redisTemplate</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的 redisTemplate 没有过度的设置，redis对象都是需要序列化的</span></span><br><span class="line">        <span class="comment">// 两个泛型都是Object的类型，使用时需要强制转换为&lt;String, Object&gt;，因此可能使用不便</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="1-2-创建项目"><a href="#1-2-创建项目" class="headerlink" title="1.2 创建项目"></a>1.2 创建项目</h3><h4 id="1-1-1-新创建项目时"><a href="#1-1-1-新创建项目时" class="headerlink" title="1.1.1 新创建项目时"></a>1.1.1 新创建项目时</h4><p>创建项目时，可直接勾选springboot整合redis的依赖</p>
<p>![image-20210524091314456](3. Java操作Redis/image-20210524091314456.png)</p>
<h4 id="1-1-2-旧项目中，引入依赖"><a href="#1-1-2-旧项目中，引入依赖" class="headerlink" title="1.1.2 旧项目中，引入依赖"></a>1.1.2 旧项目中，引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="1-3-添加配置"><a href="#1-3-添加配置" class="headerlink" title="1.3 添加配置"></a>1.3 添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 没有时不配置</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hc</span></span><br></pre></td></tr></table></figure>


<h3 id="1-4-使用"><a href="#1-4-使用" class="headerlink" title="1.4 使用"></a>1.4 使用</h3><blockquote>
<p>存储中文时，可能会存在各种问题</p>
<p>此时需要值的序列化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    操作不同的数据类型，api和指令一样的</span></span><br><span class="line"><span class="comment">    redisTemplate.opsForValue();</span></span><br><span class="line"><span class="comment">    opsForValue 操作字符串   类似String</span></span><br><span class="line"><span class="comment">    opsForList  操作List      类似List</span></span><br><span class="line"><span class="comment">    opsForSet</span></span><br><span class="line"><span class="comment">    opsForZSet</span></span><br><span class="line"><span class="comment">    opsForHash</span></span><br><span class="line"><span class="comment">    opsForGeo   地图</span></span><br><span class="line"><span class="comment">    opsForHyperLogLog   基数（不重复的值）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    常用的命令可以直接通过redisTemplate 操作，比如事务和基本的CRUD</span></span><br><span class="line"><span class="comment">    redisTemplate.multi();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    获取连接对象</span></span><br><span class="line"><span class="comment">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">    connection.flushAll();</span></span><br><span class="line"><span class="comment">    connection.flushDb();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;k1&quot;</span>));</span><br></pre></td></tr></table></figure>


<h2 id="2-值的序列化"><a href="#2-值的序列化" class="headerlink" title="2. 值的序列化"></a>2. 值的序列化</h2><p>打开 RedisTemplate 类可以看到，其即为值得序列化</p>
<p><img src="image-20210525090132383.png" alt="image-20210525090132383"></p>
<p>向下滑动，可以看到默认的序列化方式为Jdk序列化，其会让字符串转义</p>
<p>![image-20210525090459367](3. Java操作Redis/image-20210525090459367.png)</p>
<p>存入未序列化对象时，会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    Name name = <span class="keyword">new</span> Name(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    <span class="comment">// 存入序列化对象</span></span><br><span class="line">    String s = <span class="keyword">new</span> ObjectMapper().writeValueAsString(name);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name1&quot;</span>, s);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存入未序列化对象</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name2&quot;</span>, name);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name2&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-自定义RedisTemplate"><a href="#3-自定义RedisTemplate" class="headerlink" title="3. 自定义RedisTemplate"></a>3. 自定义RedisTemplate</h2><ol>
<li><p>创建RedisConfig文件</p>
</li>
<li><p>复制步骤1.1 源码中的RedisTemplate的配置，并删除注解</p>
<p><code>@ConditionalOnMissingBean(name = &#123;&quot;redisTemplate&quot;&#125;)</code></p>
</li>
<li><p>模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 固定模板</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">myRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 为了开发方便一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key 采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value 采用jackson的序列化方式</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key 采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value 采用jackson的序列化方式</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改注入方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">// 声明具体注入的对象的名称，使注入没有歧义</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;myRedisTemplate&quot;)</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新注入方式</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;myRedisTemplate&quot;)</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="5">
<li><p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>






































</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity</title>
    <url>/2021/04/06/%E6%8A%80%E6%9C%AF/%E6%9D%83%E9%99%90/SpringSecurity/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><a id="more"></a>

<h2 id="介绍说明"><a href="#介绍说明" class="headerlink" title="介绍说明"></a>介绍说明</h2><ol>
<li>当非常精通过滤器及拦截器时即使不用安全框架也可以实现安全需求，但是使用安全框架会更加方便</li>
<li>安全不是功能性需求，即即使没有安全框架项目也是可以运行的</li>
<li>做网站，应该在设计之初就应该考虑安全问题<ul>
<li>不做安全处理时，可能导致项目存在漏洞，进而引发用户隐私泄露</li>
<li>架构一旦确定，再加安全框架就比较难加</li>
</ul>
</li>
</ol>
<p>常用的安全框架</p>
<p>shiro、SpringSecurity：很像、除了类不一样</p>
<p>流程：认证、授权</p>
<p>权限分类</p>
<ul>
<li>功能权限</li>
<li>访问权限</li>
<li>菜单权限</li>
</ul>
<p>使用过滤器，拦截器实现时，需要大量原生代码，冗余</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块,进行少量的配置，即可实现强大的安全管理!</p>
<p>使用到的类：</p>
<ul>
<li>WebSecurityConfigurerAdapter：自定义Security策略</li>
<li>AuthenticationManagerBuilder：自定义认证策略</li>
<li>@EnableWebSecurity：开启WebSecurity模式     </li>
</ul>
<p>​      </p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://docs.spring.io/spring-security/site/docs/5.2.0.RELEASE/reference/htmlsingle/">https://docs.spring.io/spring-security/site/docs/5.2.0.RELEASE/reference/htmlsingle/</a></p>
<p><img src="image-20210407150615192.png" alt="image-20210407150615192"></p>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h2 id="thymeleaf整合springsecurity控制菜单显示"><a href="#thymeleaf整合springsecurity控制菜单显示" class="headerlink" title="thymeleaf整合springsecurity控制菜单显示"></a>thymeleaf整合springsecurity控制菜单显示</h2><p><img src="image-20210407163523422.png" alt="image-20210407163523422"></p>
<p>若使用thymeleaf-extras-springsecurity4 则 springboot版本高于2.0.9时配置无法生效</p>
<p>可使用thymeleaf-extras-springsecurity5</p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf-extras-springsecurity4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无忧社区管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#bodyDiv</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        width: 200px; height: 100px; text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;vc-body&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bodyDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;level1&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;background-color: #ffc59f;&quot;</span>&gt;</span>level1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;level2&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: greenyellow;&quot;</span>&gt;</span>level2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;logout&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: skyblue;&quot;</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #eba200;&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4. sec:authorize=&quot;&quot;  进行权限验证，若为false则该元素不会在页面中存在，因此获取元素的方法可能失效</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// isAuthenticated() 验证用户是否登录</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// hasRole(&#x27;vip1&#x27;)   验证登录用户是否有vip1的role</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// sec:authentication=&quot;name&quot;  获取用户名</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;level1&quot;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;level1&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">&quot;/level1/1&quot;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;level2&quot;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;level2&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">&quot;/level2/1&quot;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;logout&quot;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;logout&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">&quot;/logout&quot;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;login&quot;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;login&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">&quot;/toLogin&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无忧社区管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;vc-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bodyDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>login页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="后台跳转Controller"><a href="#后台跳转Controller" class="headerlink" title="后台跳转Controller"></a>后台跳转Controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.demoengin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span> <span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level1/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span> <span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level2/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.demoengin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 0. 配置</span></span><br><span class="line"><span class="comment"> *    添加注解 <span class="doctag">@EnableWebSecurity</span></span></span><br><span class="line"><span class="comment"> *    继承 WebSecurityConfigurerAdapter</span></span><br><span class="line"><span class="comment"> * 1. 授权</span></span><br><span class="line"><span class="comment"> * 2. 认证</span></span><br><span class="line"><span class="comment"> * 3. 注销</span></span><br><span class="line"><span class="comment"> * 4. 只显示用户有权限的菜单  前端页面</span></span><br><span class="line"><span class="comment"> *    thymeleaf与springsecurity整合控制用户菜单显示</span></span><br><span class="line"><span class="comment"> * 5. 防止网站攻击</span></span><br><span class="line"><span class="comment"> * 6. 记住我，记住以后关闭浏览器也可记录，默认记录时间为14天</span></span><br><span class="line"><span class="comment"> *    实现原理为记录一个cookie在本地浏览器，</span></span><br><span class="line"><span class="comment"> *    可查看浏览器中Application -&gt; Cookie有remember-me的cookie</span></span><br><span class="line"><span class="comment"> * 7. 定制登录页</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置授权规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 请求授权的规则</span></span><br><span class="line">        <span class="comment">// 设置首页所有人可以访问，功能页只有对应有权限的人才能访问</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()       <span class="comment">// 允许所有人访问主页</span></span><br><span class="line">            	.antMatchers(<span class="string">&quot;/**&quot;</span>).authenticated()	<span class="comment">// 需登录才能访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)       <span class="comment">// 设置访问权限</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 开启注销功能</span></span><br><span class="line">        <span class="comment">// 登出页面 /logout</span></span><br><span class="line">        <span class="comment">// 登出成功后默认到 /login?logout</span></span><br><span class="line">        <span class="comment">// 设置登录</span></span><br><span class="line">        http.logout()</span><br><span class="line">                .deleteCookies(<span class="string">&quot;remove&quot;</span>).invalidateHttpSession(<span class="keyword">false</span>)   <span class="comment">// 删除cookie和session</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);    <span class="comment">// 设置登出成功后跳转的页面 index</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 关闭csrf功能,防止跨站攻击</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 开启记住我功能</span></span><br><span class="line">        http.rememberMe()</span><br><span class="line">            .rememberMeParameter(<span class="string">&quot;remember-me&quot;</span>);<span class="comment">// 接收前端口是否记住我</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 配置login页面</span></span><br><span class="line">        <span class="comment">// 调用父类的configure时若没有权限会跳转security自带的登录页   super.configure(http);</span></span><br><span class="line">        <span class="comment">// 若不调用则会报403表示没有权限</span></span><br><span class="line">        <span class="comment">// 或自行设置</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            	.defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>)    <span class="comment">// 登录成功后跳转页面， 未设置时登录成功后跳转至跳转至登录页面前的页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/toLogin&quot;</span>)          <span class="comment">// 登录页</span></span><br><span class="line">                .usernameParameter(<span class="string">&quot;user&quot;</span>)      <span class="comment">// 修改前端参数key:用户名</span></span><br><span class="line">                .passwordParameter(<span class="string">&quot;pwd&quot;</span>)       <span class="comment">// 修改前端参数key:密码</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);  <span class="comment">// 前端请求提交到的url，注请求方式必须为post</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2. 配置认证规则  （配置认证规则为直接写死的情况，若要连接数据库，则不需要配置认证规则）</span></span><br><span class="line"><span class="comment">     *  springboot 2.1.x 可以直接使用</span></span><br><span class="line"><span class="comment">     *  在版本更高的时候会报错：java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id &quot;null&quot;</span></span><br><span class="line"><span class="comment">     *  原因为密码未加密</span></span><br><span class="line"><span class="comment">     *  在springsecurity中新增了许多加密方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  添加密码加密方式传入加密方式</span></span><br><span class="line"><span class="comment">     *  .passwordEncoder(new BCryptPasswordEncoder())</span></span><br><span class="line"><span class="comment">     *  将后面传入的密码也使用加密方式加密</span></span><br><span class="line"><span class="comment">     *  new BCryptPasswordEncoder().encode(&quot;password&quot;)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 从内存中读取认证用户</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">&quot;username&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;password&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;user1&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="连接数据库资源"><a href="#连接数据库资源" class="headerlink" title="连接数据库资源"></a>连接数据库资源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.entity.Merchant;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.service.IMerchantService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMerchantService merchantService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String phone)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 查询数据库获取信息</span></span><br><span class="line">        QueryWrapper&lt;Merchant&gt; merchantQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        merchantQueryWrapper.eq(<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line">        Merchant merchant = merchantService.getOne(merchantQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (merchant == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String encodePwd = passwordEncoder.encode(merchant.getPassword());</span><br><span class="line">            <span class="comment">// 使用GrantedAuthority封装的权限列表</span></span><br><span class="line">            List&lt;GrantedAuthority&gt; simpleGrantedAuthorities = Arrays.asList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;admin&quot;</span>), <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;vip1&quot;</span>));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                arg1: 用来标记用户的用户名，前端可以直接通过 sec:authentication=&quot;name&quot; 获取</span></span><br><span class="line"><span class="comment">                arg2：加密后的用户密码</span></span><br><span class="line"><span class="comment">                arg3：用户拥有的权限列表</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(phone, encodePwd, simpleGrantedAuthorities);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="前后端分离及完整配置"><a href="#前后端分离及完整配置" class="headerlink" title="前后端分离及完整配置"></a>前后端分离及完整配置</h1><p><a href="https://blog.csdn.net/qq314499182/article/details/87913202">https://blog.csdn.net/qq314499182/article/details/87913202</a></p>
<h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.constant.ErrorConstants;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.entity.Merchant;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.xatali.signplatform.service.IMerchantService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密工具</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">createPasswordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体配置登陆细节</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http 登陆访问对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 登陆异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                <span class="comment">// 关闭Session，若为分布式架构则需要关闭Session然后使用redis等工具做存储</span></span><br><span class="line"><span class="comment">//                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span></span><br><span class="line"><span class="comment">//                .and()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 开放不登录即可访问的路径</span></span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/**&quot;</span>,<span class="string">&quot;/five-service/blog-article/search/**&quot;</span>,<span class="string">&quot;/five-service/blog-article/point&quot;</span>,<span class="string">&quot;/five-service/blog-user/login&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 开启自动配置的登陆功能</span></span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 自定义登录请求路径，及参数设置(post请求)</span></span><br><span class="line">                .formLogin().usernameParameter(<span class="string">&quot;user&quot;</span>).passwordParameter(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                <span class="comment">// 验证成功处理器</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        <span class="comment">// jackson处理返回参数</span></span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        String s = mapper.writeValueAsString(Result.error(ErrorConstants.SUCCESS_MSG.getCode(), ErrorConstants.SUCCESS_MSG.getMsg()));</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 设置请求头</span></span><br><span class="line">                        httpServletResponse.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 设置返回码</span></span><br><span class="line">                        httpServletResponse.setStatus(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 向前端写入数据</span></span><br><span class="line">                        PrintWriter writer = httpServletResponse.getWriter();</span><br><span class="line">                        writer.write(s);</span><br><span class="line">                        writer.flush();</span><br><span class="line">                        writer.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//验证失败处理器</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        httpServletResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                        httpServletResponse.setStatus(<span class="number">401</span>);</span><br><span class="line">                        PrintWriter writer = httpServletResponse.getWriter();</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        String s = mapper.writeValueAsString(Result.error(ErrorConstants.LOGIN_FAIL.getCode(), ErrorConstants.LOGIN_FAIL.getMsg()));</span><br><span class="line">                        writer.write(s);</span><br><span class="line">                        writer.flush();</span><br><span class="line">                        writer.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).permitAll()</span><br><span class="line">                .and()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 关闭拦截未登录自动跳转,改为返回json信息</span></span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> AuthenticationEntryPoint() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        httpServletResponse.setStatus(<span class="number">403</span>);</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        String s = mapper.writeValueAsString(Result.error(ErrorConstants.AUTH_FAIL.getCode(), ErrorConstants.AUTH_FAIL.getMsg()));</span><br><span class="line">                        PrintWriter writer = httpServletResponse.getWriter();</span><br><span class="line">                        writer.write(s);</span><br><span class="line">                        writer.flush();</span><br><span class="line">                        writer.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//开启自动配置的注销功能</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                <span class="comment">// 配置登出页面</span></span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                <span class="comment">// 删除cookie和session</span></span><br><span class="line">                .deleteCookies(<span class="string">&quot;remove&quot;</span>).invalidateHttpSession(<span class="keyword">false</span>)</span><br><span class="line">                <span class="comment">//注销成功处理器</span></span><br><span class="line">                .logoutSuccessHandler(<span class="keyword">new</span> LogoutSuccessHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        httpServletResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                        httpServletResponse.setStatus(<span class="number">200</span>);</span><br><span class="line">                        PrintWriter writer = httpServletResponse.getWriter();</span><br><span class="line">                        writer.write(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">                        writer.flush();</span><br><span class="line">                        writer.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).permitAll()</span><br><span class="line">                .and()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//添加token过滤器</span></span><br><span class="line"><span class="comment">//                .addFilter(new TokenAuthenticationFilter(authenticationManagerBean()))</span></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启跨域访问</span></span><br><span class="line">        http.cors().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于在header里面增加token等类似情况，放行所有OPTIONS请求。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(HttpMethod.OPTIONS, <span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-获取数据库验证的文件"><a href="#2-获取数据库验证的文件" class="headerlink" title="2. 获取数据库验证的文件"></a>2. 获取数据库验证的文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMerchantService merchantService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String phone)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;User start login, phone &#123;&#125;&quot;</span> , phone);</span><br><span class="line">        QueryWrapper&lt;Merchant&gt; merchantQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        merchantQueryWrapper.eq(<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line">        Merchant merchant = merchantService.getOne(merchantQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (merchant == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;User login fail , phone &#123;&#125;&quot;</span> , phone);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;GrantedAuthority&gt; simpleGrantedAuthorities = Arrays.asList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;admin&quot;</span>), <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;vip1&quot;</span>));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	此处可使用Security自带的User返回，也可自定义一个User返回</span></span><br><span class="line"><span class="comment">                arg1: 用来标记用户的用户名，前端可以直接通过 sec:authentication=&quot;name&quot; 获取</span></span><br><span class="line"><span class="comment">                arg2：加密后的用户密码</span></span><br><span class="line"><span class="comment">                arg3：用户拥有的权限</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(merchant.getMerchantName(), merchant.getPassword(), simpleGrantedAuthorities);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-自定义返回前端的类"><a href="#3-自定义返回前端的类" class="headerlink" title="3. 自定义返回前端的类"></a>3. 自定义返回前端的类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginMerchant</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Merchant merchant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取权限列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> merchant.getMerchantName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账号是否过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 凭证是否过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>权限</category>
      </categories>
      <tags>
        <tag>项目-权限</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2021/03/18/java/%E5%90%8E%E7%AB%AF/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="多线程基础："><a href="#多线程基础：" class="headerlink" title="多线程基础："></a>多线程基础：</h2><a id="more"></a>

<p><img src="image-20210318134058000.png" alt="image-20210318134058000"></p>
<h3 id="进程和线程："><a href="#进程和线程：" class="headerlink" title="进程和线程："></a>进程和线程：</h3><p>一个进程中可以有多个线程，一个进程中至少要有一条线程，该线程就是主线程</p>
<p>进程：进程就是所有的线程集合，是cpu的一个分配单元</p>
<p>线程：程序执行的路径，执行必须按照从上往下的顺序来执行，是进程中的一个执行单元</p>
<p>tips： 如果在多线程情况下，代码执行顺序就不是从上往下执行了</p>
<h3 id="多线程的好处："><a href="#多线程的好处：" class="headerlink" title="多线程的好处："></a>多线程的好处：</h3><p>同时且并行执行程序，提高程序效率</p>
<h3 id="多线程的应用场景："><a href="#多线程的应用场景：" class="headerlink" title="多线程的应用场景："></a>多线程的应用场景：</h3><p>对后端接口中比较耗时的代码可以采用多线程来实现（比如请求–qq通知–邮箱通知的场景）</p>
<p>异步实现日志的记录（单独开线程去进行日志的记录，不影响原有的代码）</p>
<p>意义：快速提升Http协议的响应，提升用户体验</p>
<p>抢票系统 ，秒杀业务</p>
<h3 id="后端开发为什么用到多线程？"><a href="#后端开发为什么用到多线程？" class="headerlink" title="后端开发为什么用到多线程？"></a>后端开发为什么用到多线程？</h3><p>http协议默认情况是采用同步的形式，采用多线程可以异步高效的执行程序</p>
<h3 id="如何理解多线程中的上下文切换："><a href="#如何理解多线程中的上下文切换：" class="headerlink" title="如何理解多线程中的上下文切换："></a>如何理解多线程中的上下文切换：</h3><p>CPU切换线程概念：</p>
<p>单核cpu的服务器中，开启多线程不是真正的多线程，因为单核cpu服务器在同一个时刻只能运行一个线程，只是运行的线程快速切换到另一个线程。cpu的核数越多，就越可以减少cpu的切换</p>
<h3 id="使用多线程有什么缺陷："><a href="#使用多线程有什么缺陷：" class="headerlink" title="使用多线程有什么缺陷："></a>使用多线程有什么缺陷：</h3><p>开启多个线程会导致cpu的不断切换，会耗费大量的cpu资源（cpu），影响服务器的性能</p>
<p>项目比较小可以采用多线程实现异步，</p>
<p>项目比较大的情况建议使用mq实现异步</p>
<h2 id="实现多线程的几种方式："><a href="#实现多线程的几种方式：" class="headerlink" title="实现多线程的几种方式："></a>实现多线程的几种方式：</h2><h3 id="继承Thread类："><a href="#继承Thread类：" class="headerlink" title="继承Thread类："></a>继承Thread类：</h3><ol>
<li><p>重写run（）方法，run方法里面就放的是要执行的代码</p>
</li>
<li><p>创建该线程实例</p>
</li>
<li><p>调用start方法</p>
</li>
</ol>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ol>
<li><p>重写run（）方法，run方法里面就放的是要执行的代码</p>
</li>
<li><p>将实现接口的线程实例传递到新创建的线程中</p>
</li>
<li><p>调用start方法</p>
</li>
</ol>
<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>（本身是开了一个线程单独去处理业务实现多线程，但如果要获取其中的返回值内容，在主线程中其实就还是单线程了）</p>
<ol>
<li><p>重写call方法</p>
</li>
<li><p>主线程中将子线程传递到FutureTask中用来接收返回值</p>
</li>
<li><p>通过FutureTask对象可以开启线程和接收返回值</p>
</li>
</ol>
<h3 id="开线程池（常用）"><a href="#开线程池（常用）" class="headerlink" title="开线程池（常用）"></a>开线程池（常用）</h3><p>提供线程的复用机制，防止频繁的创建销毁线程，耗费系统资源</p>
<p>执行excute方法</p>
<h3 id="其他方式："><a href="#其他方式：" class="headerlink" title="其他方式："></a>其他方式：</h3><p>5.Spring中使用@Asyc注解来开启多线程，其实也是基于线程池进行了封装。单独开一个线程异步执行，达到快速响应用户请求的目的</p>
<h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><p>用户登录请求过来，有多个业务要围绕该请求来执行，比如记录登录日志，发送短信通知，发送Email通知。通过使用注解异步去在后台执行这些操作，而在主线程中执行登录操作并直接返回成功，大大缩减了响应时间。但是如果想要拿到子线程中的返回结果，虽然是执行了异步的操作，但在主线程中就还是单线程同步的执行这些操作</p>
<h2 id="主线程-子线程-用户线程-守护线程的概念辨析："><a href="#主线程-子线程-用户线程-守护线程的概念辨析：" class="headerlink" title="主线程+子线程+用户线程+守护线程的概念辨析："></a>主线程+子线程+用户线程+守护线程的概念辨析：</h2><p>主线程就是main方法</p>
<p>子线程就是在主线程环境下的线程</p>
<p>用户线程+守护线程：是子线程的两种称呼</p>
<p>当主线程停止之后，用户线程不会随着主线程停止；守护线程则相反</p>
<p>默认创建线程都是用户线程，通过调用 threadxx.setDaemon(true)就可以变成守护线程，默认是false</p>
<p>守护线程场景：GC垃圾回收</p>
<h2 id="如何停止一个线程？"><a href="#如何停止一个线程？" class="headerlink" title="如何停止一个线程？"></a>如何停止一个线程？</h2><p>为什么不建议使用stop方法结束一个线程？</p>
<p>1.首先，如果使用stop方法会强制执行停止线程的操作，<strong>对于用户线程，本身可能还未执行完毕</strong>，强行停止可能会引发线程安全问题。这种方式不推荐，已经过时</p>
<p>2.场景：使用<code>volatile</code>关键字在类中创建一个私有为ture的变量，并配合一个更改变量为false方法a，然后在run方法进行while（true）循环。设置阻塞时间，阻塞时间一过，就会执行停止线程的自定义方法a，然后修改变量，停止线程。</p>
<p>（ps：volatile关键字：保证线程可见性，即子线程的执行状态被主线程观察到）</p>
<h2 id="多线程五种状态："><a href="#多线程五种状态：" class="headerlink" title="多线程五种状态："></a>多线程五种状态：</h2><p><img src="clip_image003.jpg" alt="img"></p>
<p>《使用sleep代表将线程从运行状态变为阻塞状态，就是说将多个线程给堵死了，堵死的时间越久，线程之间的竞争就越激烈，出现脏读的概率就越大）》</p>
<h2 id="总结：好端端的程序为什么要用多线程呢？（多线程的好处？）"><a href="#总结：好端端的程序为什么要用多线程呢？（多线程的好处？）" class="headerlink" title="总结：好端端的程序为什么要用多线程呢？（多线程的好处？）"></a>总结：好端端的程序为什么要用多线程呢？（多线程的好处？）</h2><p>为了提高http协议响应速度，给用户比较友好的体验</p>
<p>对于web开发而言，使用多线程 的一个重要目的就是异步去处理业务，快速响应用户的请求，给用户良好的体验</p>
<h2 id="多线程之间如何实现同步（玩的是线程和线程之间问题的出现和解决）："><a href="#多线程之间如何实现同步（玩的是线程和线程之间问题的出现和解决）：" class="headerlink" title="多线程之间如何实现同步（玩的是线程和线程之间问题的出现和解决）："></a>多线程之间如何实现同步（玩的是线程和线程之间问题的出现和解决）：</h2><p>如何定义线程安全问题？</p>
<p>线程安全问题，其实这里由三个概念：</p>
<p>1.线程不安全：操作并非原子，多线程环境下执行一段代码，如果这段代码的结果受到多线程执行前后（时序）的影响，这些多线程会发生竞争的状态，此时就是线程不安全。</p>
<p>2.线程安全：多个线程去访问某个类的时候（可以是对这个类中属性的增删改之类的操作），如果这个类表现出我们预期会出现的行为，那么就可以称为是线程安全的。</p>
<p>3.我们常说的“解决线程安全”问题，其实说的是由“非预期的状态—&gt;转化为—-&gt;预期的状态”。</p>
<h3 id="1-线程安全问题是什么？（线程安全问题在什么场景下发生？）"><a href="#1-线程安全问题是什么？（线程安全问题在什么场景下发生？）" class="headerlink" title="1.线程安全问题是什么？（线程安全问题在什么场景下发生？）"></a>1.线程安全问题是什么？（线程安全问题在什么场景下发生？）</h3><p>例子：</p>
<p>多个线程—同时—共享—同一个全局变量—做 写 操作，线程与线程之间就会互相干扰，那么就导致了线程安全问题</p>
<p>场景：秒杀项目中，库存为1的情况下，两个用户都进行了下单操作，下单业务的两个线程同时都会获取到库存=1的产量，执行完之后就会发现超卖了，就是库存已经没有了但是其中一个用户还是下单成功了。这就是线程安全问题的出现</p>
<h3 id="2-怎么解决线程安全问题："><a href="#2-怎么解决线程安全问题：" class="headerlink" title="2.怎么解决线程安全问题："></a>2.怎么解决线程安全问题：</h3><p>思想：让多个线程在同一时刻只有一个线程执行。这个时候，在多线程与多线程之间，就成为了排队的状态，也就是单线程。注意这里的单线程说的是在线程和线程所在的空间。</p>
<p>那既然已经变成了单线程，为什么还要使用多线程呢？</p>
<p>注意，这里说的单线程是在多线程环境下，线程与线程之间有序进行，防止线程不安全</p>
<p>这里说的多线程是相对主线程来说的 ，使用多线程可以保证异步处理请求，快速响应用户请求。</p>
<p>做法：加锁，保证线程执行的有序性。但是会让程序的执行效率降低</p>
<h2 id="Lock锁-Synchronized锁-cas无锁"><a href="#Lock锁-Synchronized锁-cas无锁" class="headerlink" title="Lock锁/Synchronized锁/cas无锁"></a>Lock锁/Synchronized锁/cas无锁</h2><h3 id="3-Synchronized锁："><a href="#3-Synchronized锁：" class="headerlink" title="3.Synchronized锁："></a>3.Synchronized锁：</h3><p>思想：多个线程执行同一个方法的时候，必须要获取锁，拿到锁之后才可以执行该方法</p>
<p>场景：多个线程环境下，a线程拿到锁之后，b就一直在阻塞等待，这个时候的syn就是悲观锁的存在（可以把悲观锁理解为一种抽象状态）；等a执行完毕之后，才会将锁释放，这个时候b和其他线程开始竞争，去获取锁拿到执行权，因此b不是一定会拿到锁</p>
<p>用法：</p>
<p>加Synchronized就一定可以保证线程安全问题嘛？</p>
<p>不一定，两个场景：</p>
<p> 1.在单例模式中不加双重校验会导致重复创建两个实例，一个线程在释放锁之后另一个线程立马拿到锁去创建对象，如果不加一层判断的话会重复创建对象，所以要在其他线程拿到锁之后再加一层判断，也就是第二层非空判断</p>
<p> 2.火车站售票的场景中，会导致超卖</p>
<p><strong><em>*</em>\</strong>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>***</em></p>
<h3 id="4-Synchronized的三种使用方式："><a href="#4-Synchronized的三种使用方式：" class="headerlink" title="4.Synchronized的三种使用方式："></a>4.Synchronized的三种使用方式：</h3><p>1.用在方法（代码块）上作为关键字 = = this锁</p>
<p><img src="clip_image005.png" alt="img"></p>
<p>\2. 用在静态方法（静态代码块）上作为关键字 = = 当前类的class作为锁</p>
<p>3.Object锁</p>
<p><strong><em>*</em>\</strong>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>*</em>*<em>***</em></p>
<h3 id="5-Lock锁重入与读写锁的用法"><a href="#5-Lock锁重入与读写锁的用法" class="headerlink" title="5.Lock锁重入与读写锁的用法"></a>5.Lock锁重入与读写锁的用法</h3><p>Lock锁：一个接口，接口中定义了自己的方法声明，lock和unlock方法</p>
<p>同时它有几个实现类，就是下面的重入锁和读写锁</p>
<p>两种锁：重入锁（ReentrantLock）和读写锁(ReadLock和WriteLock)</p>
<p>重入锁：实例化重入锁，调用lock和unlock方法自由控制锁的获取和释放</p>
<p>读写锁：包含读读锁，读写锁，写写锁</p>
<p>读读锁：</p>
<p>特点：读读共享</p>
<p>概念：多个线程同步开始，同步结束，多线程之间 同时共享要执行的代码</p>
<p>写写锁：</p>
<p>特点：写写互斥</p>
<p>概念：多线程之间互斥，线程排队，变成单线程，解决线程安全问题</p>
<p>读写锁：</p>
<p>特点：先写后读，写写之间互斥，读读之间共享</p>
<p>上面如果仅仅使用读写锁只是先写后读，而不能实现边写边读。想要实现 边写边读，就要使用wait和notify的方法，wait和notify用来实现多线程之间的通讯</p>
<p>6.如何实现多线程之间的通讯？</p>
<p>场景：生产者消费者模型，有一个全局的共享变量，要保证先写后读。通过条件判断语句结合wait和notify实现通讯（比如在生产者中加默认为false的判断，代表还没有写，此时消费者使用wait，释放锁并交给生产者，生产者执行完之后更改为true，并执行notify，此时消费者被唤醒然后执行），保证线程执行的有序性。</p>
<p>wait：</p>
<p>概念：让当前线程放弃cpu执行权，将锁释放（如果不释放锁就一直持有该锁，生产者没办法拿到锁进行写的操作，）。当前线程由运行状态变成阻塞状态</p>
<p>注意：要用在object类上</p>
<p>notify：等到生产者执行完毕之后，消费者再唤醒，进行读的操作</p>
<p>7.Synchronized锁和Lock锁的区别？</p>
<p>Synchronized时java中内置的关键字，在程序执行完毕或者程序抛出异常的时候会自动释放锁。自动挡</p>
<p>Lock锁可以人为控制锁的获取和释放，扩展性高。手动挡</p>
<p>8.如何理解锁的可重入性</p>
<p>概念：同一个线程中的同一把锁时可以传递的，就是锁的可重入性。syn和lock锁在设计时都有可重入性。可以防止死锁的产生</p>
<p>场景：在run（）方法中，run（）方法调用a（）方法，a方法调用b方法，a和b都是加锁的，都是this锁（即代表run方法的代码块上），那么这个时候a获取到锁并执行完毕之后会将锁传递给b，避免了死锁的产生</p>
<p>9.多线程死锁产生的原因</p>
<p>概念：多线程场景下，锁中嵌套锁，这两个锁都是不同的锁</p>
<p>场景：在多线程场景下，有两种不同的锁，比如Object锁和this 锁，线程a需要线程b的锁，线程b需要线程a的锁，但是这两个线程在未执行完毕的情况下都不会释放各自的锁，这样就导致了死锁的产生</p>
<p>解决死锁的一种方案：</p>
<p>超时放弃：</p>
<p>当使用synchronized关键词提供的内置锁时，只要线程没有获得锁，那么就会永远等待下去，放弃使用内置锁</p>
<p>使用Lock接口中的tryLock方法， 该方法可以按照固定时长等待锁。 因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。</p>
<p>10.join（）方法的使用：</p>
<p>场景：在主线程中有多个子线程，共同执行run方法，使用线程1.join（）就代表将主线程阻塞（相当于wait），同时主线程将锁释放，等待线程1拿到锁并执行完毕之后，主线程唤醒，主线程才能继续执行，然后调用其他子线程</p>
<p>注意：调用join方法代表join所在的线程进行阻塞，而不是调用join方法的线程</p>
<p>wait就相当于告诉主线程，你等一会儿，我先来执行，然后执行完毕之后，主线程唤醒</p>
<p>概念：保证线程的顺序问题，底层时wait和notify</p>
<p>Others：</p>
<p>1.yield()方法的作用是放弃当前线程获取CPU的执行权，将让其它的线程去获取。告诉cpu，先不用管我，但是cpu不忍心，还是会有机会执行它。给线程加yield（）的目的是为了让其他线程得到更多的执行机会。比如实际开发中某个线程是不太紧急的线程。</p>
<p>\2. 线程安全：一般通过加锁解决安全问题，保证数据一致性。一般我们可以使用synchronized标记方法或者代码块，来保证原子性操作。但是synchronized性能不如volatile。 在java底层中一些设计线程安全的源码都是用了volatile关键字。多线程如果要保证数据安全必须要保证原子性、可见性以及有序性。一般情况下当多个线程同时执行时，如果多个线程同时访问同一变量，如果变量所在方法没有使用synchronized，将导致每个线程只关注自己线程内cache的变量值，当多个线程将变量同步到主线程的主存时，会发生数据不一致的情况。如果使用volatile可以让变量拥有可见性，多个线程进行执行时，每个线程都会看到主线程中的主存的变量值发生的改变，进行修正，保证与自己线程数据同步，在线程修改变量时，volatile关键字会强制将修改的值立即写入主存，其他线程中的对应缓存变量就会被强制标记为无效，而从主存中进行同步。</p>
<p>项目业务场景：</p>
<p>   批量页面静态化 在系统中，商品详情页我们使用freemarker来进行页面静态化，每天夜里12点开始要对所有商品页面进行一遍静态化，由于商品数量比较多 如果使用单线程将耗时过长，我们使用一个定长线程池进行批量执行，将任务放在队列中，多个线程同时领取并执行。</p>
<p>订单处理（用户下单后可能支付状态不明确，我们后台可以通过多线程去主动核实第三方支付状态，来更新我们系统的订单状态）</p>
<p>登录后用户信息处理(用户登录后应该通知各相关系统将用户常用数据进行缓存 以快速响应登录用户)</p>
<p><a href="https://blog.csdn.net/renwei289443/article/details/79540809?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-79540809.nonecase">https://blog.csdn.net/renwei289443/article/details/79540809?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-79540809.nonecase</a></p>
<p>对于锁的理解，宏观来讲，原子的世界中，不管是在java代码中，还是在数据库中，还是在分布式系统中的微服务与微服务之间，只要是多个线程/事务/进程涉及到对数据的并发（同时）操作（增删改），都避免不了要使用锁来保证数据的一致性。锁要解决的问题，就是如何把一个并发的问题来变成一个串行的问题。使用合适的锁，是为了在保证串行的前提下，再保证一定的性能。</p>
<p>1.java代码中：多个线程同时操作同一个资源的情况</p>
<p>2.数据库中：多个事务去同时处理同一个数据</p>
<p>3.分布式中：多个进程（jvm）去操作同一个资源</p>
<p><strong><em>多线程相关\</em></strong></p>
<p><strong>”**</strong>锁“：**</p>
<p><a href="https://blog.csdn.net/renwei289443/article/details/79540809?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-79540809.nonecase"><strong>https://blog.csdn.net/renwei289443/article/details/79540809?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2<del>all</del>first_rank_v2~rank_v25-2-79540809.nonecase</strong></a></p>
<p>多线程场景执行原理：</p>
<p>主存中的值–线程复制，拿到自己的工作空间–处理–返回并赋值到主存中值</p>
<p>悲观锁有哪些劣势？</p>
<p>1.阻塞和唤醒对性能的开销较大</p>
<p>2.永久阻塞，就是如果当前线程内部执行发生死锁，无限循环，会导致死锁，永远不会释放锁，导致其他线程永远没办法获取锁，造成永久阻塞的情况</p>
<p>3.优先级，如果阻塞线程的优先级比较高，而持有锁的优先级比较低，就会引发优先级反转的问题</p>
<p>什么是悲观锁？什么是乐观锁？</p>
<p>悲观锁：</p>
<p>悲观的认为如果我不锁这这个对象，其他线程就会过来抢，就可能会对数据的结果造成错误，为了结果的正确性。因此在一个线程过来修改数据的时候，悲观锁就会锁住，不让其他线程访问。（数据锁住，然后改，其他人不能访问）</p>
<p>synchronized和lock都是悲观锁</p>
<p>乐观锁：</p>
<p>乐观的认为</p>
<p>实现：cas算法/版本号控制</p>
<p>悲观锁的场景：</p>
<p>Git：push代码到仓库，如果发现陈push的时候报错说版本不一致，就说明我们当前的版本不是最新的，已经有人提交过代码了，这个时候我们要先把项目拉取下来，然后再进行push；如果版本一致的话就可以直接进行push。</p>
<p>数据库：select * xxx for update加的就是一个悲观锁</p>
<p>开销对比：</p>
<p>悲观锁的原始开销要大于乐观锁</p>
<p>什么时候用悲观锁？什么时候用乐观锁？</p>
<p>乐观锁：并发情况下。读&gt;写，就是大多数情况都是读</p>
<p>悲观锁：并发情况下。写&gt;读，就是适合大部分都是写的情况下</p>
<p>ThreadLocal：</p>
<p>ThreadLocal面试题：</p>
<p><a href="https://www.cnblogs.com/jiangxinlingdu/p/11055540.html">https://www.cnblogs.com/jiangxinlingdu/p/11055540.html</a></p>
<p>ThreadLocal源码学习：</p>
<p><a href="https://blog.csdn.net/sinat_33921105/article/details/103295070?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-5.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-5.nonecase">https://blog.csdn.net/sinat_33921105/article/details/103295070?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-5.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-5.nonecase</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>碰撞</title>
    <url>/2021/03/03/java/%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0/%E7%A2%B0%E6%92%9E/</url>
    <content><![CDATA[<h2 id="JavaScript-游戏开发：手把手实现碰撞物理引擎"><a href="#JavaScript-游戏开发：手把手实现碰撞物理引擎" class="headerlink" title="JavaScript 游戏开发：手把手实现碰撞物理引擎"></a>JavaScript 游戏开发：手把手实现碰撞物理引擎</h2><a id="more"></a>

<p>转载自：<a href="https://blog.csdn.net/fengqiuzhihua/article/details/114156010">https://blog.csdn.net/fengqiuzhihua/article/details/114156010</a></p>
<blockquote>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>基础结构<br>绘制小球<br>移动小球<br>重构代码<br>碰撞检测<br>边界碰撞<br>向量的基本操作<br>碰撞处理<br>动量守恒定律<br>动能守恒定律<br>非弹性碰撞<br>重力<br>总结</p>
</blockquote>
<h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><p>这里使用 canvas 来实现 JavaScript 物理引擎。首先准备项目的基础文件和样式，新建一个 index.html、index.js 和 style.css 文件，分别用于编写 canvas 的 html 结构、引擎代码和画布样式。</p>
<p>在 index.html 的 <head /> 标签中引入样式文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;./style.css&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>


<p>在 <body /> 中，添加 canvas 元素、加载 index.js 文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;canvas id=<span class="string">&quot;gameboard&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>这段代码定义了 id 为 gameboard 的 <canvas /> 元素，并放在了 <main /> 元素下， <main /> 元素主要是用来设置背景色和画布大小。在 <main/> 元素的下方引入 index.js 文件，这样可以在 DOM 加载完成之后再执行 JS 中的代码。</p>
<p>style.css 中的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  background: hsl(0deg, <span class="number">0</span>%, <span class="number">10</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>样式很简单，去掉所有元素的外边距、内间距，并把 <main/> 元素的宽高设置为与浏览器可视区域相同，背景色为深灰色。</p>
<blockquote>
<p>hsl(hue, saturation, brightness) 为 css 颜色表示法之一，参数分别为色相，饱和度和亮度</p>
</blockquote>
<h3 id="绘制小球"><a href="#绘制小球" class="headerlink" title="绘制小球"></a>绘制小球</h3><p>接下来绘制小球，主要用到了 canvas 相关的 api。</p>
<p>在 index.js 中，编写如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;gameboard&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> width = canvas.width;</span><br><span class="line"><span class="keyword">let</span> height = canvas.height;</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = <span class="string">&quot;hsl(170, 100%, 50%)&quot;</span>;</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure>

<p>代码中主要利用了二维 context 进行绘图操作：</p>
<ul>
<li>通过 canvas 的 id 获取 canvas 元素对象。</li>
<li>通过 canvas 元素对象获取绘图 context， getContext() 需要一个参数，用于表明是绘制 2d 图像，还是使用 webgl 绘制 3d 图象，这里选择 2d。context 就类似是一支画笔，可以改变它的颜色和绘制基本的形状。</li>
<li>给 canvas 的宽高设置为浏览器可视区域的宽高，并保存到 width 和 height 变量中方便后续使用。</li>
<li>给 context 设置颜色，然后调用 beginPath() 开始绘图。</li>
<li>使用 arc() 方法绘制圆形，它接收 5 个参数，前两个为圆心的 x、y 坐标，第 3 个为半径长度， 第 4 个和第 5 个分别是起始角度和结束角度，因为 arc() 其实是用来绘制一段圆弧，这里让它画一段 0 到 360 度的圆弧，就形成了一个圆形。这里的角度是使用 radian 形式表示的，0 到 360 度可以用 0 到 2 * Math.PI 来表示。</li>
<li>最后使用 ctx.fill() 给圆形填上颜色。</li>
</ul>
<p>这样就成功的绘制了一个圆形，我们在这把它当作一个小球：</p>
<h3 id="移动小球"><a href="#移动小球" class="headerlink" title="移动小球"></a>移动小球</h3><p>不过，这个时候的小球还是静止的，如果想让它移动，那么得修改它的圆心坐标，具体修改的数值则与运动速度有关。在移动小球之前，先看一下 canvas 进行动画的原理：</p>
<p>Canvas 进行动画的原理与传统的电影胶片类似，在一段时间内，绘制图像、更新图像位置或形状、清除画布，重新绘制图像，当在 1 秒内连续执行 60 次或以上这样的操作时，即以 60 帧的速度，就可以产生连续的画面。</p>
<p>那么在 JavaScript 中，浏览器提供了 window.requestAnimationFrame() 方法，它接收一个回调函数作为参数，每一次执行回调函数就相当于 1 帧动画，我们需要通过递归或循环连续调用它，浏览器会尽可能的在 1 秒内执行 60 次回调函数。那么利用它，我们就可以对 canvas 进行重绘，以实现小球的移动效果。</p>
<blockquote>
<p>由于 <code>window.requestAnimationFrame() </code>的调用基本是持续进行的，所以我们也可以把它称为游戏循环（Game loop）。</p>
</blockquote>
<p>接下来我们来看如何编写动画的基础结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(process);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(process);</span><br></pre></td></tr></table></figure>


<p>这里的 <code>process()</code> 函数就是 1 秒钟要执行 60 次的回调函数，每次执行完毕后继续调用 <code>window.requestAnimationFrame(process)</code>进行下一次循环。如果要移动小球，那么就需要把绘制小球和修改圆心 x、y 坐标的代码写到 <code>process()</code> 函数中。</p>
<p>为了方便更新坐标，我们把小球的圆心坐标保存到变量中，以方便对它们进行修改，然后再定义两个新的变量，分别表示在 x 轴方向上的速度 <code>vx</code>，和 y 轴方向上的速度<code> vy</code>，然后把 context 相关的绘图操作放到 <code>process()</code> 中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> vx = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">let</span> vy = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.fillStyle = <span class="string">&quot;hsl(170, 100%, 50%)&quot;</span>;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(x, y, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">  ctx.fill();</span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(process);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(process);</span><br></pre></td></tr></table></figure>

<p>要计算圆心坐标 x、y 的移动距离，我们需要速度和时间，速度这里有了， 那么时间要怎么获取呢？ <code>window.requestAnimationFrame() </code>会把当前时间的毫秒数（即时间戳）传递给回调函数，我们可以把本次调用的时间戳保存起来，然后在下一次调用时计算出执行这 1 帧动画消耗了多少秒，然后根据这个秒数和 x、y 轴方向上的速度去计算移动距离，分别加到 x 和 y 上，以获得最新的位置。注意这里的时间是上一次函数调用和本次函数调用的时间间隔，并不是第 1 次函数调用到当前函数调用总共过去了多少秒，所以相当于是时间增量，需要在之前 x 和 y 的值的基础上进行相加，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> startTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">now</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!startTime) &#123;</span><br><span class="line">    startTime = now;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> seconds = (now - startTime) / <span class="number">1000</span>;</span><br><span class="line">  startTime = now;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新位置</span></span><br><span class="line">  x += vx * seconds;</span><br><span class="line">  y += vy * seconds;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除画布</span></span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  <span class="comment">// 绘制小球</span></span><br><span class="line">  ctx.fillStyle = <span class="string">&quot;hsl(170, 100%, 50%)&quot;</span>;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(x, y, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">  ctx.fill();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(process);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>process() </code>现在接收当前时间戳作为参数，然后做了下面这些操作：</p>
<p>计算上次函数调用与本次函数调用的时间间隔，以秒计，记录本次调用的时间戳用于下一次计算。<br>根据 x、y 方向上的速度，和刚刚计算出来的时间，计算出移动距离。<br>调用<code> clearRect()</code> 清除矩形区域画布，这里的参数，前两个是左上角坐标，后两个是宽高，把 canvas 的宽高传进去就会把整个画布清除。<br>重新绘制小球。<br>现在小球就可以移动了!</p>
<p>重构代码<br>上边的代码适合只有一个小球的情况，如果有多个小球需要绘制，就得编写大量重复的代码，这时我们可以把小球抽象成一个类，里边有绘图、更新位置等操作，还有坐标、速度、半径等属性，重构后的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">context, x, y, r, vx, vy</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.vx = vx;</span><br><span class="line">        <span class="built_in">this</span>.vy = vy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制小球</span></span><br><span class="line">    <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context.fillStyle = <span class="string">&quot;hsl(170, 100%, 50%)&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.context.beginPath();</span><br><span class="line">        <span class="built_in">this</span>.context.arc(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.r, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        <span class="built_in">this</span>.context.fill();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新画布</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">seconds</span></span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params">seconds</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x += <span class="built_in">this</span>.vx * seconds;</span><br><span class="line">        <span class="built_in">this</span>.y += <span class="built_in">this</span>.vy * seconds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里边的代码跟之前的一样，这里就不再赘述了，需要注意的是，Circle 类的 context 画笔属性是通过构造函数传递进来的，更新位置的代码放到了 <code>update() </code>方法中。</p>
<p>对于整个 canvas 的绘制过程，也可以抽象成一个类，当作是游戏或引擎控制器，例如把它放到一个叫 Gameboard 的类中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gameboard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startTime;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.circles = [</span><br><span class="line">            <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">25</span>),</span><br><span class="line">            <span class="keyword">new</span> Circle(ctx, <span class="number">180</span>, <span class="number">180</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">45</span>),</span><br><span class="line">        ];</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(<span class="built_in">this</span>.process.bind(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">process</span>(<span class="params">now</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.startTime) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startTime = now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> seconds = (now - <span class="built_in">this</span>.startTime) / <span class="number">1000</span>;</span><br><span class="line">        <span class="built_in">this</span>.startTime = now;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circles.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.circles[i].update(seconds);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circles.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.circles[i].draw(ctx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(<span class="built_in">this</span>.process.bind(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Gameboard();</span><br></pre></td></tr></table></figure>

<p>在 Gameboard 类中：</p>
<ul>
<li>startTime 保存了上次函数执行的时间戳的属性，放到了构造函数中。</li>
<li>init() 方法创建了一个 circles 数组，里边放了两个示例的小球，这里先不涉及碰撞问题。然后调用 window.requestAnimationFrame() 开启动画。注意这里使用了 bind() 来把 Gameboard 的 this 绑定到回调函数中，以便于访问 Gameboard 中的方法和属性。</li>
<li>process() 方法也写到了这里边，每次执行时会遍历小球数组，对每个小球进行位置更新，然后清除画布，再重新绘制每个小球。</li>
<li>最后初始化 Gameboard 对象就可以开始执行动画了。</li>
</ul>
<p>这个时候有两个小球在移动了。</p>
<p>碰撞检测<br>为了实现仿真的物理特性，多个物体间碰撞会有相应的反应，第一步就是要先检测碰撞。我们先再多加几个小球，以便于碰撞的发生，在 Gameboard 类的 init() 方法中再添加几个小球：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.circles = [</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">30</span>, <span class="number">50</span>, <span class="number">30</span>, -<span class="number">100</span>, <span class="number">390</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">60</span>, <span class="number">180</span>, <span class="number">20</span>, <span class="number">180</span>, -<span class="number">275</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">120</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">120</span>, <span class="number">262</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">150</span>, <span class="number">180</span>, <span class="number">10</span>, -<span class="number">130</span>, <span class="number">138</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">190</span>, <span class="number">210</span>, <span class="number">10</span>, <span class="number">138</span>, -<span class="number">280</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">220</span>, <span class="number">240</span>, <span class="number">10</span>, <span class="number">142</span>, <span class="number">350</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">260</span>, <span class="number">10</span>, <span class="number">135</span>, -<span class="number">460</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">120</span>, <span class="number">285</span>, <span class="number">10</span>, -<span class="number">165</span>, <span class="number">370</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">140</span>, <span class="number">290</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">230</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">160</span>, <span class="number">380</span>, <span class="number">10</span>, -<span class="number">175</span>, -<span class="number">180</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">180</span>, <span class="number">310</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">440</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">310</span>, <span class="number">10</span>, -<span class="number">195</span>, -<span class="number">325</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">60</span>, <span class="number">150</span>, <span class="number">10</span>, -<span class="number">138</span>, <span class="number">420</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">70</span>, <span class="number">430</span>, <span class="number">45</span>, <span class="number">135</span>, -<span class="number">230</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">250</span>, <span class="number">290</span>, <span class="number">40</span>, -<span class="number">140</span>, <span class="number">335</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>然后给小球添加一个碰撞状态，在碰撞时，给两个小球设置为不同的颜色：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">context, x, y, r, vx, vy</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 其它代码</span></span><br><span class="line">    <span class="built_in">this</span>.colliding = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.context.fillStyle = <span class="built_in">this</span>.colliding</span><br><span class="line">      ? <span class="string">&quot;hsl(300, 100%, 70%)&quot;</span></span><br><span class="line">      : <span class="string">&quot;hsl(170, 100%, 50%)&quot;</span>;</span><br><span class="line">    <span class="comment">// 其它代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在来判断小球之间是否发生了碰撞，这个条件很简单，判断两个小球圆心的距离是否小于两个小球的半径之和就可以了，如果小于等于则发生了碰撞，大于则没有发生碰撞。圆心的距离即计算两个坐标点的距离，可以用公式：</p>
<p><img src="image-20210305094325289.png" alt="image-20210305094325289"></p>
<p>x1、y1 和 x2、y2 分别两个小球的圆心坐标。在比较时，可以对半径和进行平方运算，进而省略对距离的开方运算，也就是可以用下方的公式进行比较：</p>
<p><img src="image-20210305094345815.png" alt="image-20210305094345815"></p>
<p>r1 和 r2 为两球的半径。</p>
<p>在 Circle 类中，先添加一个isCircleCollided(other)方法，接收另一个小球对象作为参数，返回比较结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">isCircleCollided</span>(<span class="params">other</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> squareDistance =</span><br><span class="line">      (<span class="built_in">this</span>.x - other.x) * (<span class="built_in">this</span>.x - other.x) +</span><br><span class="line">      (<span class="built_in">this</span>.y - other.y) * (<span class="built_in">this</span>.y - other.y);</span><br><span class="line">  <span class="keyword">let</span> squareRadius = (<span class="built_in">this</span>.r + other.r) * (<span class="built_in">this</span>.r + other.r);</span><br><span class="line">  <span class="keyword">return</span> squareDistance &lt;= squareRadius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>再添加 checkCollideWith(other) 方法，调用 isCircleCollided(other) 判断碰撞后，把两球的碰撞状态设置为 true：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">checkCollideWith</span>(<span class="params">other</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.isCircleCollided(other)) &#123;</span><br><span class="line">    <span class="built_in">this</span>.colliding = <span class="literal">true</span>;</span><br><span class="line">    other.colliding = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们需要使用双循环两两比对小球是否发生了碰撞，由于小球数组存放在 Gameboard 对象中，我们给它添加一个 checkCollision() 方法来检测碰撞：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">checkCollision</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 重置碰撞状态</span></span><br><span class="line">  <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle</span>) =&gt;</span> (circle.colliding = <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circles.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; <span class="built_in">this</span>.circles.length; j++) &#123;</span><br><span class="line">      <span class="built_in">this</span>.circles[i].checkCollideWith(<span class="built_in">this</span>.circles[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为小球在碰撞后就应立即弹开，所以我们一开始要把所有小球的碰撞状态设置为 false，之后在循环中，对每个小球进行检测。这里注意到内层循环是从 i + 1 开始的，这是因为在判断 1 球和 2 球是否碰撞后，就无须再判断 2 球 和 1 球了。</p>
<p>之后在 process() 方法中，执行检测，注意检测应该发生在使用 for 循环更新小球位置的后边才准确：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circles.length; i++) &#123;</span><br><span class="line">  <span class="built_in">this</span>.circles[i].update(seconds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.checkCollision();</span><br></pre></td></tr></table></figure>

<p>现在，可以看到小球在碰撞时，会改变颜色了。</p>
<h3 id="边界碰撞"><a href="#边界碰撞" class="headerlink" title="边界碰撞"></a>边界碰撞</h3><p>上边的代码在执行之后，小球都会穿过边界跑到外边去，那么我们先处理一下边界碰撞的问题。检测边界碰撞需要把四个面全部都处理到，根据圆心坐标和半径来判断是否和边界发生了碰撞。例如跟左边界发生碰撞时，圆心的 x 坐标是小于或等于半径长度的，而跟右边界发生碰撞时，圆心 x 坐标应该大于或等于画布最右侧坐标（即宽度值）减去半径的长度。上边界和下边界类似，只是使用圆心 y 坐标和画布的高度值。在水平方向上（即左右边界）发生碰撞时，小球的运动方向发生改变，只需要把垂直方向上的速度 vy 值取反即可，在垂直方向上碰撞则把 vx 取反。</p>
<p><img src="image-20210305094746518.png" alt="image-20210305094746518"></p>
<p>现在看一下代码的实现，在 Gameboard 类中添加一个 checkEdgeCollision() 方法，根据上边描述的规则编写如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">checkEdgeCollision</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 左右墙壁碰撞</span></span><br><span class="line">        <span class="keyword">if</span> (circle.x &lt; circle.r) &#123;</span><br><span class="line">            circle.vx = -circle.vx;</span><br><span class="line">            circle.x = circle.r;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (circle.x &gt; width - circle.r) &#123;</span><br><span class="line">            circle.vx = -circle.vx;</span><br><span class="line">            circle.x = width - circle.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上下墙壁碰撞</span></span><br><span class="line">        <span class="keyword">if</span> (circle.y &lt; circle.r) &#123;</span><br><span class="line">            circle.vy = -circle.vy;</span><br><span class="line">            circle.y = circle.r;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (circle.y &gt; height - circle.r) &#123;</span><br><span class="line">            circle.vy = -circle.vy;</span><br><span class="line">            circle.y = height - circle.r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在代码中，碰撞时，除了对速度进行取反操作之外，还把小球的坐标修改为紧临边界，防止超出。接下来在 process() 中添加对边界碰撞的检测：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.checkEdgeCollision();</span><br><span class="line"><span class="built_in">this</span>.checkCollision();</span><br></pre></td></tr></table></figure>


<p>这时候可以看到小球在碰到边界时，可以反弹了</p>
<p>但是小球间的碰撞还没有处理，在处理之前，先复习一下向量的基本操作，数学好的同学可以直接跳过，只看相关的代码。</p>
<p>向量的基本操作<br>由于在碰撞时，需要对速度向量（或称为矢量）进行操作，向量是使用类似坐标的形式表示的，例如 &lt; 3, 5 &gt; (这里用 &lt;&gt; 表示向量)，它有长度和方向，对于它的运算有一定的规则，本教程中需要用到向量的加法、减法、乘法、点乘和标准化操作。</p>
<p>向量相加只需要把两个向量的 x 坐标和 y 坐标相加即可，例如：<code>&lt; 3 , 5 &gt; + &lt; 1 , 2 &gt; = &lt; 4 , 7 &gt;</code><br>减法与加法类似，把 x 坐标和 y 坐标相减，例如：<code>&lt; 3 , 5 &gt; − &lt; 1 , 2 &gt; = &lt; 2 , 3 &gt;</code></p>
<p>乘法，这里指的是向量和标量的乘法，标量指的就是普通的数字，结果是把 x 和 y 分别和标量相乘，例如：<code>3 × &lt; 3 , 5 &gt; = &lt; 9 , 15 &gt; </code></p>
<p>点乘是两个向量相乘的一种方式，类似的还有叉乘，但是在本示例中用不到，点乘其实计算的是一个向量在另一个向量上的投影，它的计算方式为两个向量的 x 的积加上 y 的积，它返回的是一个标量，即第 1 个向量在第 2 个向量上投影的长度，例如：<code>&lt; 3 , 5 &gt; ⋅ &lt; 1 , 2 &gt; = 3 × 1 + 5 × 2 = 13 </code></p>
<p>标准化是除掉向量的长度，只剩下方向，这样的向量它的长度为 1，称为单位向量，标准化的过程是让 x 和 y 分别除以向量的长度，因为向量表示的是和原点(0, 0)的距离，所以可以直接使用 </p>
<p><img src="image-20210305095015781.png" alt="image-20210305095015781"><br>  计算长度，例如 &lt; 3, 4 &gt; 标准化后的结果为：<code>&lt; 3 , 5 &gt; ⋅ &lt; 1 , 2 &gt; = 3 × 1 + 5 × 2 = 13</code>。</p>
<p>了解了向量的基本运算后，我们来创建一个 Vector 工具类，来方便我们进行向量的运算，它的代码就是实现了这些运算规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 向量加法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Vector&#125;</span> <span class="variable">v</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">v</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector(<span class="built_in">this</span>.x + v.x, <span class="built_in">this</span>.y + v.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 向量减法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Vector&#125;</span> <span class="variable">v</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">substract</span>(<span class="params">v</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector(<span class="built_in">this</span>.x - v.x, <span class="built_in">this</span>.y - v.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 向量与标量乘法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Vector&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">multiply</span>(<span class="params">s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector(<span class="built_in">this</span>.x * s, <span class="built_in">this</span>.y * s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 向量与向量点乘（投影）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Vector&#125;</span> <span class="variable">v</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">dot</span>(<span class="params">v</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x * v.x + <span class="built_in">this</span>.y * v.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 向量标准化（除去长度）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">distance</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">normalize</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> distance = <span class="built_in">Math</span>.sqrt(<span class="built_in">this</span>.x * <span class="built_in">this</span>.x + <span class="built_in">this</span>.y * <span class="built_in">this</span>.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector(<span class="built_in">this</span>.x / distance, <span class="built_in">this</span>.y / distance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中没有什么特殊的语法和操作，这里就不再赘述了，接下来我们看一下小球的碰撞问题。</p>
<h3 id="碰撞处理"><a href="#碰撞处理" class="headerlink" title="碰撞处理"></a>碰撞处理</h3><p>碰撞处理最主要的部分就是计算碰撞后的速度和方向。通常最简单的碰撞问题是在同一个水平面上的两个物体的碰撞，称为一维碰撞，因为此时只需要计算同一方向上的速度，而我们现在的程序小球是在一个二维平面内运动的，小球之间发生正面相碰（即在同一运动方向）的概率很小，大部分是斜碰（在不同运动方向上擦肩相碰），需要同时计算水平和垂直方向上的速度和方向，这就属于是二维碰撞问题。不过，其实小球之间的碰撞，只有在连心线（两个圆心的连线）上有作用力，而在碰撞接触的切线方向上没有作用力，那么我们只需要知道连心线方向的速度变化就可以了，这样就转换成了一维碰撞。</p>
<p><img src="image-20210305095122013.png" alt="image-20210305095122013"></p>
<p>计算碰撞后的速度时，遵守动量守恒定律和动能守恒定律，公式分别为：</p>
<h4 id="动量守恒定律"><a href="#动量守恒定律" class="headerlink" title="动量守恒定律"></a>动量守恒定律</h4><p><img src="image-20210305095144325.png" alt="image-20210305095144325"></p>
<h4 id="动能守恒定律"><a href="#动能守恒定律" class="headerlink" title="动能守恒定律"></a>动能守恒定律</h4><p><img src="image-20210305095158664.png" alt="image-20210305095158664"></p>
<p>m1、m2 分别为两小球的质量，v1 和 v2 为两小球碰撞前的速度向量，v1’ 和 v2’ 为碰撞后的速度向量。根据这两个公式可以推导出两小球碰撞后的速度公式：</p>
<p><img src="image-20210305095226329.png" alt="image-20210305095226329"></p>
<p>​    </p>
<p>如果不考虑小球的质量，或质量相同，其实就是两小球速度互换，即：</p>
<p><img src="image-20210305095244943.png" alt="image-20210305095244943"></p>
<p>这里我们给小球加上质量，然后套用公式来计算小球碰撞后速度，先在 Circle 类中给小球加上质量 mass 属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">context, x, y, r, vx, vy, mass = <span class="number">1</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 其它代码</span></span><br><span class="line">    <span class="built_in">this</span>.mass = mass;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 Gameboard 类的初始化小球处，给每个小球添加质量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.circles = [</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">30</span>, <span class="number">50</span>, <span class="number">30</span>, -<span class="number">100</span>, <span class="number">390</span>, <span class="number">30</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">60</span>, <span class="number">180</span>, <span class="number">20</span>, <span class="number">180</span>, -<span class="number">275</span>, <span class="number">20</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">120</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">120</span>, <span class="number">262</span>, <span class="number">100</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">150</span>, <span class="number">180</span>, <span class="number">10</span>, -<span class="number">130</span>, <span class="number">138</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">190</span>, <span class="number">210</span>, <span class="number">10</span>, <span class="number">138</span>, -<span class="number">280</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">220</span>, <span class="number">240</span>, <span class="number">10</span>, <span class="number">142</span>, <span class="number">350</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">260</span>, <span class="number">10</span>, <span class="number">135</span>, -<span class="number">460</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">120</span>, <span class="number">285</span>, <span class="number">10</span>, -<span class="number">165</span>, <span class="number">370</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">140</span>, <span class="number">290</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">230</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">160</span>, <span class="number">380</span>, <span class="number">10</span>, -<span class="number">175</span>, -<span class="number">180</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">180</span>, <span class="number">310</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">440</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">310</span>, <span class="number">10</span>, -<span class="number">195</span>, -<span class="number">325</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">60</span>, <span class="number">150</span>, <span class="number">10</span>, -<span class="number">138</span>, <span class="number">420</span>, <span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">70</span>, <span class="number">430</span>, <span class="number">45</span>, <span class="number">135</span>, -<span class="number">230</span>, <span class="number">45</span>),</span><br><span class="line">  <span class="keyword">new</span> Circle(ctx, <span class="number">250</span>, <span class="number">290</span>, <span class="number">40</span>, -<span class="number">140</span>, <span class="number">335</span>, <span class="number">40</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>在 Circle 类中加上 <code>changeVelocityAndDirection(other)</code> 方法来计算碰撞后的速度，它接收另一个小球对象作为参数，同时计算这两个小球碰撞厚的速度和方向，这个是整个引擎的核心，我们一点一点的来看它是如何实现的。首先把两个小球的速度使用 Vector 向量来表示：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">changeVelocityAndDirection</span>(<span class="params">other</span>)</span> &#123;</span><br><span class="line">   <span class="comment">// 创建两小球的速度向量</span></span><br><span class="line">   <span class="keyword">let</span> velocity1 = <span class="keyword">new</span> Vector(<span class="built_in">this</span>.vx, <span class="built_in">this</span>.vy);</span><br><span class="line">   <span class="keyword">let</span> velocity2 = <span class="keyword">new</span> Vector(other.vx, other.vy);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为我们本身就已经使用 vx 和 vy 来表示水平和垂直方向上的速度向量了，所以直接把它们传给 Vector 的构造函数就可以了。velocity1 和 velocity2 分别代表当前小球和碰撞小球的速度向量。</p>
<p>接下来获取连心线方向的向量，也就是两个圆心坐标的差：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vNorm = <span class="keyword">new</span> Vector(<span class="built_in">this</span>.x - other.x, <span class="built_in">this</span>.y - other.y);</span><br></pre></td></tr></table></figure>

<p>接下来获取连心线方向的单位向量和切线方向上的单位向量，这些单位向量代表的是连心线和切线的方向：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unitVNorm = vNorm.normalize();</span><br><span class="line"><span class="keyword">let</span> unitVTan = <span class="keyword">new</span> Vector(-unitVNorm.y, unitVNorm.x);</span><br></pre></td></tr></table></figure>


<p>unitVNorm 是连心线方向单位向量，unitVTan 是切线方向单位向量，切线方向其实就是把连心线向量的 x、y 坐标互换，并把 y 坐标取反。根据这两个单位向量，使用点乘计算小球速度在这两个方向上的投影：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v1n = velocity1.dot(unitVNorm);</span><br><span class="line"><span class="keyword">let</span> v1t = velocity1.dot(unitVTan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v2n = velocity2.dot(unitVNorm);</span><br><span class="line"><span class="keyword">let</span> v2t = velocity2.dot(unitVTan);</span><br></pre></td></tr></table></figure>

<p>计算结果是一个标量，也就是没有方向的速度值。v1n 和 v1t 表示当前小球在连心线和切线方向的速度值，v2n 和 v2t 则表示的是碰撞小球 的速度值。在计算出两小球的速度值之后，我们就有了碰撞后的速度公式所需要的变量值了，直接用代码把公式套用进去：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v1nAfter = (v1n * (<span class="built_in">this</span>.mass - other.mass) + <span class="number">2</span> * other.mass * v2n) / (<span class="built_in">this</span>.mass + other.mass);</span><br><span class="line"><span class="keyword">let</span> v2nAfter = (v2n * (other.mass - <span class="built_in">this</span>.mass) + <span class="number">2</span> * <span class="built_in">this</span>.mass * v1n) / (<span class="built_in">this</span>.mass + other.mass);</span><br></pre></td></tr></table></figure>

<p>v1nAfter 和 v2nAfter 分别是两小球碰撞后的速度，现在可以先判断一下，如果 v1nAfter 小于 v2nAfter，那么第 1 个小球和第 2 个小球会越来越远，此时不用处理碰撞：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (v1nAfter &lt; v2nAfter) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再给碰撞后的速度加上方向，计算在连心线方向和切线方向上的速度，只需要让速度标量跟连心线单位向量和切线单位向量相乘：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v1VectorNorm = unitVNorm.multiply(v1nAfter);</span><br><span class="line"><span class="keyword">let</span> v1VectorTan = unitVTan.multiply(v1t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v2VectorNorm = unitVNorm.multiply(v2nAfter);</span><br><span class="line"><span class="keyword">let</span> v2VectorTan = unitVTan.multiply(v2t);</span><br></pre></td></tr></table></figure>

<p>这样有了两个小球连心线上的新速度向量和切线方向上的新速度向量，最后把连心线上的速度向量和切线方向的速度向量进行加法操作，就能获得碰撞后小球的速度向量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> velocity1After = v1VectorNorm.add(v1VectorTan);</span><br><span class="line"><span class="keyword">let</span> velocity2After = v2VectorNorm.add(v2VectorTan);</span><br></pre></td></tr></table></figure>

<p>之后我们把向量中的 x 和 y 分别还原到小球的 vx 和 vy 属性中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.vx = velocity1After.x;</span><br><span class="line"><span class="built_in">this</span>.vy = velocity1After.y;</span><br><span class="line"></span><br><span class="line">other.vx = velocity2After.x;</span><br><span class="line">other.vy = velocity2After.y;</span><br></pre></td></tr></table></figure>

<p>最后在 checkCollideWith() 方法的 if 语句中调用此方法，即在检测到碰撞时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">checkCollideWith</span>(<span class="params">other</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.isCircleCollided(other)) &#123;</span><br><span class="line">    <span class="built_in">this</span>.colliding = <span class="literal">true</span>;</span><br><span class="line">    other.colliding = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.changeVelocityAndDirection(other); <span class="comment">// 在这里调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时，小球的碰撞效果就实现了。</p>
<h3 id="非弹性碰撞"><a href="#非弹性碰撞" class="headerlink" title="非弹性碰撞"></a>非弹性碰撞</h3><p>现在小球之间的碰撞属于完全弹性碰撞，即碰撞之后不会有能量损失，这样小球永远不会停止运动，我们可以让小球在碰撞之后损失一点能量，来模拟更真实的物理效果。要让小球碰撞后有能量损失，可以使用恢复系数，它是一个取值范围为 0 到 1 的数值，每次碰撞后，乘以它就可以减慢速度，如果恢复系数为 1 则为完全弹性碰撞，为 0 则是完全非弹性碰撞，之间的数值为非弹性碰撞，现实生活中的碰撞都是非弹性碰撞。</p>
<p>先看一下边界碰撞，这个比较简单，假设边界的恢复系数为 0.8，然后在每次对速度取反的时候乘以它就可以了，把 Gameboard checkEdgeCollision()方法作如下改动：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">checkEdgeCollision</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cor = <span class="number">0.8</span>;                  <span class="comment">// 设置恢复系统</span></span><br><span class="line">  <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 左右墙壁碰撞</span></span><br><span class="line">    <span class="keyword">if</span> (circle.x &lt; circle.r) &#123;</span><br><span class="line">      circle.vx = -circle.vx * cor; <span class="comment">// 加上恢复系数</span></span><br><span class="line">      circle.x = circle.r;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (circle.x &gt; width - circle.r) &#123;</span><br><span class="line">      circle.vx = -circle.vx * cor; <span class="comment">// 加上恢复系数</span></span><br><span class="line">      circle.x = width - circle.r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下墙壁碰撞</span></span><br><span class="line">    <span class="keyword">if</span> (circle.y &lt; circle.r) &#123;</span><br><span class="line">      circle.vy = -circle.vy * cor; <span class="comment">// 加上恢复系数</span></span><br><span class="line">      circle.y = circle.r;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (circle.y &gt; height - circle.r) &#123;</span><br><span class="line">      circle.vy = -circle.vy * cor; <span class="comment">// 加上恢复系数</span></span><br><span class="line">      circle.y = height - circle.r;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来设置小球的恢复系数，给 Circle 类再加上一个恢复系数 cor 属性，每个小球可以设置不同的数值，来让它们有不同的弹性，然后在初始化小球时设置随意的恢复系数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">context, x, y, r, vx, vy, mass = <span class="number">1</span>, cor = <span class="number">1</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 其它代码</span></span><br><span class="line">    <span class="built_in">this</span>.cor = cor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gameboard</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.circles = [</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">30</span>, <span class="number">50</span>, <span class="number">30</span>, -<span class="number">100</span>, <span class="number">390</span>, <span class="number">30</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">60</span>, <span class="number">180</span>, <span class="number">20</span>, <span class="number">180</span>, -<span class="number">275</span>, <span class="number">20</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">120</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">120</span>, <span class="number">262</span>, <span class="number">100</span>, <span class="number">0.3</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">150</span>, <span class="number">180</span>, <span class="number">10</span>, -<span class="number">130</span>, <span class="number">138</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">190</span>, <span class="number">210</span>, <span class="number">10</span>, <span class="number">138</span>, -<span class="number">280</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">220</span>, <span class="number">240</span>, <span class="number">10</span>, <span class="number">142</span>, <span class="number">350</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">260</span>, <span class="number">10</span>, <span class="number">135</span>, -<span class="number">460</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">120</span>, <span class="number">285</span>, <span class="number">10</span>, -<span class="number">165</span>, <span class="number">370</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">140</span>, <span class="number">290</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">230</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">160</span>, <span class="number">380</span>, <span class="number">10</span>, -<span class="number">175</span>, -<span class="number">180</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">180</span>, <span class="number">310</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">440</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">100</span>, <span class="number">310</span>, <span class="number">10</span>, -<span class="number">195</span>, -<span class="number">325</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">60</span>, <span class="number">150</span>, <span class="number">10</span>, -<span class="number">138</span>, <span class="number">420</span>, <span class="number">10</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">70</span>, <span class="number">430</span>, <span class="number">45</span>, <span class="number">135</span>, -<span class="number">230</span>, <span class="number">45</span>, <span class="number">0.7</span>),</span><br><span class="line">      <span class="keyword">new</span> Circle(ctx, <span class="number">250</span>, <span class="number">290</span>, <span class="number">40</span>, -<span class="number">140</span>, <span class="number">335</span>, <span class="number">40</span>, <span class="number">0.7</span>),</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加上恢复系数之后，小球碰撞后的速度计算也需要改变一下，可以简单的让 v1nAfter 和 v2nAfter 乘以小球的恢复系数，也可以使用带有恢复系数的速度公式（这两种方式我暂时还不太清楚区别，有兴趣的小伙伴可以自己研究一下），公式如下：</p>
<p><img src="image-20210305095726505.png" alt="image-20210305095726505"></p>
<p>接着把公式转换为代码，在 Circle 类的 changeVelocityAndDirection() 方法中，替换掉 v1nAfter 和 v2nAfter 的计算公式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cor = <span class="built_in">Math</span>.min(<span class="built_in">this</span>.cor, other.cor);</span><br><span class="line"><span class="keyword">let</span> v1nAfter =</span><br><span class="line">    (<span class="built_in">this</span>.mass * v1n + other.mass * v2n + cor * other.mass * (v2n - v1n)) /</span><br><span class="line">    (<span class="built_in">this</span>.mass + other.mass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v2nAfter =</span><br><span class="line">    (<span class="built_in">this</span>.mass * v1n + other.mass * v2n + cor * <span class="built_in">this</span>.mass * (v1n - v2n)) /</span><br><span class="line">    (<span class="built_in">this</span>.mass + other.mass);</span><br></pre></td></tr></table></figure>


<p>这里要注意的是两小球碰撞时的恢复系数应取两者的最小值，按照常识，弹性小的无论是去撞别人还是别人撞它，都会有同样的效果。现在小球碰撞后速度会有所减慢，不过还差一点，我们可以加上重力来让小球自然下落。</p>
<h3 id="重力"><a href="#重力" class="headerlink" title="重力"></a>重力</h3><p>添加重力比较简单，先在全局定义重力加速度常量，然后在小球更新垂直方向上的速度时，累计重力加速度就可以了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gravity = <span class="number">980</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">seconds</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.vy += gravity * seconds; <span class="comment">// 重力加速度</span></span><br><span class="line">    <span class="built_in">this</span>.x += <span class="built_in">this</span>.vx * seconds;</span><br><span class="line">    <span class="built_in">this</span>.y += <span class="built_in">this</span>.vy * seconds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>重力加速度大约是 <code>9.8 m / s 2 9.8m/s^29.8m/s </code><br> ，但是由于我们的画布是以象素为单位的，所以使用 9.8 看起来会像是没有重力，或者像是从很远的地方观察小球，这时候可以把重力加速度放大一定倍数来达到更逼真的效果。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>现在我们这个简单的 JavaScript 物理引擎就完成了，实现了物理引擎最基本的部分，可以有一个完整的掉落和碰撞的效果，要做一个更逼真的物理引擎还需要考虑更多的因素和更复杂的公式，例如考虑一下摩擦力、空气阻力、碰撞后的旋转角度等，并且这个 canvas 的帧率也会有一定的问题，如果有的小球速度过快，但是如果来不及执行下一次回调函数更新它的位置，那么它可能就直接穿过碰撞的小球到另一边了。</p>
<p>来总结一下开发过程：</p>
<ul>
<li><p>使用 context 绘制小球。</p>
</li>
<li><p>搭建 Canvas 动画基础结构，主要使用 window.requestAnimationFrame方法反复执行回调函数。</p>
</li>
<li><p>移动小球，通过小球的速度和函数执行时的时间戳来计算移动距离。</p>
</li>
<li><p>碰撞检测，通过比对两个小球的距离和它们半径的和。</p>
</li>
<li><p>边界碰撞的检测和方向改变。</p>
</li>
<li><p>小球之间的碰撞，应用速度公式和向量操作计算出碰撞后的速度和方向。</p>
</li>
<li><p>利用恢复系数实现非弹性碰撞。</p>
</li>
<li><p>添加重力效果。<br>代码可以在以下地址中查看：</p>
<p><a href="https://github.com/zxuqian/html-css-examples/tree/master/35-collision-physics">https://github.com/zxuqian/html-css-examples/tree/master/35-collision-physics</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>前端</category>
        <category>实现</category>
      </categories>
      <tags>
        <tag>前端-实现</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库读写分离</title>
    <url>/2021/04/23/java/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20mysql/4.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h1 id="Linux安装MySQL-rpm"><a href="#Linux安装MySQL-rpm" class="headerlink" title="Linux安装MySQL - rpm"></a>Linux安装MySQL - rpm</h1><a id="more"></a>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p><a href="https://blog.csdn.net/qq_41510551/article/details/110731610">https://blog.csdn.net/qq_41510551/article/details/110731610</a></p>
<ol>
<li>查看是否已经安装了mysql</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无输出说明没有安装</span></span><br><span class="line">rpm -qa|grep mysql </span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>打开网址：MySQL Yum存储库: <a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p>
</li>
<li><p>找到对应linux的版本进行下载<br>查看自己的版本：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br><span class="line"><span class="comment"># CentOS Linux release 7.8.2003 (Core)</span></span><br></pre></td></tr></table></figure>
<p><img src="image-20210719181422349.png" alt="image-20210719181422349"></p>
<p><img src="image-20210719181645758.png" alt="image-20210719181645758"></p>
<ol start="4">
<li>下载和安装mysql源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>​    注： 如果显示wget未找到命令，则需要先安装wget：</p>
<p>​    yum -y install wget</p>
<p>​    然后再次执行上面命令</p>
<ol start="5">
<li>安装mysql源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>


<ol start="6">
<li><p>检查是否安装成功：<br>执行成功后会在/etc/yum.repos.d/目录下生成两个repo文件mysql-community.repo及 mysql-community-source.repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@localhost yum.repos.d]<span class="comment"># ls -l</span></span><br></pre></td></tr></table></figure>
<p><img src="image-20210719182324913.png" alt="image-20210719182324913"></p>
</li>
</ol>
<ol start="7">
<li><p>查看mysql相关资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="image-20210719182420291.png" alt="image-20210719182420291"></p>
</li>
<li><p>选择masql版本（根据需求）</p>
<p>使用MySQL Yum Repository安装MySQL，默认会选择当前最新的稳定版本</p>
</li>
</ol>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前yum repolist的所有版本</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br></pre></td></tr></table></figure>


<ol start="9">
<li><p>安装mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<p>该命令会安装MySQL服务器 (mysql-community-server) 及其所需的依赖、相关组件，包括mysql-community-client、mysql-community-common、mysql-community-libs等。安装时间会比较长</p>
</li>
</ol>
<p>注：可能会报：<strong>Error: Unable to find a match: mysql-community-server</strong></p>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum module <span class="built_in">disable</span> mysql</span><br><span class="line"></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>


<ol start="10">
<li>启动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询状态</span></span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>


<h2 id="2-修改密码及登录"><a href="#2-修改密码及登录" class="headerlink" title="2. 修改密码及登录"></a>2. 修改密码及登录</h2><h3 id="2-1-初始密码"><a href="#2-1-初始密码" class="headerlink" title="2.1 初始密码"></a>2.1 初始密码</h3><p>MySQL第一次启动后会创建超级管理员账号root@localhost，初始密码存储在日志文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"><span class="comment"># 2020-12-06T07:32:41.399112Z 6 [Note] [MY-010454] [Server] A </span></span><br><span class="line"><span class="comment"># temporary password is generated for root@localhost: ipx.ng;e/8gK</span></span><br><span class="line"></span><br><span class="line">icx.ax;e/9gK</span><br></pre></td></tr></table></figure>


<h3 id="2-2-修改默认密码"><a href="#2-2-修改默认密码" class="headerlink" title="2.2 修改默认密码"></a>2.2 修改默认密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先进行登录</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment"># ERROR 1819 (HY000): Your password does not satisfy the current policy requirements </span></span><br><span class="line"><span class="comment">#密码太弱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录其他服务器的mysql</span></span><br><span class="line">mysql -uroot -proot@123 -h192.168.88.130</span><br></pre></td></tr></table></figure>


<h3 id="2-3-修改密码校验强度："><a href="#2-3-修改密码校验强度：" class="headerlink" title="2.3 修改密码校验强度："></a>2.3 修改密码校验强度：</h3><h4 id="2-3-1-centos8以下"><a href="#2-3-1-centos8以下" class="headerlink" title="2.3.1 centos8以下"></a>2.3.1 centos8以下</h4><p>使用复杂密码，MySQL默认的密码策略是要包含数字、字母及特殊字符；<br>如果只是测试用，不想用那么复杂的密码，可以修改默认策略，即validate_password_policy（以及validate_password_length等相关参数），使其支持简单密码的设定，具体方法可以参考：设置密码策略；<br>修改配置文件<code>/etc/my.cnf</code>，添加validate_password=OFF，保存并重启MySQL</p>
<h4 id="2-3-2-8以上"><a href="#2-3-2-8以上" class="headerlink" title="2.3.2 8以上"></a>2.3.2 8以上</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看mysql的密码强度</span></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;%valid%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| innodb_validate_tablespace_paths     | ON     |</span><br><span class="line">| validate_password.check_user_name    | ON     |</span><br><span class="line">| validate_password.dictionary_file    |        |</span><br><span class="line">| validate_password.length             | 8      |</span><br><span class="line">| validate_password.mixed_case_count   | 1      |</span><br><span class="line">| validate_password.number_count       | 1      |</span><br><span class="line"><span class="comment"># 密码强度 默认为 MEDIUM</span></span><br><span class="line">| validate_password.policy             | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码强度为low validate_password.policy为查出的文件名</span></span><br><span class="line"><span class="built_in">set</span> global validate_password.policy=low;</span><br></pre></td></tr></table></figure>


<h2 id="3-设置编码"><a href="#3-设置编码" class="headerlink" title="3. 设置编码"></a>3. 设置编码</h2><h3 id="3-1-查看编码"><a href="#3-1-查看编码" class="headerlink" title="3.1 查看编码"></a>3.1 查看编码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h3 id="3-2-设置编码"><a href="#3-2-设置编码" class="headerlink" title="3.2 设置编码"></a>3.2 设置编码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init-connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="4-设置开机自启动"><a href="#4-设置开机自启动" class="headerlink" title="4. 设置开机自启动"></a>4. 设置开机自启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>


<h2 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5. 关闭防火墙"></a>5. 关闭防火墙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># firewall防火墙</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment"># 查看转态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="comment">#注意分清楚linux的版本 命令会有所不同</span></span><br><span class="line"><span class="comment">#查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all </span><br></pre></td></tr></table></figure>


<h2 id="6-删除mysql"><a href="#6-删除mysql" class="headerlink" title="6. 删除mysql"></a>6. 删除mysql</h2><p>检查mariadb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure>


<p>如无则跳过下面一条 删除mariadb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -e --nodeps mariadb-server</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -e --nodeps mariadb</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -e --nodeps mariadb-libs</span></span><br></pre></td></tr></table></figure>


<p>检查mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -qa|grep mysql</span></span><br><span class="line">mysql-community-client-8.0.22-1.el7.x86_64</span><br><span class="line">mysql-community-common-8.0.22-1.el7.x86_64</span><br><span class="line">mysql-community-client-plugins-8.0.22-1.el7.x86_64</span><br><span class="line">mysql-community-libs-compat-8.0.22-1.el7.x86_64</span><br><span class="line">mysql80-community-release-el7-3.noarch</span><br><span class="line">mysql-community-libs-8.0.22-1.el7.x86_64</span><br><span class="line">mysql-community-server-8.0.22-1.el7.x86_64</span><br></pre></td></tr></table></figure>


<p>删除mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -e --nodeps xxx</span></span><br></pre></td></tr></table></figure>
<p><img src="20201207100517190.png" alt="在这里插入图片描述"></p>
<h1 id="SpringBoot-Mybatis-plus-mysql实现读写分离"><a href="#SpringBoot-Mybatis-plus-mysql实现读写分离" class="headerlink" title="SpringBoot + Mybatis-plus + mysql实现读写分离"></a>SpringBoot + Mybatis-plus + mysql实现读写分离</h1><blockquote>
<p>参考网址：<a href="https://www.cnblogs.com/blacksmith4/p/13748414.html">https://www.cnblogs.com/blacksmith4/p/13748414.html</a></p>
</blockquote>
<h2 id="1-数据库设置"><a href="#1-数据库设置" class="headerlink" title="1. 数据库设置"></a>1. 数据库设置</h2><h3 id="1-0-注"><a href="#1-0-注" class="headerlink" title="1.0 注"></a>1.0 注</h3><p>当主从复制读写分离建立成功后，从库就只能进行读取，不能进行其他的操作，否则会出错导致，Slave_SQL_Running变为No，响应报错信息会显示在Last_Error中：</p>
<p>![img](4. 数据库读写分离/20190802141257449.png)</p>
<p>出问题后解决方法：</p>
<p>将主库的数据备份出来，然后再导入从库即可</p>
<p>然后将从库断开<code>stop slave;</code></p>
<p>再重新连接<code>start slave;</code>即可</p>
<h3 id="1-1-修改uuid（对于克隆的虚拟机）"><a href="#1-1-修改uuid（对于克隆的虚拟机）" class="headerlink" title="1.1 修改uuid（对于克隆的虚拟机）"></a>1.1 修改uuid（对于克隆的虚拟机）</h3><p>克隆的虚拟机会导致每个数据库的 uuid 相同，需要修改为不同的 uuid。</p>
<h4 id="1-1-1-登陆mysql"><a href="#1-1-1-登陆mysql" class="headerlink" title="1.1.1 登陆mysql"></a>1.1.1 登陆mysql</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找mysql的安装地址</span></span><br><span class="line">show variables like <span class="string">&#x27;datadir&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过mysql生成一个uuid</span></span><br><span class="line">select uuid();</span><br></pre></td></tr></table></figure>


<h4 id="1-1-2-进入datadir目录"><a href="#1-1-2-进入datadir目录" class="headerlink" title="1.1.2 进入datadir目录"></a>1.1.2 进入datadir目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/mysql/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改server-uuid</span></span><br><span class="line">vi auto.cnf</span><br></pre></td></tr></table></figure>


<h3 id="1-2-主库配置"><a href="#1-2-主库配置" class="headerlink" title="1.2 主库配置"></a>1.2 主库配置</h3><p>主数据库（master）中新建一个用户用于从数据库（slave）读取主数据库二进制日志，sql 语句如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建角色</span></span><br><span class="line">mysql&gt; CREATE USER <span class="string">&#x27;master&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;master@123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#分配权限</span></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>


<p>修改 mysql 配置文件<code>vim /etc/my.cnf</code>开启二进制日志，新增部分如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br></pre></td></tr></table></figure>


<p>重启数据库，查看主库状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br></pre></td></tr></table></figure>
<p>![image-20210720133458497](4. 数据库读写分离/image-20210720133458497.png)</p>
<h4 id="设置备份时需要忽略哪些库"><a href="#设置备份时需要忽略哪些库" class="headerlink" title="设置备份时需要忽略哪些库"></a>设置备份时需要忽略哪些库</h4><p>默认情况下备份是主库的全部操作都会备份到从库，实际可能需要忽略某些库，可以在主库中增加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不同步哪些数据库</span></span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line">binlog-ignore-db = <span class="built_in">test</span></span><br><span class="line">binlog-ignore-db = information_schema</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只同步哪些数据库，除此之外，其他不同步</span></span><br><span class="line">binlog-do-db = game</span><br></pre></td></tr></table></figure>


<h3 id="1-3-从库配置"><a href="#1-3-从库配置" class="headerlink" title="1.3. 从库配置"></a>1.3. 从库配置</h3><h4 id="1-3-1-修改-mysql-配置文件"><a href="#1-3-1-修改-mysql-配置文件" class="headerlink" title="1.3.1 修改 mysql 配置文件"></a>1.3.1 修改 mysql 配置文件</h4><p><code>vim /etc/my.cnf</code>开启二进制日志，新增部分如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">relay-log-index=slave-relay-bin.index</span><br><span class="line">relay-log=slave-relay-bin</span><br></pre></td></tr></table></figure>


<h4 id="1-3-2-连接主库"><a href="#1-3-2-连接主库" class="headerlink" title="1.3.2 连接主库"></a>1.3.2 连接主库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MASTER_HOST：主节点ip</span></span><br><span class="line"><span class="comment"># MASTER_USER：主节点角色</span></span><br><span class="line"><span class="comment"># MASTER_PASSWORD：主节点密码</span></span><br><span class="line"><span class="comment"># MASTER_LOG_FILE：主节点show master status中查出来的 file</span></span><br><span class="line"><span class="comment"># MASTER_LOG_POS：主节点show master status中查出来的 position</span></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">         MASTER_HOST=<span class="string">&#x27;192.168.88.130&#x27;</span>,</span><br><span class="line">         MASTER_USER=<span class="string">&#x27;master&#x27;</span>,</span><br><span class="line">         MASTER_PASSWORD=<span class="string">&#x27;master@123&#x27;</span>,</span><br><span class="line">         MASTER_LOG_FILE=<span class="string">&#x27;master-bin.000001&#x27;</span>,</span><br><span class="line">         MASTER_LOG_POS=156;</span><br></pre></td></tr></table></figure>


<h4 id="1-3-3-启动链路-备份"><a href="#1-3-3-启动链路-备份" class="headerlink" title="1.3.3 启动链路/备份"></a>1.3.3 启动链路/备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启备份</span></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止备份</span></span><br><span class="line"><span class="comment"># 当需要修改master节点时需要先停止备份然后才能操作</span></span><br><span class="line">mysql&gt; STOP slave;</span><br></pre></td></tr></table></figure>


<h4 id="1-3-4-查看是否连接成功"><a href="#1-3-4-查看是否连接成功" class="headerlink" title="1.3.4 查看是否连接成功"></a>1.3.4 查看是否连接成功</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status \G;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slave_IO_Running 和 Slave_SQL_Running 必须都是 yes</span></span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若Slave_IO_Running显示为connecting</span></span><br><span class="line"><span class="comment"># 可是在从节点服务器上远程登陆下主节点</span></span><br><span class="line"><span class="comment"># 其他原因可能为：https://blog.csdn.net/mbytes/article/details/86711508</span></span><br><span class="line"><span class="comment"># 1.网络不通</span></span><br><span class="line"><span class="comment"># 2.账户密码错误</span></span><br><span class="line"><span class="comment"># 3.防火墙</span></span><br><span class="line"><span class="comment"># 4.mysql配置文件问题</span></span><br><span class="line"><span class="comment"># 5.连接服务器时语法</span></span><br><span class="line"><span class="comment"># 6.主服务器mysql权限</span></span><br><span class="line">mysql -uroot -proot@123 -h192.168.88.130</span><br></pre></td></tr></table></figure>
<p>![image-20210720152609117](4. 数据库读写分离/image-20210720152609117.png)</p>
<h2 id="2-代码层面进行读写分离"><a href="#2-代码层面进行读写分离" class="headerlink" title="2. 代码层面进行读写分离"></a>2. 代码层面进行读写分离</h2><h3 id="2-0-前提"><a href="#2-0-前提" class="headerlink" title="2.0 前提"></a>2.0 前提</h3><p>需要先配置好mybatis-plus</p>
<h3 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1 依赖"></a>2.1 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ###################mybatis-plus全部依赖################### --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus启动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码自动生成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity前端模板，mybatis-puls分析sql性能时必须 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2.3&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- druid jdbc连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 如果是放在resource目录 classpath:/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">com/example/demo/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment">#实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.example.demo.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment">#主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;</span></span><br><span class="line">    <span class="attr">field-strategy:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#刷新mapper 调试神器</span></span><br><span class="line">    <span class="attr">refresh-mapper:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#配置JdbcTypeForNull</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">write-db-ip:</span> <span class="number">192.168</span><span class="number">.88</span><span class="number">.130</span></span><br><span class="line">  <span class="attr">read-db-ip:</span> <span class="number">192.168</span><span class="number">.88</span><span class="number">.133</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;spring.write-db-ip&#125;:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root@123</span></span><br><span class="line">      <span class="comment">#----数据库连接池配置----------------------</span></span><br><span class="line">      <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">50</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">#maxPoolPreparedStatementPerConnectionSize: 20</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">connectionProperties:</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">          <span class="attr">stat:</span></span><br><span class="line">            <span class="attr">mergeSql:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slowSqlMillis:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="comment">#useGlobalDataSourceStat: true</span></span><br><span class="line">    <span class="attr">slave:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;spring.read-db-ip&#125;:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root@123</span></span><br><span class="line">      <span class="comment">#----数据库连接池配置----------------------</span></span><br><span class="line">      <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">50</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">#maxPoolPreparedStatementPerConnectionSize: 20</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">connectionProperties:</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">          <span class="attr">stat:</span></span><br><span class="line">            <span class="attr">mergeSql:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slowSqlMillis:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="comment">#useGlobalDataSourceStat: true</span></span><br></pre></td></tr></table></figure>


<h3 id="2-3-SpringBoot启动类设置"><a href="#2-3-SpringBoot启动类设置" class="headerlink" title="2.3 SpringBoot启动类设置"></a>2.3 SpringBoot启动类设置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启基于注解的缓存</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span> <span class="comment">// 设置动态数据源需要，禁用数据源自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若mybatis-plus的配置文件中未配置：开启springBoot事务，mapper文件扫描</p>
<p>启动类中还需配置:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.bbdog.dao.mapper*&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span><span class="comment">//开启springBoot事务</span></span><br></pre></td></tr></table></figure>


<h3 id="2-4-创建数据源类型"><a href="#2-4-创建数据源类型" class="headerlink" title="2.4 创建数据源类型"></a>2.4 创建数据源类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SourceName</span> </span>&#123;</span><br><span class="line">    read(<span class="string">&quot;read&quot;</span>), write(<span class="string">&quot;write&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    SourceName(String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-5-构建切换数据源类"><a href="#2-5-构建切换数据源类" class="headerlink" title="2.5 构建切换数据源类"></a>2.5 构建切换数据源类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceContextHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将 read 数据源的 key作为默认数据源的 key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> SourceName.read.value();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源的 key集合，用于切换时判断数据源是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; dataSourceKeys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSourceKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        contextHolder.set(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSourceKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSourceKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 数据源key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containDataSourceKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSourceKeys.contains(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据源keys</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addDataSourceKeys</span><span class="params">(Collection&lt;? extends Object&gt; keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSourceKeys.addAll(keys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-6-继承AbstractRoutingDataSource接口实现动态数据源"><a href="#2-6-继承AbstractRoutingDataSource接口实现动态数据源" class="headerlink" title="2.6 继承AbstractRoutingDataSource接口实现动态数据源"></a>2.6 继承AbstractRoutingDataSource接口实现动态数据源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoChooseDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果不希望数据源在启动配置时就加载好，可以定制这个方法，从任何你希望的地方读取并返回数据源</span></span><br><span class="line"><span class="comment">     * 比如从数据库、文件、外部接口等读取数据源信息，并最终返回一个DataSource实现类对象即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.determineTargetDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果希望所有数据源在启动配置时就加载好，这里通过设置数据源Key值来切换数据，定制这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceContextHolder.getDataSourceKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultTargetDataSource</span><span class="params">(Object defaultDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSources</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetDataSources</span><span class="params">(Map&lt;Object, Object&gt; dataSources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(dataSources);</span><br><span class="line">        <span class="comment">// 将数据源的 key 放到数据源上下文的 key 集合中，用于切换时判断数据源是否有效</span></span><br><span class="line">        DynamicDataSourceContextHolder.addDataSourceKeys(dataSources.keySet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-7-数据源配置类设置"><a href="#2-7-数据源配置类设置" class="headerlink" title="2.7 数据源配置类设置"></a>2.7 数据源配置类设置</h3><p>参照自动配置类MybatisPlusAutoConfiguration.java中的SqlSessionFactory配置来为添加自己的动态数据源 <code>可双击shift搜错MybatisPlusAutoConfiguration 查看该类内容</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态数据源配置**********************************↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="comment">     ***************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;write&quot;, destroyMethod = &quot;close&quot;, initMethod = &quot;init&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.master&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">master</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> druidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;read&quot;, destroyMethod = &quot;close&quot;, initMethod = &quot;init&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.slave&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">slave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> druidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span><span class="comment">//自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">autoChooseDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AutoChooseDataSource autoChooseDataSource = <span class="keyword">new</span> AutoChooseDataSource();</span><br><span class="line">        Map&lt;Object, Object&gt; dataSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        dataSourceMap.put(SourceName.write.value(), master());</span><br><span class="line">        dataSourceMap.put(SourceName.read.value(), slave());</span><br><span class="line">        <span class="comment">// 将 read 数据源作为默认指定的数据源</span></span><br><span class="line">        autoChooseDataSource.setDefaultTargetDataSource(slave());</span><br><span class="line">        <span class="comment">// 将 read 和 write 数据源作为指定的数据源</span></span><br><span class="line">        autoChooseDataSource.setTargetDataSources(dataSourceMap);</span><br><span class="line">        <span class="keyword">return</span> autoChooseDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置事务管理, 使用事务时在方法头部添加@Transactional注解即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(autoChooseDataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态数据源配置**********************************↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class="line"><span class="comment">     ***************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-8-创建数据源切换注解"><a href="#2-8-创建数据源切换注解" class="headerlink" title="2.8 创建数据源切换注解"></a>2.8 创建数据源切换注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SourceName <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-9-创建数据源切换切面"><a href="#2-9-创建数据源切换切面" class="headerlink" title="2.9 创建数据源切换切面"></a>2.9 创建数据源切换切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(-1)</span>  <span class="comment">// 该切面应当先于 @Transactional 执行</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger _log = LoggerFactory.getLogger(DynamicDataSourceAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(dataSource))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public void switchDataSource(JoinPoint point, DataSource dataSource) &#123;</span></span><br><span class="line"><span class="string">        if (!DynamicDataSourceContextHolder.containDataSourceKey(dataSource.value().name())) &#123;</span></span><br><span class="line"><span class="string">            _log.error(&quot;</span>DataSource [&#123;&#125;] 不存在，使用默认 DataSource [&#123;&#125;] <span class="string">&quot;,</span></span><br><span class="line"><span class="string">                    dataSource.value(),</span></span><br><span class="line"><span class="string">                    DynamicDataSourceContextHolder.getDataSourceKey());</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            // 切换数据源</span></span><br><span class="line"><span class="string">            DynamicDataSourceContextHolder.setDataSourceKey(dataSource.value().name());</span></span><br><span class="line"><span class="string">            _log.debug(&quot;</span>切换 DataSource 至 [&#123;&#125;] ，引起切换方法是 [&#123;&#125;]<span class="string">&quot;,</span></span><br><span class="line"><span class="string">                    DynamicDataSourceContextHolder.getDataSourceKey(),</span></span><br><span class="line"><span class="string">                    point.getSignature());</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * 重置数据源</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param point</span></span><br><span class="line"><span class="string">     * @param dataSource</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    @After(&quot;</span><span class="meta">@annotation(dataSource)</span>)<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public void restoreDataSource(JoinPoint point, DataSource dataSource) &#123;</span></span><br><span class="line"><span class="string">        // 将数据源置为默认数据源</span></span><br><span class="line"><span class="string">        DynamicDataSourceContextHolder.clearDataSourceKey();</span></span><br><span class="line"><span class="string">        _log.debug(&quot;</span>重置 DataSource 至 [&#123;&#125;] ，引起重置的方法是 [&#123;&#125;]<span class="string">&quot;,</span></span><br><span class="line"><span class="string">                DynamicDataSourceContextHolder.getDataSourceKey(),</span></span><br><span class="line"><span class="string">                point.getSignature());</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-10-示例"><a href="#2-10-示例" class="headerlink" title="2.10 示例"></a>2.10 示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="comment">// 依靠注解，使用不同的数据源</span></span><br><span class="line"><span class="meta">@DataSource(SourceName.read)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userService.list();</span><br><span class="line">    <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;save&quot;)</span></span><br><span class="line"><span class="meta">@DataSource(SourceName.write)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span> <span class="params">(<span class="meta">@RequestParam</span> String userName)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(userName);</span><br><span class="line">    <span class="keyword">boolean</span> save = userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="1-1130-Host-XXX-is-not-allowed-to-connect-to-this-MySQL-server。"><a href="#1-1130-Host-XXX-is-not-allowed-to-connect-to-this-MySQL-server。" class="headerlink" title="1. 1130 - Host XXX is not allowed to connect to this MySQL server。"></a>1. 1130 - Host XXX is not allowed to connect to this MySQL server。</h2><p>由于Mysql配置了不支持远程连接引起的</p>
<h4 id="登录到服务器的数据库"><a href="#登录到服务器的数据库" class="headerlink" title="登录到服务器的数据库"></a>登录到服务器的数据库</h4><h4 id="查询主机配置信息"><a href="#查询主机配置信息" class="headerlink" title="查询主机配置信息"></a>查询主机配置信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"> </span><br><span class="line">select host from user <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>可以看到当前主机配置信息为localhost.</p>
<p><img src="image-20210720102035929.png" alt="image-20210720102035929"></p>
<h4 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h4><p>将Host设置为通配符%</p>
<p>Host列指定了允许用户登录所使用的IP，比如user=root Host=192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。 user=root Host=localhost，表示只能通过本机客户端去访问。而%是个通配符，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host=%，表示所有IP都有连接权限。 </p>
<p><strong>注意：</strong></p>
<p><strong>1. 在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置；</strong></p>
<p><strong>2. 修改成功后，若需要修改账户密码需要使用 ‘root’@’%’ 而不是 ‘root’@’localhost’ ；</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将host设置为%</span></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user =<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行flush privileges使配置立即生效</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>


<h2 id="2-Can-t-connect-MySQL-server"><a href="#2-Can-t-connect-MySQL-server" class="headerlink" title="2. Can`t connect MySQL server"></a>2. Can`t connect MySQL server</h2><p>![image-20210720140532803](4. 数据库读写分离/image-20210720140532803.png)</p>
<ol>
<li>查看mysql数据库是否启动</li>
<li>查看防火墙是否未关闭</li>
</ol>
<h2 id="3-读写分离"><a href="#3-读写分离" class="headerlink" title="3. 读写分离"></a>3. 读写分离</h2>]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus使用</title>
    <url>/2021/05/08/java/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20MybatisPlus/1.%20MybatisPlus%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="完整版配置类"><a href="#完整版配置类" class="headerlink" title="完整版配置类"></a>完整版配置类</h1><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xatali.signplatform.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlConfig</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="完整版依赖"><a href="#完整版依赖" class="headerlink" title="完整版依赖"></a>完整版依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity前端模板，mybatis-puls分析sql性能时必须 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2.3&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>




<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>地址：<a href="https://mp.baomidou.com/guide/quick-start.html">https://mp.baomidou.com/guide/quick-start.html</a></p>
<h2 id="使用第三方组件："><a href="#使用第三方组件：" class="headerlink" title="使用第三方组件："></a>使用第三方组件：</h2><ol>
<li>导入对应的依赖</li>
<li>研究依赖配置</li>
<li>代码编写</li>
<li>提高扩展能力</li>
</ol>
<h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h2><h2 id="2-建表及插入数据"><a href="#2-建表及插入数据" class="headerlink" title="2. 建表及插入数据"></a>2. 建表及插入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">    id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,</span><br><span class="line">    username VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;用户名&#39;,</span><br><span class="line">    &#96;password&#96; VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">    realname VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">    age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, username, age, email) VALUES</span><br><span class="line">(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),</span><br><span class="line">(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),</span><br><span class="line">(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),</span><br><span class="line">(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),</span><br><span class="line">(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);</span><br></pre></td></tr></table></figure>


<h2 id="3-编写项目"><a href="#3-编写项目" class="headerlink" title="3. 编写项目"></a>3. 编写项目</h2><p>创建一个springboot项目</p>
<h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>低版本可能存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis-plus --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.1.tmp&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>


<h3 id="2-配置mysql驱动"><a href="#2-配置mysql驱动" class="headerlink" title="2. 配置mysql驱动"></a>2. 配置mysql驱动</h3><p>mysql 5 与 mysql 8 驱动不同，mysql 8 需要增加时区的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    # jdbc:mysql:&#x2F;&#x2F; 相当于http:&#x2F;&#x2F; 表示协议</span><br><span class="line">    # localhost:3306 ip + 端口号</span><br><span class="line">    # boo_manage 连接的库</span><br><span class="line">    # userSSL&#x3D;false 是否使用安全连接，使用mark电脑时使用安全连接有时会报错，因此使用false关闭</span><br><span class="line">    # useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8 设置字符集编码，存储数据时先将数据解码成字节码，然后再将解码后的字节码重新使用GBK编码存放到数据库中</span><br><span class="line">    #     在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重新按UTF-8格式编码数据，最后再将数据返回给客户端。</span><br><span class="line">    # serverTimezone&#x3D;GMT%2B8 当使用 mysql 8 版本时，需要增加时区的配置</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;boo_manage?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT%2B8</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>


<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>传统方式：pojo-dao（连接mybatis，配置mapp.xml文件）-service-controller</p>
<p>使用mybatis-plus之后：</p>
<ul>
<li>pojo</li>
<li>mapper接口</li>
<li>使用</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="1-创建实体类"><a href="#1-创建实体类" class="headerlink" title="1. 创建实体类"></a>1. 创建实体类</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String realname;</span><br><span class="line">    private int age;</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h5 id="2-添加mapper文件"><a href="#2-添加mapper文件" class="headerlink" title="2. 添加mapper文件"></a>2. 添加mapper文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.yoga.usermanage.entity.User;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在对应的Mapper上继承基本的类</span><br><span class="line">&#x2F;&#x2F; 将步骤1中的实体类作为参数传入</span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 所有的CRUD均已编写完成</span><br><span class="line">    &#x2F;&#x2F; 不需要像以前配置一大堆文件</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h5 id="3-主启动类中添加注解扫描所有的mapper文件"><a href="#3-主启动类中添加注解扫描所有的mapper文件" class="headerlink" title="3. 主启动类中添加注解扫描所有的mapper文件"></a>3. 主启动类中添加注解扫描所有的mapper文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@MapperScan(&quot;com.yoga.usermanage.mapper&quot;)</span><br></pre></td></tr></table></figure>


<h5 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h5><p>由于其继承了mybatisplus的BaseMapper，因此基本的CRUD已经实现</p>
<h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><p>目前所有的sql是不可见的，若需要查看如何执行，则可以配置日志</p>
<p>配置控制台直接输出（也可配置使用log4j输出）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MybatisPlus日志配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line"><span class="comment">#   普通控制台输出</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>


<h1 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h1><h2 id="1-插入测试及雪花算法"><a href="#1-插入测试及雪花算法" class="headerlink" title="1. 插入测试及雪花算法"></a>1. 插入测试及雪花算法</h2><h3 id="执行简单的插入语句"><a href="#执行简单的插入语句" class="headerlink" title="执行简单的插入语句"></a>执行简单的插入语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setAge(<span class="number">10</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;123456789@qq.com&quot;</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">user.setRealname(<span class="string">&quot;realName&quot;</span>);</span><br><span class="line">user.setUsername(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>


<p>打印的日志为：</p>
<p><code>可以发现：</code></p>
<ul>
<li>参数中并未设置id，但是插入语句中会自动帮忙添加id</li>
<li>打印的用户对象中也是有id的，即id会自动回填</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JDBC Connection [HikariProxyConnection@1906293869 wrapping com.mysql.jdbc.JDBC4Connection@9045cd3] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: INSERT INTO user ( id, username, password, realname, age, email ) VALUES ( ?, ?, ?, ?, ?, ? ) </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 1390839264579297281(Long), userName(String), password(String), realName(String), 10(Integer), 123456789@qq.com(String)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7f584df6]</span><br><span class="line"></span><br><span class="line">User(id&#x3D;1390839264579297281, username&#x3D;userName, password&#x3D;password, realname&#x3D;realName, age&#x3D;10, email&#x3D;123456789@qq.com)</span><br></pre></td></tr></table></figure>


<h3 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h3><p>主键生成：uuid、自增id、雪花算法、redis、zookeeper</p>
<h4 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h4><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。</p>
<p>其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯一！</p>
<p>详细说明</p>
<p><a href="https://blog.csdn.net/lq18050010830/article/details/89845790">https://blog.csdn.net/lq18050010830/article/details/89845790</a></p>
<h4 id="配置不同的主键生成策略"><a href="#配置不同的主键生成策略" class="headerlink" title="配置不同的主键生成策略"></a>配置不同的主键生成策略</h4><blockquote>
<p>默认为： ID_WORKER（新版本使用ASSIGN_ID）   全局唯一id</p>
</blockquote>
<blockquote>
<p>实现主键自增</p>
</blockquote>
<ol>
<li>实体类字段上<code>@TableId(type = IdType.AUTO)</code></li>
<li><strong>数据库一定要是自增的</strong></li>
</ol>
<p>打开数据库：</p>
<p>设计表 -&gt; 选项</p>
<p>可以看到自动递增的值，该值即为下次插入数据的id</p>
<p><img src="image-20210508162842140.png" alt="image-20210508162842140"></p>
<blockquote>
<p>其余类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AUTO(<span class="number">0</span>),  	<span class="comment">// 数据库ID自增</span></span><br><span class="line">NONE(<span class="number">1</span>),	<span class="comment">// 该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</span></span><br><span class="line">INPUT(<span class="number">2</span>),	<span class="comment">// 手动输入, 一旦手动输入id之后，就需要自己配置id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配ID (主键类型为number或string）,</span></span><br><span class="line"><span class="comment"> * 默认实现类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;</span></span><br><span class="line"><span class="comment"> * (雪花算法)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ASSIGN_ID(<span class="number">3</span>),	<span class="comment">// 默认的全局id</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配UUID (主键类型为 string)</span></span><br><span class="line"><span class="comment"> * 默认实现类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;</span></span><br><span class="line"><span class="comment"> * (UUID.replace(&quot;-&quot;,&quot;&quot;))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ASSIGN_UUID(<span class="number">4</span>),	<span class="comment">// 全局唯一id</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">ID_WORKER(<span class="number">3</span>),	<span class="comment">// @deprecated 3.3.0 please use &#123;@link #ASSIGN_ID&#125;</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">ID_WORKER_STR(<span class="number">3</span>),	<span class="comment">// @deprecated 3.3.0 please use &#123;@link #ASSIGN_ID&#125;</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">UUID(<span class="number">4</span>);	<span class="comment">// @deprecated 3.3.0 please use &#123;@link #ASSIGN_UUID&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-更新操作"><a href="#2-更新操作" class="headerlink" title="2. 更新操作"></a>2. 更新操作</h2><h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">&quot;newUserName&quot;</span>);</span><br><span class="line">user.setId(<span class="number">1390945262396645379L</span>)</span><br><span class="line">userMapper.updateById(user);</span><br></pre></td></tr></table></figure>


<h2 id="3-自动填充"><a href="#3-自动填充" class="headerlink" title="3. 自动填充"></a>3. 自动填充</h2><p>创建时间、修改时间，这些操作都可以自动完成</p>
<blockquote>
<p>方式一：数据库级别（工作中不允许修改数据库）</p>
</blockquote>
<ol>
<li><p> 在表中新增字段create_time（timestamp），update_time（<strong>timestamp</strong>）</p>
</li>
<li><p>设置默认值为  CURRENT_TIMESTAMP</p>
</li>
<li><p>勾选update_time下的根据当前时间戳更新</p>
<p>注：  Navicat中datetime类型的不能选择根据当前时间戳更新</p>
</li>
</ol>
<p><img src="image-20210508182429798.png" alt="image-20210508182429798"></p>
<blockquote>
<p>方式二：代码级别</p>
</blockquote>
<ol>
<li>删除数据库的默认值及更新操作！</li>
</ol>
<p><img src="image-20210508183903426.png" alt="image-20210508183903426"></p>
<ol start="2">
<li>实体类上加固有注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字段添加填充内容</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>编写处理器来处理这个注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 创建一个处理器类</span></span><br><span class="line"><span class="comment"> * 2. 继承MetaObjectHandler</span></span><br><span class="line"><span class="comment"> * 3. 添加<span class="doctag">@Component</span>注解，将该处理器类交给框架管理</span></span><br><span class="line"><span class="comment"> * 4. 实现insertFill（插入时的填充策略）和updateFill（更新时的填充策略）方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 其他：</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@Slf</span>4j为lombok日志注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-查询操作"><a href="#4-查询操作" class="headerlink" title="4. 查询操作"></a>4. 查询操作</h2><h3 id="1-普通查询"><a href="#1-普通查询" class="headerlink" title="1. 普通查询"></a>1. 普通查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;select&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用用户id查询单个用户</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1391652173934858242L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用用户id List查询多个用户</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectBatchIds(Arrays.asList(<span class="number">1391652173934858242L</span>, <span class="number">1391651981101731841L</span>));</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询 map查询</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1390982665840857090L</span>);</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;乐观锁测试2&quot;</span>);</span><br><span class="line">    userMapper.selectByMap(map).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2. 分页查询"></a>2. 分页查询</h3><h4 id="实现分页的方法"><a href="#实现分页的方法" class="headerlink" title="实现分页的方法"></a>实现分页的方法</h4><ul>
<li>原始的limit进行分页</li>
<li>pageHelper等 第三方插件</li>
<li>MybatisPlus内置分页插件</li>
</ul>
<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><ol>
<li>配置拦截器组件即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">    <span class="comment">// 乐观锁</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">	<span class="comment">// 分页插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>直接使用Page对象即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(num, <span class="number">5</span>);</span><br><span class="line">Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; records = userPage.getRecords();</span><br><span class="line">records.forEach(System.out::println);</span><br><span class="line">System.out.println(userPage.getTotal());</span><br></pre></td></tr></table></figure>


<p>可看出在查询数据前会先查询数据的条数，然后在查询数据</p>
<p><img src="image-20210510180832924.png" alt="image-20210510180832924"></p>
<h2 id="5-删除操作"><a href="#5-删除操作" class="headerlink" title="5. 删除操作"></a>5. 删除操作</h2><h3 id="普通删除"><a href="#普通删除" class="headerlink" title="普通删除"></a>普通删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除测试</span></span><br><span class="line"><span class="comment">// userMapper.deleteById(id);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="comment">// userMapper.deleteBatchIds(Arrays.asList(1391652302511226882L, 1391691217980956674L));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件删除</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;userName&quot;</span>);</span><br><span class="line">userMapper.deleteByMap(map);</span><br></pre></td></tr></table></figure>


<h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote>
<p>物理删除：从数据库中直接删除</p>
<p>逻辑删除：在数据库中没有被删除，而是通过一个变量来让其失效！deleted = 0 =&gt; deleted = 1</p>
</blockquote>
<p>管理员可以查看被删除的记录！防止数据丢失，类似于回收站</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol>
<li>在数据库中添加标识删除的字段deleted</li>
</ol>
<p><img src="image-20210510182522270.png" alt="image-20210510182522270"></p>
<ol start="2">
<li>实体类中增加属性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span> <span class="comment">// 逻辑删除</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span>  <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span>     <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li>删除测试</li>
</ol>
<p><img src="image-20210510183246640.png" alt="image-20210510183246640"></p>
<p>可以看出，此时虽然执行的是删除操作但是并未执行delete操作而是update</p>
<h2 id="6-性能分析插件"><a href="#6-性能分析插件" class="headerlink" title="6. 性能分析插件"></a>6. 性能分析插件</h2><p>MybatisPlus性能分析插件，如果超过这个事件就停止运行</p>
<p>作用：用于输出每条sql语句及其执行时间</p>
<p>使用</p>
<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/p6spy/p6spy --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入的p6spy版本不能太低，否则会报</p>
<p><strong>java.lang.AbstractMethodError: null</strong></p>
<p>表示依赖冲突</p>
</li>
</ol>
<ol start="2">
<li>修改使用p6spy连接数据库</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://localhost:3306/book_manage?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>classpath下添加spy.properties</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3.2.1以上使用</span></span><br><span class="line"><span class="attr">modulelist</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment">#3.2.1以下使用或者不配置</span></span><br><span class="line"><span class="comment">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment"># 自定义日志打印</span></span><br><span class="line"><span class="attr">logMessageFormat</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span></span><br><span class="line"><span class="comment">#日志输出到控制台</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class="line"><span class="comment"># 使用日志系统记录 sql</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class="line"><span class="comment"># 设置 p6spy driver 代理</span></span><br><span class="line"><span class="attr">deregisterdrivers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 取消JDBC URL前缀</span></span><br><span class="line"><span class="attr">useprefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class="line"><span class="attr">excludecategories</span>=<span class="string">info,debug,result,commit,resultset</span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 实际驱动可多个</span></span><br><span class="line"><span class="comment">#driverlist=org.h2.Driver</span></span><br><span class="line"><span class="comment"># 是否开启慢SQL记录</span></span><br><span class="line"><span class="attr">outagedetection</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 慢SQL记录标准 2 秒</span></span><br><span class="line"><span class="attr">outagedetectioninterval</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li><p>使用</p>
<p>打印效果</p>
<p><img src="image-20210510192647891.png" alt="image-20210510192636425"></p>
</li>
</ol>
<h2 id="7-条件查询器Wrapper"><a href="#7-条件查询器Wrapper" class="headerlink" title="7. 条件查询器Wrapper"></a>7. 条件查询器Wrapper</h2><h3 id="7-1-基本使用"><a href="#7-1-基本使用" class="headerlink" title="7.1 基本使用"></a>7.1 基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询多个 isNull isNotNull ge大于等于</span></span><br><span class="line"><span class="comment">// 查询 realname 为空, username 不为空,并且 age 大于12的用户</span></span><br><span class="line"><span class="comment">// 具体参照官方文档</span></span><br><span class="line"><span class="comment">// https://mp.baomidou.com/guide/wrapper.html#abstractwrapper</span></span><br><span class="line">QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">userQueryWrapper.isNull(<span class="string">&quot;realname&quot;</span>).isNotNull(<span class="string">&quot;username&quot;</span>).ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单个  eq</span></span><br><span class="line">QueryWrapper&lt;User&gt; userQueryWrapper1 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">userQueryWrapper1.eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;乐观锁&quot;</span>);</span><br><span class="line">User user = userMapper.selectOne(userQueryWrapper1);</span><br><span class="line">System.out.println(<span class="string">&quot;Wrapper: eq&quot;</span> + user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询年龄在 10~15 之间的用户数 between</span></span><br><span class="line">QueryWrapper&lt;User&gt; userQueryWrapper2 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">userQueryWrapper2.between(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line">Integer integer = userMapper.selectCount(userQueryWrapper2);</span><br><span class="line">System.out.println(<span class="string">&quot;age between 10 and 15 : &quot;</span> + integer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 名字里边不带 乐观锁, email以1开头的</span></span><br><span class="line"><span class="comment">// like         %val%</span></span><br><span class="line"><span class="comment">// likeRight    val%</span></span><br><span class="line">QueryWrapper&lt;User&gt; userQueryWrapper3 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">userQueryWrapper3.notLike(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;乐观锁&quot;</span>).likeRight(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(userQueryWrapper3);</span><br><span class="line">System.out.println(<span class="string">&quot;like: &quot;</span>);</span><br><span class="line">maps.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// inSql内连接查询</span></span><br><span class="line">QueryWrapper&lt;User&gt; userQueryWrapper4 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">userQueryWrapper4.inSql(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;select age from user where age &gt; 12&quot;</span>);</span><br><span class="line">List&lt;Object&gt; objects = userMapper.selectObjs(userQueryWrapper4);</span><br><span class="line">objects.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过id进行排序</span></span><br><span class="line">QueryWrapper&lt;User&gt; userQueryWrapper5 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">userQueryWrapper5.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">userMapper.selectList(userQueryWrapper5);</span><br></pre></td></tr></table></figure>




























]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2021/06/10/java/%E5%90%8E%E7%AB%AF/%E6%A1%86%E6%9E%B6/SpringBoot/%E7%8B%82%E7%A5%9E/0.%20SpringBoot/</url>
    <content><![CDATA[<h1 id="演变"><a href="#演变" class="headerlink" title="演变"></a>演变</h1><a id="more"></a>

<blockquote>
<p>学习</p>
</blockquote>
<p>javase：OOP</p>
<p>mysql：持久化</p>
<p>html+css+jQuery+框架：视图</p>
<p>javaweb：独立开发MVC三层架构的网站：原始</p>
<p>ssm：框架，简化了我们的开发流程，配置也开始复杂起来</p>
<p><strong>war：tomcat运行</strong></p>
<p>spring再简化：springboot - jar：内嵌tomcat；</p>
<p>服务越来越多：springcloud</p>
<h1 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h1><h2 id="0-架构"><a href="#0-架构" class="headerlink" title="0. 架构"></a>0. 架构</h2><p>MVC三层架构</p>
<p>MVVM</p>
<p>微服务架构</p>
<p>all in one的架构方式，我们把所有的功能单元放在一个应用里面。然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后在负载均衡。<br>所谓微服务架构，就是打破之前all in one的架构方式，把每个功能元素独立出来。把独立出来的功能元素的动态组合，需要的功能元素才去拿来组合、需要多一些时 可以整合多个功能元素。所以微服务架构是对功能元索进行复制，而没有对整个应用进行复制。</p>
<h3 id="发展演变史"><a href="#发展演变史" class="headerlink" title="发展演变史"></a>发展演变史</h3><p><a href="https://dubbo.apache.org/zh/docs/v2.7/user/preface/background/#m-zhdocsv27userprefacebackground">https://dubbo.apache.org/zh/docs/v2.7/user/preface/background/#m-zhdocsv27userprefacebackground</a></p>
<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1. Spring"></a>1. Spring</h2><p>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发</p>
<p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p>
<p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p>
<p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p>
<p>3、基于切面（AOP）和惯例进行声明式编程；</p>
<p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p>
<p><strong>约定大于配置</strong></p>
<h2 id="2-SpringBoot"><a href="#2-SpringBoot" class="headerlink" title="2. SpringBoot"></a>2. SpringBoot</h2><ul>
<li>为所有Spring开发者更快的入门</li>
<li><strong>开箱即用</strong>，提供这种默认排至来简化项目配置</li>
<li>内嵌式容器简化Web项目</li>
<li>没有冗余代码生成XML配置的要求</li>
</ul>
<h1 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h1><h2 id="1-SpringBoot官网创建"><a href="#1-SpringBoot官网创建" class="headerlink" title="1. SpringBoot官网创建"></a>1. SpringBoot官网创建</h2><p><img src="image-20210611090238482.png" alt="image-20210611090238482"></p>
<p><img src="image-20210611090249356.png" alt="image-20210611090249356"></p>
<p><img src="image-20210611090258675.png" alt="image-20210611090258675"></p>
<p>配置完成后点击 generate 即可下载项目压缩包</p>
<h2 id="2-使用idea创建（推荐）"><a href="#2-使用idea创建（推荐）" class="headerlink" title="2. 使用idea创建（推荐）"></a>2. 使用idea创建（推荐）</h2><p><img src="image-20210611090625543.png" alt="image-20210611090625543"></p>
<p>此时可以看到对应官网的Spring Initializr，以及默认的地址就是官网Spring Initializr的地址</p>
<p><img src="image-20210611090700871.png" alt="image-20210611090700871"></p>
<p>启动SpringBoot热部署</p>
<p><img src="image-20210621191801813.png" alt="image-20210621191801813"></p>
<h2 id="3-初始项目pom-xml解析"><a href="#3-初始项目pom-xml解析" class="headerlink" title="3. 初始项目pom.xml解析"></a>3. 初始项目pom.xml解析</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- gav 坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-engin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo-engin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所有的springboot依赖都是以 spring-boot-starter 开头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>默认情况下后台代码必须放在启动类的同级或次级，不能放置再其他地方</p>
<p>否则框架会扫描不到</p>
<p><img src="image-20210625184925223.png" alt="image-20210625184925223"><img src="image-20210625184929227.png" alt="image-20210625184929227"></p>
<h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><p>配置文件可以存在的位置（按优先级从高到低排列）：file即项目路径，classpath即resources目录</p>
<blockquote>
<p>file:./config/<br>file:./<br>classpath:/config/<br>classpath:/</p>
</blockquote>
<h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><h3 id="多文件配置多套环境"><a href="#多文件配置多套环境" class="headerlink" title="多文件配置多套环境"></a>多文件配置多套环境</h3><p>同样以application开头后面加 <code>-后缀名称</code> 如：<code>application-test.yml</code></p>
<p>使用时在默认配置文件中添加配置，可以选择激活哪个配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>


<h3 id="yml单个文件配置多套环境"><a href="#yml单个文件配置多套环境" class="headerlink" title="yml单个文件配置多套环境"></a>yml单个文件配置多套环境</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 --- 将多个环境分隔</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置该套环境名称（新版）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="comment"># 旧版</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 激活某套环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>


<h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><blockquote>
<p>SpringBoot所有的自动配置都是在启动的时候扫描并加载：所有的自动配置类都在<code>autoconfiguration 下的 META-INF/spring.factories</code>中，但是不一定生效。</p>
<p>要判断条件是否成立：只要导入了对应的start，就有对应的启动器了，有了启动器，自动装配就会生效，然后配置成功</p>
</blockquote>
<ol>
<li>SpringBoot在启动的时候，从类路径下 /META-INF/spring.factories 获取指定的值；</li>
<li>将这些自动配置的类导入容器，自动配置类就会生效，帮我们进行自动配置</li>
<li>以前我们需要自动配置的东西，现在SpringBoot都帮我们做了</li>
<li>整合javaEE，解决方案和自动装配的东西都在 spring-boot-autoconfigure-2.3.12.RELEASE.jar 包下</li>
<li>自动装配会把所有需要导入的组件以类名的方式返回，这些组件就会被添加到容器；</li>
<li>spring.factories中存在非常多的XXXAutoConfiguration的文件，就是这些文件给容器中导入这个场景需要的所有组件（@Bean），并自动配置</li>
</ol>
<p><img src="image-20210617154123430.png" alt="image-20210617154123430"></p>
<ol start="7">
<li>有了自动配置类，就免去了我们手动编写配置注入功能组件等的工作</li>
</ol>
<p>思维导图：</p>
<p>原导图地址：<a href="https://www.processon.com/mindmap/60c9c9d107912975024b848c">https://www.processon.com/mindmap/60c9c9d107912975024b848c</a></p>
<p><img src="SpringBoot.png" alt="SpringBoot"></p>
<h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h2><h3 id="1-1-自动装配"><a href="#1-1-自动装配" class="headerlink" title="1.1 自动装配"></a>1.1 自动装配</h3><p>按住ctrl 点击pom.xml中的parent标签中的内容查看父工程信息</p>
<p><img src="image-20210616092548043.png" alt="image-20210616092548043"></p>
<p>可以看到父工程还有一层父工程</p>
<p><img src="image-20210616092813004.png" alt="image-20210616092813004"></p>
<p>再次进入：</p>
<p>可以看到有着许多依赖的版本信息</p>
<p><code>在写入或引入一些SpringBoot依赖的时候，不需要指定版本，就是因为这些版本仓库</code></p>
<p><img src="image-20210616092923012.png" alt="image-20210616092923012"></p>
<h3 id="1-2-启动器"><a href="#1-2-启动器" class="headerlink" title="1.2. 启动器"></a>1.2. 启动器</h3><blockquote>
<p>启动器就是 dependencies 中以 <code>spring-boot-starter-</code> 命名的依赖</p>
</blockquote>
<p>启动器说白了就是SpringBoot的启动场景：</p>
<p>如：spring-boot-starter-web，其会帮我们自动导入web环境所有的依赖</p>
<p>SpringBoot会将所有的功能场景，都变成一个个的启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="1-3-官方文档"><a href="#1-3-官方文档" class="headerlink" title="1.3 官方文档"></a>1.3 官方文档</h3><p><img src="image-20210616144005246.png" alt="image-20210616144005246"></p>
<p><img src="image-20210616145039089.png" alt="image-20210616145039089"></p>
<h2 id="2-启动类"><a href="#2-启动类" class="headerlink" title="2 启动类"></a>2 启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标注这个类是一个SpringBoot的应用：导入启动类下的所有资源</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEnginApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动SpringBoot</span></span><br><span class="line">        SpringApplication.run(DemoEnginApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-1-注解"><a href="#2-1-注解" class="headerlink" title="2.1 注解"></a>2.1 注解</h3><p>@SpringBootApplication 是一个组合注解，点进去可以看到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SpringBoot的配置</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line">	<span class="meta">@Configuration</span>	<span class="comment">// 	Spring配置类</span></span><br><span class="line">		<span class="meta">@Component</span>	<span class="comment">//	说明这是一个 Spring 组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动配置</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line">	<span class="meta">@AutoConfigurationPackage</span>	<span class="comment">// 自动配置包</span></span><br><span class="line">		<span class="meta">@Import(&#123;Registrar.class&#125;)</span>	<span class="comment">// 导入配置包注册</span></span><br><span class="line">	<span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span> 	<span class="comment">// 获取候选配置</span></span><br></pre></td></tr></table></figure>


<p>获取候选配置：AutoConfigurationImportSelector类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有配置类</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getCandidateConfigurations</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    <span class="comment">// 判断 META-INF/spring.factories 如果不为空</span></span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>加载标注了 EnableAutoConfiguration 的所有配置</p>
<p><img src="image-20210616151201891.png" alt="image-20210616151201891"></p>
<p>META-INF/spring.factories：自动配置的核心文件</p>
<p><img src="image-20210616151702700.png" alt="image-20210616151702700"></p>
<p>查看 SpringFactoriesLoader.loadFactoryNames 方法</p>
<p><img src="image-20210616153819542.png" alt="image-20210616153819542"></p>
<h2 id="3-自动配置原理"><a href="#3-自动配置原理" class="headerlink" title="3. 自动配置原理"></a>3. 自动配置原理</h2><p>分析 spring.factories 中的某个配置 HttpEncodingAutoConfiguration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来开启配置属性，传入的类中一般就是读取配置文件中的内容</span></span><br><span class="line"><span class="comment">// 进入 ServerProperties 类中查看</span></span><br><span class="line"><span class="comment">// 其中存在注解 @ConfigurationProperties(prefix = &quot;server&quot;,ignoreUnknownFields = true)</span></span><br><span class="line"><span class="comment">// 意为注入配置文件中的server下的东西</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ServerProperties.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring底层注解：根据其中条件，来判断当前配置或者类是否生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;server.servlet.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(ServerProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getServlet().getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.web.servlet.server.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.web.servlet.server.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HttpEncodingAutoConfiguration.<span class="function">LocaleCharsetMappingsCustomizer <span class="title">localeCharsetMappingsCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpEncodingAutoConfiguration.LocaleCharsetMappingsCustomizer(<span class="keyword">this</span>.properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleCharsetMappingsCustomizer</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">        LocaleCharsetMappingsCustomizer(Encoding properties) &#123;</span><br><span class="line">            <span class="keyword">this</span>.properties = properties;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.properties.getMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                factory.setLocaleCharsetMappings(<span class="keyword">this</span>.properties.getMapping());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在配置文件中可以配置的东西，都存在一个固有的 xxxAutoConfiguration 文件，而其中又通过注解<br>@EnableConfigurationProperties 加载一个 xxxProperties 类，其中又以注解 @ConfigurationProperties 加载配置文件中的内容</p>
<p>其中的属性就是配置文件中可以设置的属性，</p>
<p>ctrl + 左键 点击配置文件中的属性即可跳转到 xxxProperties 类下的该属性的 set 方法中</p>
<blockquote>
<ol>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中;</li>
<li>我们再来看这个自动配置类中到底配置了哪些组件: (只要我们要用的组件存在在其中，我们<br>就不需要再手动配置了)</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置<br>文件中指定这些属性的值即可;<br>xxxxAutoConfigurartion：自动配置类;给容器中添加组件<br>xxxxProperties：封装配置文件中相关属性;</li>
</ol>
</blockquote>
<h1 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 启动SpringBoot</span></span><br><span class="line">    <span class="comment">// 其通过main方法启动服务</span></span><br><span class="line">    SpringApplication.run(DemoEnginApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-SpringApplication"><a href="#1-SpringApplication" class="headerlink" title="1. SpringApplication"></a>1. SpringApplication</h2><p>该类主要做了一下四件事情</p>
<p>1、推断应用的类型是普通项目还是Web项目<br>2、查找并加载所有可用初始化器，设置到initializers属性中<br>3、找出所有的应用程序监听器，设置到listeners属性中<br>4、推断并设置main方法的定义类，找到运行的主类</p>
<p><img src="SpringBoot%E5%90%AF%E5%8A%A8%E7%B1%BB%E8%BF%90%E8%A1%8C-1624255251310.png" alt="SpringBoot启动类运行"></p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="SpringBoot配置文件可以配哪些东西"><a href="#SpringBoot配置文件可以配哪些东西" class="headerlink" title="SpringBoot配置文件可以配哪些东西"></a>SpringBoot配置文件可以配哪些东西</h2><h3 id="方法1：查看官方配置文档"><a href="#方法1：查看官方配置文档" class="headerlink" title="方法1：查看官方配置文档"></a>方法1：查看官方配置文档</h3><p>![image-20210622104558107](0. SpringBoot/image-20210622104558107.png)</p>
<p>![image-20210622104659942](0. SpringBoot/image-20210622104659942.png)</p>
<h3 id="方法2：了解原理"><a href="#方法2：了解原理" class="headerlink" title="方法2：了解原理"></a>方法2：了解原理</h3><p>在SpringBoot的父项目中可以看到<br>配置文件的位置，及名称</p>
<p><img src="image-20210623143858435.png" alt="image-20210623143858435"></p>
<h2 id="SpringBoot配置文件格式"><a href="#SpringBoot配置文件格式" class="headerlink" title="SpringBoot配置文件格式"></a>SpringBoot配置文件格式</h2><p>SpringBoot使用一个全局的配置文件 ，配置文件名称是固定的：</p>
<ul>
<li>application.properties<ul>
<li>语法结构: key=value</li>
</ul>
</li>
<li>application.yml<ul>
<li>语法结构: key:空格value</li>
</ul>
</li>
</ul>
<p><strong>配置文件的作用</strong>：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了;</p>
<h3 id="内容演示"><a href="#内容演示" class="headerlink" title="内容演示:"></a>内容演示:</h3><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通键值对</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 对象行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>, <span class="string">age:3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="attr">strList:</span> </span><br><span class="line">	<span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"><span class="attr">strList:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">pig</span>]</span><br></pre></td></tr></table></figure>


<p>application.properties 只能保存键值对</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通键值对</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="meta">student.name</span> = <span class="string">zhangsan</span></span><br><span class="line"><span class="meta">student.age</span> = <span class="string">3</span></span><br></pre></td></tr></table></figure>


<h2 id="yaml使用"><a href="#yaml使用" class="headerlink" title="yaml使用"></a>yaml使用</h2><h3 id="yaml占位符（方法）"><a href="#yaml占位符（方法）" class="headerlink" title="yaml占位符（方法）"></a>yaml占位符（方法）</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机数，项目启动时随机出一个数，启动后该值为固定值</span></span><br><span class="line"><span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="comment"># uuid</span></span><br><span class="line"><span class="string">$&#123;random.uuid&#125;</span></span><br></pre></td></tr></table></figure>


<p>判断是否存在</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当person.name存在时，使用person.name的值</span></span><br><span class="line"><span class="comment"># 当person.name不存在时，使用默认值lisi</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.name:lisi&#125;_旺财</span></span><br></pre></td></tr></table></figure>
<p>存在时：</p>
<p><img src="image-20210625192933400.png" alt="image-20210625192933400"></p>
<p>不存在时：</p>
<p><img src="image-20210625193040251.png" alt="image-20210625193040251"></p>
<h3 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h3><p>即自动转换</p>
<p>配置文件（使用 - 分隔）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">first-name:</span> <span class="string">张</span></span><br></pre></td></tr></table></figure>
<p>类中（使用驼峰命名）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依然可以注入成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person(firstName=张)</span><br></pre></td></tr></table></figure>


<h3 id="yaml可以直接给实体类赋值-（使用默认配置文件）-ConfigurationProperties"><a href="#yaml可以直接给实体类赋值-（使用默认配置文件）-ConfigurationProperties" class="headerlink" title="yaml可以直接给实体类赋值 （使用默认配置文件）@ConfigurationProperties"></a>yaml可以直接给实体类赋值 （使用默认配置文件）@ConfigurationProperties</h3><blockquote>
<p>可用来给配置类注入参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择配置文件中的对象名称直接注入</span></span><br><span class="line"><span class="comment">// person为配置类中对应的名称</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用@Value一个一个注入</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>@ConfigurationProperties与@Value对比：</p>
<p>![image-20210625193238817](G:\整理\0. typora笔记\cloud-book\Hexo-Blog\source_posts\java\后端\框架\SpringBoot\0. SpringBoot\image-20210625193238817.png)</p>
<p><strong>注：</strong></p>
<ol>
<li><p>名称必须从第一级开始，多级之间使用 . 分隔</p>
<p>如 若此时需要注入person</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">object:</span></span><br><span class="line">  <span class="attr">person:</span></span><br></pre></td></tr></table></figure>
<p>则：prefix = “object.person”</p>
</li>
<li><p>如果使用该注解，此时使用的地方会报红</p>
<p><img src="image-20210623181248577.png" alt="image-20210623181248577"></p>
<p>解决办法，添加依赖：</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor">https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.demo.demoengin.springboot.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoEnginApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girls</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>


<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person(name=zhangsan, age=<span class="number">3</span>, map=&#123;k1=v1, k2=v2&#125;, list=[code, girls], dog=Dog(name=旺财, age=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>


<h3 id="获取自定义文件中的配置信息"><a href="#获取自定义文件中的配置信息" class="headerlink" title="获取自定义文件中的配置信息"></a>获取自定义文件中的配置信息</h3><h4 id="1-直接获取"><a href="#1-直接获取" class="headerlink" title="1. 直接获取"></a>1. 直接获取</h4><ol>
<li><p>配置类同级添加自定义配置类</p>
<p><img src="image-20210625191231899.png" alt="image-20210625191231899"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">lisi</span></span><br></pre></td></tr></table></figure></li>
<li><p>注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标明配置文件源</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:myconfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="2-先将自定义配置文件读取到主配置文件中"><a href="#2-先将自定义配置文件读取到主配置文件中" class="headerlink" title="2. 先将自定义配置文件读取到主配置文件中"></a>2. 先将自定义配置文件读取到主配置文件中</h4><h2 id="yaml解决乱码问题"><a href="#yaml解决乱码问题" class="headerlink" title="yaml解决乱码问题"></a>yaml解决乱码问题</h2><p><img src="image-20210625093335778.png" alt="image-20210625093335778"></p>
<h2 id="查看哪些配置生效"><a href="#查看哪些配置生效" class="headerlink" title="查看哪些配置生效"></a>查看哪些配置生效</h2><p>查看哪些配置生效了，debug: true 其会将配置类生效情况打印在控制台</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始打印配置项生效情况</span></span><br><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生效的部分</span></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未生效部分</span></span><br><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 排除的部分</span></span><br><span class="line">Exclusions:</span><br><span class="line">-----------</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 无条件的</span></span><br><span class="line">Unconditional classes:</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure>






































]]></content>
      <categories>
        <category>java</category>
        <category>后端</category>
        <category>框架</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis进阶</title>
    <url>/2021/05/20/%E6%8A%80%E6%9C%AF/redis/4.%20Redis%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h1><a id="more"></a>

<blockquote>
<p>单位</p>
</blockquote>
<p><img src="image-20210526091015775.png" alt="image-20210526091015775"></p>
<ol>
<li>配置文件对大小写不敏感</li>
</ol>
<blockquote>
<p>引入其他配置文件   INCLUDES</p>
</blockquote>
<p><img src="image-20210526091118820.png" alt="image-20210526091118820"></p>
<blockquote>
<p>网络配置    NETWORK</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 绑定的ip，默认只能本地访问</span></span><br><span class="line">bind 127.0.0.1 	</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保护模式</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 端口</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure>


<blockquote>
<p>通用    GENERAL</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 守护进程的方式运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果以后台的方式运行，我们就需要指定一个pid文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志级别</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the server verbosity level.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This can be one of:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> debug (a lot of information, useful <span class="keyword">for</span> development/testing) 大量的信息，用于生产或测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> verbose (many rarely useful info, but not a mess like the debug level)许多很少用到的信息，单不想debug那个混乱</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> notice (moderately verbose, what you want <span class="keyword">in</span> production probably) 生产环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> warning (only very important / critical messages are logged)仅仅非常重要的信息</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志的文件位置名</span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库的数量，默认是16个</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否显示logo</span></span><br><span class="line">always-show-logo yes</span><br></pre></td></tr></table></figure>


<blockquote>
<p>快照    SNAPSHOTTING</p>
</blockquote>
<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof</p>
<p>redis是内存数据库，如果没有持久化，那么数据断电即失</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果 900s 内，如果至少有一个key进行了修改，就进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 持久化如果出错，是否还需要继续工作</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否压缩rdb文件，需要消耗一些cup资源</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存rdb文件时，进行错误的检查校验</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存的目录</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure>


<blockquote>
<p>复制    REPLICATION</p>
</blockquote>
<blockquote>
<p>安全设置    SECURITY</p>
</blockquote>
<p>未设置密码时</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>


<p>设置密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置密码</span></span><br><span class="line">requirepass 123</span><br></pre></td></tr></table></figure>


<p>此时进行获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录操作</span></span><br><span class="line">auth 123</span><br></pre></td></tr></table></figure>


<blockquote>
<p>客户端    CLIENTS</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置能连接上redis的最大客户端的数量</span></span><br><span class="line">maxclients 10000</span><br></pre></td></tr></table></figure>


<blockquote>
<p>内存管理    MEMORY MANAGEMENT</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置最大内存容量</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内存到达上限之后的处理策略</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1、volatile-lru：	只对设置了过期时间的key进行LRU（默认值）</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">2、allkeys-lru ： 	删除lru算法的key</span>   </span><br><span class="line"><span class="meta">#</span><span class="bash">3、volatile-random：	随机删除即将过期key</span>   </span><br><span class="line"><span class="meta">#</span><span class="bash">4、allkeys-random：	随机删除</span>   </span><br><span class="line"><span class="meta">#</span><span class="bash">5、volatile-ttl ： 	删除即将过期的</span>   </span><br><span class="line"><span class="meta">#</span><span class="bash">6、noeviction ： 	永不过期，返回错误</span></span><br><span class="line">maxmemory-policy noeviction</span><br></pre></td></tr></table></figure>


<blockquote>
<p>AOF配置    APPEND ONLY MODE</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认是不开启AOF的</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 持久化的文件名</span></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOP存储策略</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfsync always	<span class="comment"># 每次修改都会存储，消耗性你那个</span></span></span><br><span class="line">appendfsync everysec	# 美妙执行一次存储，可能会丢失这1s的数据</span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfsync no		<span class="comment"># 不执行同步，这个时候操作系统自己同步数据，速度最快</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否开启重写</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若开启重写，当文件大小超过64mb时</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>


<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p>在指定的时间间隔将内存中的数据集快照写入磁盘，也就是Snapshot快照，恢复时将快照文件直接读到内存中。</p>
<p>Redis会单独创建( fork ) 一个子进程来进行持久化，会先将数据写入到一个临时文件中,待持久化过程都结束了,再用这个临时文件替换上次持久化好的文件。整个过程中,主进程是不进行任何I0操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感,那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
<p>Redis默认的是RDB，一般情况下不需要修改这个配置。</p>
<p>rdb保存的文件是<code>dump.rdb</code>，生产环境一般需要将这个文件备份</p>
<p><img src="image-20210526164004720.png" alt="image-20210526164004720"></p>
<h3 id="1-测试"><a href="#1-测试" class="headerlink" title="1. 测试"></a>1. 测试</h3><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> save 900 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> save 300 10</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> save 60 10000</span></span><br><span class="line">save 60 3	# 六十秒内修改三次即进行存储</span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行测试命令</span></span><br><span class="line">set k1 v1</span><br><span class="line">set k2 v2</span><br><span class="line">set k3 v3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时在外部可以看到生成了一个dump.rdb文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭redis</span></span><br><span class="line">shutdown</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次开启redis，执行查询命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 依然可以获取数据</span></span><br><span class="line">get k1</span><br></pre></td></tr></table></figure>


<h3 id="2-触发机制"><a href="#2-触发机制" class="headerlink" title="2. 触发机制"></a>2. 触发机制</h3><ol>
<li>save的规则满足时，会自动触发rdb规则</li>
<li>执行flushall命令，也会触发rdb规则</li>
<li>退出redis，也会产生rdb文件</li>
</ol>
<p>备份就会生产一个dump.rdb文件</p>
<h3 id="3-如何恢复rdb文件"><a href="#3-如何恢复rdb文件" class="headerlink" title="3. 如何恢复rdb文件"></a>3. 如何恢复rdb文件</h3><p>只需要将rdb文件放在redis启动目录即可，redis启动时会自动检查dump.rdb 并恢复其中的数据</p>
<h3 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h3><blockquote>
<p>优点：</p>
</blockquote>
<ol>
<li>适合大规模的数据恢复</li>
<li>对数据的完整性不高</li>
</ol>
<blockquote>
<p>缺点</p>
</blockquote>
<ol>
<li>需要一定的时间间隔进行进程操作，如果redis意外宕机了，最后一次修改的数据就没了</li>
<li>fork进程会占用一定的内存空间</li>
</ol>
<h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><blockquote>
<p>将所有的写命令都记录下来，恢复的时候再把这些命令全部再执行一遍</p>
<p>aof默认的是文件的无限追加，因此文件会越来越大</p>
</blockquote>
<p>以日志的形式来记录每个写操作, 将Redis执行过的所有指令记录下来(读操作不记录) ,只许追加文件但不可以改写文件, redis启动之初会读取该文件重新构建数据,换言之, redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<p>AOP保存的文件时<code>appendonly.aof</code></p>
<p><img src="image-20210526173216475.png" alt="image-20210526173216475"></p>
<p>默认是不开启的，只需要将appendonly 修改为yes之后重启redis，就可以开启aof了</p>
<h3 id="1-使用及-aof-文件修复"><a href="#1-使用及-aof-文件修复" class="headerlink" title="1. 使用及 aof 文件修复"></a>1. 使用及 aof 文件修复</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行插入命令</span></span><br><span class="line">set k1 v1</span><br></pre></td></tr></table></figure>


<p>退出查看appendonly.aof文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*2</span><br><span class="line"><span class="variable">$6</span></span><br><span class="line">SELECT</span><br><span class="line"><span class="variable">$1</span></span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">k1</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">v1</span><br></pre></td></tr></table></figure>


<h4 id="破坏"><a href="#破坏" class="headerlink" title="破坏"></a>破坏</h4><p>若此时人为破坏该文件，之后重启redis</p>
<p>再次连接时会报错，表示redis无法连接：</p>
<p>Could not connect to Redis at 127.0.0.1:6379: Connection refused</p>
<h4 id="aof文件修复-redis-check-aof-–fix-appendonly-aof"><a href="#aof文件修复-redis-check-aof-–fix-appendonly-aof" class="headerlink" title="aof文件修复    redis-check-aof –fix appendonly.aof"></a>aof文件修复    redis-check-aof –fix appendonly.aof</h4><blockquote>
<p>如果这个aof文件有错误，这时候redis是启动不起来的，此时需要修复aof文件 </p>
<p>redis提供了一个工具用来修复aof文件    <code>redis-check-rdb</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行修复命令</span></span><br><span class="line">redis-check-aof --fix appendonly.aof</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 询问是否执行修复</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 y 执行修复</span></span><br><span class="line">0x              6e: Expected prefix &#x27;*&#x27;, got: &#x27;1&#x27;</span><br><span class="line">AOF analyzed: size=121, ok_up_to=110, diff=11</span><br><span class="line">This will shrink the AOF from 121 bytes, with 11 bytes, to 110 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示修复成功</span></span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure>


<h4 id="修复成功"><a href="#修复成功" class="headerlink" title="修复成功"></a>修复成功</h4><p>此时打开 appendonly.aof 文件可以看到人为添加的的部分已经被删除了</p>
<p>重启redsi即可正常连接</p>
<h3 id="2-aof有点和缺点"><a href="#2-aof有点和缺点" class="headerlink" title="2. aof有点和缺点"></a>2. aof有点和缺点</h3><blockquote>
<p> 优点：</p>
</blockquote>
<ol>
<li>每一次修改都同步，文件完整性会非常好</li>
<li>默认每秒同步一次，可能会丢失一秒的数据</li>
<li>不开启时从不同步，效率是最高的</li>
</ol>
<blockquote>
<p>缺点</p>
</blockquote>
<ol>
<li>相对于数据文件而言，aof远大于rdb，修复速度也比rdb慢</li>
<li>aof运行效率也要比rdb慢，所以redis默认的配置就是rdb持久化</li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li><p>RDB持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>
</li>
<li><p>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据， AOF命令以Redis协议追加保存每次写的操作到文件末尾， Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</p>
</li>
<li><p>如果你只希望你的数据在服务器运行的时候存在，即只做缓存，你也可以不使用任何持久化</p>
</li>
<li><p>同时开启两种持久化方式：</p>
</li>
</ol>
<ul>
<li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li>
<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库( AOF在不断变化不好备份) ， 快速重启，而且不会有AOF可能潜在的Bug ，留着作为一个万一的手段。</li>
</ul>
<ol start="5">
<li>性能建议</li>
</ol>
<ul>
<li><p>因为RDB文件只用作后备用途，建议只在Save 上持久化RDB文件，而且只要15分钟备份一次就够了，即只保留save 900 1这条规则。</p>
</li>
<li><p>如果Enable AOF ， 好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了， 代价一是带来了持续的IO ，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率， AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小<br>100%大小重写可以改到适当的数值。</p>
</li>
<li><p>如果不Enable AOF ，仅靠Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个，微博就是这种架构。</p>
</li>
</ul>
<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p>发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。微博、微信、关注系统就是以此实现</p>
<p>Redis客户端可以订阅任意数量的频道</p>
<p>发布/订阅消息图：</p>
<p><img src="image-20210527172112369.png" alt="image-20210527172112369"></p>
<ol>
<li>消息发送者</li>
<li>频道</li>
<li>消息订阅者</li>
</ol>
<blockquote>
<p>命令及测试</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PSUBSCRIBE pattern [pattern …]</td>
<td align="left">订阅一个或多个符合给定模式的频道。</td>
</tr>
<tr>
<td align="left">PUBSUB subcommand [argument [argument …]</td>
<td align="left">查看订阅与发布系统状态。</td>
</tr>
<tr>
<td align="left">PUBLISH channel message</td>
<td align="left">将信息发送到指定的频道。</td>
</tr>
<tr>
<td align="left">PUNSUBSCRIBE [pattern [pattern …]</td>
<td align="left">退订所有给定模式的频道。</td>
</tr>
<tr>
<td align="left">SUBSCRIBE channel [channel …]</td>
<td align="left">订阅给定的一个或多个频道的信息。</td>
</tr>
<tr>
<td align="left">UNSUBSCRIBE [channel [channel …]</td>
<td align="left">指退订给定的频道。</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端1（订阅者）订阅一个频道，此时会进入等待状态</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe pindao1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;pindao1&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端2（发布者），在频道中发布一条信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时在客户端1的窗口中会显示发布的信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1) <span class="string">&quot;message&quot;</span>		提示有一条消息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) <span class="string">&quot;pindao1&quot;</span>		显示来自于哪个频道</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3) <span class="string">&quot;123&quot;</span>			消息内容</span></span><br><span class="line">publish pindao1 123</span><br></pre></td></tr></table></figure>


<blockquote>
<p>原理</p>
</blockquote>
<p>Redis是使用C实现的，通过分析Redis源码里的pubsub.c文件，了解发布和订阅机制的底层实现，籍此加深对Redis的理解。</p>
<p>Redis通过PUBLISH、SUBSCRIBE 和PSUBSCRIBE等命令实现发布和订阅功能。</p>
<p>微信:</p>
<p>通过SUBSCRIBE命令订阅某频道后， redis-server 里维护了一个字典，字典的键就是一个个频道! 而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定channel的订阅链表中。</p>
<p>通过PUBLISH命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>
<p>Pub/Sub从字面上理解就是发布( Publish )与订阅( Subscribe ) ， 在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显 的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>
<blockquote>
<p>使用场景</p>
</blockquote>
<ol>
<li>实时消息系统</li>
<li>实时聊天（频道当做聊天室，将消息回显给所有人即可）</li>
<li>订阅，关注系统都可以</li>
</ol>
<p>稍微复杂的场景，我们会使用消息中间件MQ</p>
<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(mater/leader) ，后者称为从节点(slave/follower) ;<code>数据的复制是单向的，只能由主节点到从节点</code>。Master以写为主 ， Slave以读为主。</p>
<p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点) ，但一个从节点只能有一个主节点。</p>
<p>主从复制的作用主要包括：</p>
<p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复;实际上是-种服务的冗余。<br>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务(即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点) ， 分担服务器负载;尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。<br>4、高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p>
<p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的 ， 原因如下:<br>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大;<br>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务 器内存容量为256G ，也不能将所有内存用作Redis存储内存，一般来说， <code>单台Redis最大使用内存不应该超过20G</code>。</p>
<p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p>
<p>对于这种场景，我们可以使如下这种架构:</p>
<p><img src="image-20210601085936858.png" alt="image-20210601085936858"></p>
<blockquote>
<p>业务中80%情况下都是进行读操作，用以减缓服务器的压力，在架构中经常使用</p>
<p>一般最低配为一主二从，因为当主节点挂了时，由于哨兵模式，两个从节点之间可以进行选举，当只有一个从节点时，就无法进行选举</p>
</blockquote>
<h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><blockquote>
<p>只配置从库，不用配置主库</p>
<p>由于redis启动默认就为主机，因此搭建集群时，仅需配置从机即可</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication	# 查看当前库的信息</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master		# 角色</span><br><span class="line">connected_slaves:0		# 从机数量</span><br><span class="line">master_replid:0454c2f247e7962fdc77c5e2a5a1434da8355907</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>


<h3 id="复制3份配置文件，然后修改对应的信息"><a href="#复制3份配置文件，然后修改对应的信息" class="headerlink" title="复制3份配置文件，然后修改对应的信息"></a>复制3份配置文件，然后修改对应的信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 修改端口</span></span><br><span class="line">port 6380</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 后台运行的</span></span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. <span class="built_in">log</span>日志</span></span><br><span class="line">logfile &quot;6380.log&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. rdb文件</span></span><br><span class="line">dbfilename dump6380.rdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：若要做主机的服务配置有requirepass（密码）,则需要在从机配置中配置masterauth</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 否则连接会出错，主机中会无法显示从机的信息</span></span><br><span class="line">masterauth 123</span><br></pre></td></tr></table></figure>


<h3 id="依次依靠三个配置文件启动三个redis服务"><a href="#依次依靠三个配置文件启动三个redis服务" class="headerlink" title="依次依靠三个配置文件启动三个redis服务"></a>依次依靠三个配置文件启动三个redis服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# redis-server redis-config/redis79.conf </span><br><span class="line">[root@localhost bin]# redis-server redis-config/redis80.conf </span><br><span class="line">[root@localhost bin]# redis-server redis-config/redis81.conf </span><br></pre></td></tr></table></figure>


<h3 id="修改服务为从机"><a href="#修改服务为从机" class="headerlink" title="修改服务为从机"></a>修改服务为从机</h3><blockquote>
<p>slaveof ip port 选择服务器作为自己的主节点</p>
<p>slaveof no one 选择自身为主节点</p>
</blockquote>
<h4 id="命令方式设置：关机即无"><a href="#命令方式设置：关机即无" class="headerlink" title="命令方式设置：关机即无"></a>命令方式设置：关机即无</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 认老大</span></span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时查询信息可以看到，本机角色变为从机</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave			##################</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:-1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:1</span><br><span class="line">master_link_down_since_seconds:1622596401</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:90e5b38935f2261fb2e21203395e150dcd644fb0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主机信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 主机中会显示从机的信息</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1			### 多了从机的配置，及从机的信息</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=42,lag=0</span><br><span class="line">master_replid:6c82c3de5c305587d875b941b112c488a43ed527</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:42</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两台从机都设置完毕后的主机</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=784,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=784,lag=0</span><br></pre></td></tr></table></figure>


<h4 id="修改配置文件的配置：永久性的"><a href="#修改配置文件的配置：永久性的" class="headerlink" title="修改配置文件的配置：永久性的"></a>修改配置文件的配置：永久性的</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line">replicaof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>


<h2 id="3-细节"><a href="#3-细节" class="headerlink" title="3. 细节"></a>3. 细节</h2><p>主机可以写，从机不能写只能读，主机中的所有信息和数据，都会自动被从机保存。</p>
<p>从机执行写的操作时：</p>
<p><img src="image-20210602093554108.png" alt="image-20210602093554108"></p>
<p>测试：</p>
<ol>
<li>主机断开连接时，从机依旧是连接到主机的，依旧没有写的权限；此时如果主机回来了，从机仍旧可以直接获取主机写的信息。</li>
<li>如果使用命令行配置的主从，此时如果从机重启，该从机就会变回主机；此时重新设置为从机，立马就会从主机中获取值</li>
</ol>
<blockquote>
<p>复制原理</p>
</blockquote>
<p>Slave启动成功连接到master后会发送一个sync同步命令</p>
<p>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，<code>master将传送整个数据文件到slave ，并完成一次完全同步。</code></p>
<p><code>全量复制</code>：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>
<p><code>增量复制</code>：Master继续将新的所有收集到的修改命令依次传给slave ，完成同步</p>
<p>只要是重新连接master，一次完全同步（全量复制）将被自动执行</p>
<blockquote>
<p>层层链路模式</p>
</blockquote>
<p><img src="image-20210603092211802.png" alt="image-20210603092211802"></p>
<blockquote>
<p>谋朝篡位手动版</p>
</blockquote>
<p>主机挂机时，手动在某个从机上输入，<code>slaveof no one</code>设置自身为主机，其他从机切换追随新竞主机</p>
<h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><blockquote>
<p>自动选举老大的模式</p>
</blockquote>
<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<p><img src="image-20210604091447387.png" alt="image-20210604091447387"></p>
<p>哨兵作用：</p>
<ul>
<li><p>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</p>
</li>
<li><p>当哨兵监测到master宕机，会自动将slave切换成master ，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</p>
</li>
</ul>
<p>然而仅一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用<code>多个哨兵</code>进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<p><img src="image-20210604091817044.png" alt="image-20210604091817044"></p>
<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行<code>failover[故障转移]</code>过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为<code>主观下线</code>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<code>客观下线</code>。</p>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 配置哨兵配置文件   sentinel.conf  <span class="comment">#######################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel monitor 固定格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> myredis 名称，可随便起</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 127.0.0.1 6379 监视的主机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 投的票/允许投票选举主机 ？</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 启动哨兵 <span class="comment">#######################</span></span></span><br><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>


<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果master节点断开了，这个时候会从从机中随机选择一个服务器作为主机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如： 主机为：6380  从机为：6379 和 6381</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时主机断开，哨兵并不会直接进行投票选举，一定时间主机无响应后，哨兵进行调整：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵日志：</span></span><br><span class="line">3632:X 07 Jun 2021 21:19:02.126 # +sdown master myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.126 # +odown master myredis 127.0.0.1 6380 #quorum 1/1</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.126 # +new-epoch 8</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.126 # +try-failover master myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.128 # +vote-for-leader 72693c12e020c758eef76bc38a1817fd7735dfd4 8</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.128 # +elected-leader master myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.128 # +failover-state-select-slave master myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.191 # +selected-slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.191 * +failover-state-send-slaveof-noone slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.244 * +failover-state-wait-promotion slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.637 # +promoted-slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.637 # +failover-state-reconf-slaves master myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:02.691 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:03.200 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:04.255 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:04.316 # +failover-end master myredis 127.0.0.1 6380</span><br><span class="line">3632:X 07 Jun 2021 21:19:04.316 # +switch-master myredis 127.0.0.1 6380 127.0.0.1 6379</span><br><span class="line">3632:X 07 Jun 2021 21:19:04.317 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br><span class="line">3632:X 07 Jun 2021 21:19:04.317 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主机由6380 转至 6379</span></span><br><span class="line">3632:X 07 Jun 2021 21:19:34.340 # +sdown slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时如果主机 6380 重新连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵日志：</span></span><br><span class="line">3632:X 07 Jun 2021 21:21:47.953 * +convert-to-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看6379 信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> info replication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看出原来的主机现在作为一台从机进行工作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=83402,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6380,state=online,offset=83402,lag=1</span><br><span class="line">master_replid:d285d1af5502b618a690774fc1e3e58b45f88d0b</span><br><span class="line">master_replid2:a45f8a275277b9759db20c6c5a6f5ee9f6e57485</span><br><span class="line">master_repl_offset:83534</span><br><span class="line">second_repl_offset:30903</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:25634</span><br><span class="line">repl_backlog_histlen:57901</span><br></pre></td></tr></table></figure>


<h2 id="4-优缺点-1"><a href="#4-优缺点-1" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h2><p>优点：</p>
<pre><code>1. 哨兵集群，基于主从复制模式，所有的主从配置的有点，他都有
2. 主从可以切换，故障可以转移，系统的可用性就会更好
3. 哨兵模式就是主从模式的升级，由手动到自动，更加健壮</code></pre>
<p>缺点：</p>
<pre><code>1. Redis，集群容量一旦到达上限，在线扩容就十分麻烦
2. 实现哨兵模式配置其实是非常麻烦的，</code></pre>
<h2 id="5-哨兵模式的全部配置"><a href="#5-哨兵模式的全部配置" class="headerlink" title="5. 哨兵模式的全部配置"></a>5. 哨兵模式的全部配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Example sentine1. conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash">哨兵sentine实例运行的端口默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">哨兵sentine1的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">哨兵sentine1监控的redis主节点的ip port</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> master-name 可以自己命名的主节点名字只能由字母A-z、数字0-9、这三个字符<span class="string">&quot;.-_&quot;</span>组成。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> quorum 配置多少个sentine1哨兵统一认为master主节点失联那么这时客观上认为主节点失联了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentine1 monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentine1 monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当在Redis实例中开启了requirepass foobared授权密码这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置哨兵sentine1连接主从的密码注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentine1 auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentine1 auth-pass mymaster MySUPER--secret-0123passwOrd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定多少毫秒之后主节点没有应答哨兵sentinel 此时哨兵主观上认为主节点下线默认30秒</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentine1 down-after-milliseconds &lt;master-name&gt; &lt;mi 1liseconds&gt;</span></span><br><span class="line">sentine1 down-after-mi 11iseconds mymaster 30000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个配置项指定了在发生failover主备切换时最多可以有多少个s1ave同时对新的master进行同步，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这个数字越小，完成failover所需的时间就越长，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">但是如果这个数字越大，就意味着越多的slave因为replication而不可用</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可以通过将这个值设为1来保证每次只有一个s1ave处于不能处理命令请求的状态。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentine1 parallel-syncs &lt;master-name&gt; &lt;nums laves&gt;</span></span><br><span class="line">sentine1 paralle1-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">故障转移的超时时间failover-timeout 可以用在以下这些方面:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1.同一个sentinel对同一个master两次failover之间的问隔时间。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves 依然会被正确配置为指向</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> master,但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认三分钟</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentine1 failover-timeout &lt;master-name&gt; &lt;mi 11iseconds&gt;</span></span><br><span class="line">sentine1 failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> SCRIPTS EXECUTION</span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">对于脚本的运行结果有以下规则:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="meta">#</span><span class="bash">若脚本执行后返回2，或者比2更高的一个返回值。脚本将不会重复执行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKIL信号终止，之后重新执行。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通知型脚本:当sentinel有任何警告级别的事件发生时(比如说redis实例的主观失效和客观失效等等)，将会去调用这个脚本，这时这个</span></span><br><span class="line"><span class="meta">#</span><span class="bash">脚本应该通过邮件，SMS 等方式去通知系统管理员关于系统不正常运行的信息。调用该脚木时，将传给脚木两个参数，一 个是事件的类型，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">个是事件的措述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径。并且是可执行的，否则</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sentinel无法正常启动成功。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">通知脚本  shell编程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentine1 notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentine1 notificati on-script mymaster /var/redi s/notify.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">客户端重新配置主节点参数脚木</span></span><br><span class="line"><span class="meta">#</span><span class="bash">当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;master-name&gt; &lt;ro1e&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">目前&lt;state&gt;总是“failover<span class="string">&quot;,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;role&gt; 是<span class="string">&quot;leader&quot;</span>或省<span class="string">&quot;observer&quot;</span>中的一个。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数from-ip， from-port, to-ip， to-port是用来和旧的master和新的master (即旧的s1ave)通信的</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/ reconfig.sh</span><br></pre></td></tr></table></figure>


<h1 id="Redis缓存穿透、击穿和雪崩"><a href="#Redis缓存穿透、击穿和雪崩" class="headerlink" title="Redis缓存穿透、击穿和雪崩"></a>Redis缓存穿透、击穿和雪崩</h1><p>​    Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>
<p>​    另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p>
<blockquote>
<p>服务的高可用问题</p>
</blockquote>
<h2 id="1-缓存穿透（查不到导致的）"><a href="#1-缓存穿透（查不到导致的）" class="headerlink" title="1. 缓存穿透（查不到导致的）"></a>1. 缓存穿透（查不到导致的）</h2><p>![image-20210609143615903](4. Redis进阶/image-20210609143615903.png)</p>
<p>正常请求：</p>
<ul>
<li><p>用户首先查询缓存，若缓存中有数据则直接返回给用户；</p>
</li>
<li><p>若缓存中没有该数据则查询数据库，在数据库中查询到该数据后返回给用户；</p>
</li>
</ul>
<p>非正常请求：</p>
<ul>
<li>用户首先查询缓存，缓存中没有请求的数据，然后请求数据库，数据库中也没有该数据；</li>
<li>此时，如果存在攻击，攻击方不断的请求，数据库将接收到大量的访问，此时数据库将非常容易崩溃；</li>
</ul>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    用户想要查询一个数据，发现redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote>
<p>布隆过滤器</p>
</blockquote>
<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免对底层存储系统的查询压力</p>
<p>![image-20210609145640547](4. Redis进阶/image-20210609145640547.png)</p>
<blockquote>
<p>缓存空对象</p>
</blockquote>
<p>当存储层不命中后，即使返回空对象也将其缓存起来，同时会设置一个过期时间，之后在访问这个数据将会从缓存中获取，保护了后端数据源</p>
<p>![image-20210609165739202](4. Redis进阶/image-20210609165739202.png)</p>
<p>但是这种方法会存在两个问题:<br>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键;<br>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致 ，这对于需要保持一致性的业务会有影响。</p>
<h2 id="2-缓存击穿（查询量过大，缓存过期导致）"><a href="#2-缓存击穿（查询量过大，缓存过期导致）" class="headerlink" title="2. 缓存击穿（查询量过大，缓存过期导致）"></a>2. 缓存击穿（查询量过大，缓存过期导致）</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点 ，在不停的扛着大并发， 大并发集中对这一个点进行访问 ，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>
<p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>
<p>类比于热搜：</p>
<p>若该条热搜在缓存中存储60s，会在60.1s时恢复，此时的0.1s中所有的访问都会砸在数据库上。</p>
<h3 id="2-2-解决方法"><a href="#2-2-解决方法" class="headerlink" title="2.2 解决方法"></a>2.2 解决方法</h3><blockquote>
<p>设置热点数据永不过期</p>
</blockquote>
<p>从缓存层面看，没有设置过期时间，所以就不会出现热点key过期后产生的问题；</p>
<blockquote>
<p>使用分布式锁</p>
</blockquote>
<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>
<p>![image-20210609175512618](4. Redis进阶/image-20210609175512618.png)</p>
<h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h2><blockquote>
<p>概念</p>
</blockquote>
<p>缓存雪崩，是指在某一个时间段，缓存集体过期失效。如：Redis宕机！</p>
<p>产生雪崩的原因之一， 比如双十二零点抢购 ，这波商品信息时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候 ，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>
<p>![image-20210609180032014](4. Redis进阶/image-20210609180032014.png)</p>
<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>
<blockquote>
<p>解决方法</p>
</blockquote>
<p>双十一：停掉一些服务（保证主要的服务可用）</p>
<p><strong>redis高可用：</strong><br>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis ，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活）</p>
<p><strong>限流降级：</strong><br>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<p><strong>数据预热：</strong><br>数据预热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key ，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引背后的数据结构及算法原理</title>
    <url>/2021/04/16/java/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20mysql/z.%20MySQL%E7%B4%A2%E5%BC%95%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="转载自："><a href="#转载自：" class="headerlink" title="转载自："></a>转载自：</h1><a id="more"></a>

<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文以MySQL数据库为研究对象，讨论与数据库索引相关的一些话题。特别需要说明的是，MySQL支持诸多存储引擎，而各种存储引擎对索引的支持也各不相同，因此MySQL数据库支持多种索引类型，如BTree索引，哈希索引，全文索引等等。为了避免混乱，本文将只关注于BTree索引，因为这是平常使用MySQL时主要打交道的索引，至于哈希索引和全文索引本文暂不讨论。</p>
<p>文章主要内容分为三个部分。</p>
<p>第一部分主要从数据结构及算法理论层面讨论MySQL数据库索引的数理基础。</p>
<p>第二部分结合MySQL数据库中MyISAM和InnoDB数据存储引擎中索引的架构实现讨论聚集索引、非聚集索引及覆盖索引等话题。</p>
<p>第三部分根据上面的理论基础，讨论MySQL中高性能使用索引的策略。</p>
<h1 id="数据结构及算法基础"><a href="#数据结构及算法基础" class="headerlink" title="数据结构及算法基础"></a>数据结构及算法基础</h1><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h2><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
<p>我们知道，数据库查询是数据库的最主要功能之一。我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。最基本的查询算法当然是<a href="http://en.wikipedia.org/wiki/Linear_search">顺序查找</a>（linear search），这种复杂度为O(n)的算法在数据量很大时显然是糟糕的，好在计算机科学的发展提供了很多更优秀的查找算法，例如<a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">二分查找</a>（binary search）、<a href="http://en.wikipedia.org/wiki/Binary_search_tree">二叉树查找</a>（binary tree search）等。如果稍微分析一下会发现，每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于<a href="http://en.wikipedia.org/wiki/Binary_search_tree">二叉查找树</a>上，但是数据本身的组织结构不可能完全满足各种数据结构（例如，理论上不可能同时将两列都按顺序进行组织），所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p>
<p>看一个例子：</p>
<p><img src="1.png" alt="img"></p>
<p>图1</p>
<p>图1展示了一种可能的索引方式。左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在O(log2n)O(log2n)的复杂度内获取到相应数据。</p>
<p>虽然这是一个货真价实的索引，但是实际的数据库系统几乎没有使用二叉查找树或其进化品种<a href="http://en.wikipedia.org/wiki/Red-black_tree">红黑树</a>（red-black tree）实现的，原因会在下文介绍。</p>
<h2 id="B-Tree和B-Tree"><a href="#B-Tree和B-Tree" class="headerlink" title="B-Tree和B+Tree"></a>B-Tree和B+Tree</h2><p>目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构，在本文的下一节会结合存储器原理及计算机存取原理讨论为什么B-Tree和B+Tree在被如此广泛用于索引，这一节先单纯从数据结构角度描述它们。</p>
<h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>为了描述B-Tree，首先定义一条数据记录为一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构：</p>
<p>d为大于1的一个正整数，称为B-Tree的度。</p>
<p>h为一个正整数，称为B-Tree的高度。</p>
<p>每个非叶子节点由n-1个key和n个指针组成，其中d&lt;=n&lt;=2d。</p>
<p>每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。</p>
<p>所有叶节点具有相同的深度，等于树高h。</p>
<p>key和指针互相间隔，节点两端是指针。</p>
<p>一个节点中的key从左到右非递减排列。</p>
<p>所有节点组成树结构。</p>
<p>每个指针要么为null，要么指向另外一个节点。</p>
<p>如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于v(key1)v(key1)，其中v(key1)v(key1)为node的第一个key的值。</p>
<p>如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于v(keym)v(keym)，其中v(keym)v(keym)为node的最后一个key的值。</p>
<p>如果某个指针在节点node的左右相邻key分别是keyikeyi和keyi+1keyi+1且不为null，则其指向节点的所有key小于v(keyi+1)v(keyi+1)且大于v(keyi)v(keyi)。</p>
<p>图2是一个d=2的B-Tree示意图。</p>
<p><img src="2.png" alt="img"></p>
<p>图2</p>
<p>由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。B-Tree上查找算法的伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BTree_Search(node, key) &#123;    if(node &#x3D;&#x3D; null) return null;    foreach(node.key)    &#123;        if(node.key[i] &#x3D;&#x3D; key) return node.data[i];            if(node.key[i] &gt; key) return BTree_Search(point[i]-&gt;node);    &#125;    return BTree_Search(point[i+1]-&gt;node);&#125;data &#x3D; BTree_Search(root, my_key);</span><br></pre></td></tr></table></figure>
<p>关于B-Tree有一系列有趣的性质，例如一个度为d的B-Tree，设其索引N个key，则其树高h的上限为logd((N+1)/2)logd((N+1)/2)，检索一个key，其查找节点个数的渐进复杂度为O(logdN)O(logdN)。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。</p>
<p>另外，由于插入删除新的数据记录会破坏B-Tree的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持B-Tree性质，本文不打算完整讨论B-Tree这些内容，因为已经有许多资料详细说明了B-Tree的数学性质及插入删除算法，有兴趣的朋友可以在本文末的参考文献一栏找到相应的资料进行阅读。</p>
<h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p>
<p>与B-Tree相比，B+Tree有以下不同点：</p>
<p>每个节点的指针上限为2d而不是2d+1。</p>
<p>内节点不存储data，只存储key；叶子节点不存储指针。</p>
<p>图3是一个简单的B+Tree示意。</p>
<p><img src="3.png" alt="img"></p>
<p>图3</p>
<p>由于并不是所有节点都具有相同的域，因此B+Tree中叶节点和内节点一般大小不同。这点与B-Tree不同，虽然B-Tree中不同节点存放的key和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现中B-Tree往往对每个节点申请同等大小的空间。</p>
<p>一般来说，B+Tree比B-Tree更适合实现外存储索引结构，具体原因与外存储器原理及计算机存取原理有关，将在下面讨论。</p>
<h3 id="带有顺序访问指针的B-Tree"><a href="#带有顺序访问指针的B-Tree" class="headerlink" title="带有顺序访问指针的B+Tree"></a>带有顺序访问指针的B+Tree</h3><p>一般在数据库系统或文件系统中使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。</p>
<p><img src="4.png" alt="img"></p>
<p>图4</p>
<p>如图4所示，在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p>
<p>这一节对B-Tree和B+Tree进行了一个简单的介绍，下一节结合存储器存取原理介绍为什么目前B+Tree是数据库系统实现索引的首选数据结构。</p>
<h2 id="为什么使用B-Tree（B-Tree）"><a href="#为什么使用B-Tree（B-Tree）" class="headerlink" title="为什么使用B-Tree（B+Tree）"></a>为什么使用B-Tree（B+Tree）</h2><p>上文说过，红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用B-/+Tree作为索引结构，这一节将结合计算机组成原理相关知识讨论B-/+Tree作为索引的理论基础。</p>
<p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。下面先介绍内存和磁盘存取原理，然后再结合这些原理分析B-/+Tree作为索引的效率。</p>
<h3 id="主存存取原理"><a href="#主存存取原理" class="headerlink" title="主存存取原理"></a>主存存取原理</h3><p>目前计算机使用的主存基本都是随机读写存储器（RAM），现代RAM的结构和存取原理比较复杂，这里本文抛却具体差别，抽象出一个十分简单的存取模型来说明RAM的工作原理。</p>
<p><img src="5.png" alt="img"></p>
<p>图5</p>
<p>从抽象角度看，主存是一系列的存储单元组成的矩阵，每个存储单元存储固定大小的数据。每个存储单元有唯一的地址，现代主存的编址规则比较复杂，这里将其简化成一个二维地址：通过一个行地址和一个列地址可以唯一定位到一个存储单元。图5展示了一个4 x 4的主存模型。</p>
<p>主存的存取过程如下：</p>
<p>当系统需要读取主存时，则将地址信号放到地址总线上传给主存，主存读到地址信号后，解析信号并定位到指定存储单元，然后将此存储单元数据放到数据总线上，供其它部件读取。</p>
<p>写主存的过程类似，系统将要写入单元地址和数据分别放在地址总线和数据总线上，主存读取两个总线的内容，做相应的写操作。</p>
<p>这里可以看出，主存存取的时间仅与存取次数呈线性关系，因为不存在机械操作，两次存取的数据的“距离”不会对时间有任何影响，例如，先取A0再取A1和先取A0再取D3的时间消耗是一样的。</p>
<h3 id="磁盘存取原理"><a href="#磁盘存取原理" class="headerlink" title="磁盘存取原理"></a>磁盘存取原理</h3><p>上文说过，索引一般以文件形式存储在磁盘上，索引检索需要磁盘I/O操作。与主存不同，磁盘I/O存在机械运动耗费，因此磁盘I/O的时间消耗是巨大的。</p>
<p>图6是磁盘的整体结构示意图。</p>
<p><img src="6.png" alt="img"></p>
<p>图6</p>
<p>一个磁盘由大小相同且同轴的圆形盘片组成，磁盘可以转动（各个磁盘必须同步转动）。在磁盘的一侧有磁头支架，磁头支架固定了一组磁头，每个磁头负责存取一个磁盘的内容。磁头不能转动，但是可以沿磁盘半径方向运动（实际是斜切向运动），每个磁头同一时刻也必须是同轴的，即从正上方向下看，所有磁头任何时候都是重叠的（不过目前已经有多磁头独立技术，可不受此限制）。</p>
<p>图7是磁盘结构的示意图。</p>
<p><img src="7.png" alt="img"></p>
<p>图7</p>
<p>盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个磁道，所有半径相同的磁道组成一个柱面。磁道被沿半径线划分成一个个小的段，每个段叫做一个扇区，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。</p>
<p>当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做寻道，所耗费时间叫做寻道时间，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做旋转时间。</p>
<h3 id="局部性原理与磁盘预读"><a href="#局部性原理与磁盘预读" class="headerlink" title="局部性原理与磁盘预读"></a>局部性原理与磁盘预读</h3><p>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：</p>
<p>当一个数据被用到时，其附近的数据也通常会马上被使用。</p>
<p>程序运行期间所需要的数据通常比较集中。</p>
<p>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。</p>
<p>预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p>
<h3 id="B-Tree索引的性能分析"><a href="#B-Tree索引的性能分析" class="headerlink" title="B-/+Tree索引的性能分析"></a>B-/+Tree索引的性能分析</h3><p>到这里终于可以分析B-/+Tree索引的性能了。</p>
<p>上文说过一般使用磁盘I/O次数评价索引结构的优劣。先从B-Tree分析，根据B-Tree的定义，可知检索一次最多需要访问h个节点。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：</p>
<p>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</p>
<p>B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)O(h)=O(logdN)。一般实际应用中，出度d是非常大的数字，通常超过100，因此h非常小（通常不超过3）。</p>
<p>综上所述，用B-Tree作为索引结构效率是非常高的。</p>
<p>而红黑树这种结构，h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I/O渐进复杂度也为O(h)，效率明显比B-Tree差很多。</p>
<p>上文还说过，B+Tree更适合外存索引，原因和内节点出度d有关。从上面分析可以看到，d越大索引的性能越好，而出度的上限取决于节点内key和data的大小：</p>
<p>dmax=floor(pagesize/(keysize+datasize+pointsize))dmax=floor(pagesize/(keysize+datasize+pointsize))</p>
<p>floor表示向下取整。由于B+Tree内节点去掉了data域，因此可以拥有更大的出度，拥有更好的性能。</p>
<p>这一章从理论角度讨论了与索引相关的数据结构与算法问题，下一章将讨论B+Tree是如何具体实现为MySQL中索引，同时将结合MyISAM和InnDB存储引擎介绍非聚集索引和聚集索引两种不同的索引实现形式。</p>
<h1 id="MySQL索引实现"><a href="#MySQL索引实现" class="headerlink" title="MySQL索引实现"></a>MySQL索引实现</h1><p>在MySQL中，索引属于存储引擎级别的概念，不同存储引擎对索引的实现方式是不同的，本文主要讨论MyISAM和InnoDB两个存储引擎的索引实现方式。</p>
<h2 id="MyISAM索引实现"><a href="#MyISAM索引实现" class="headerlink" title="MyISAM索引实现"></a>MyISAM索引实现</h2><p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM索引的原理图：</p>
<p><img src="8.png" alt="img"></p>
<p>图8</p>
<p>这里设表一共有三列，假设我们以Col1为主键，则图8是一个MyISAM表的主索引（Primary key）示意。可以看出MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：</p>
<p><img src="9.png" alt="img"></p>
<p>图9</p>
<p>同样也是一颗B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p>
<p>MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。</p>
<h2 id="InnoDB索引实现"><a href="#InnoDB索引实现" class="headerlink" title="InnoDB索引实现"></a>InnoDB索引实现</h2><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。</p>
<p>第一个重大区别是InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。</p>
<p><img src="10.png" alt="img"></p>
<p>图10</p>
<p>图10是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p>
<p>第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，图11为定义在Col3上的一个辅助索引：</p>
<p><img src="11.png" alt="img"></p>
<p>图11</p>
<p>这里以英文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</p>
<p>了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</p>
<p>下一章将具体讨论这些与索引有关的优化策略。</p>
<h1 id="索引使用策略及优化"><a href="#索引使用策略及优化" class="headerlink" title="索引使用策略及优化"></a>索引使用策略及优化</h1><p>MySQL的优化主要分为结构优化（Scheme optimization）和查询优化（Query optimization）。本章讨论的高性能索引策略主要属于结构优化范畴。本章的内容完全基于上文的理论基础，实际上一旦理解了索引背后的机制，那么选择高性能的策略就变成了纯粹的推理，并且可以理解这些策略背后的逻辑。</p>
<h2 id="示例数据库"><a href="#示例数据库" class="headerlink" title="示例数据库"></a>示例数据库</h2><p>为了讨论索引策略，需要一个数据量不算小的数据库作为示例。本文选用MySQL官方文档中提供的示例数据库之一：employees。这个数据库关系复杂度适中，且数据量较大。下图是这个数据库的E-R关系图（引用自MySQL官方手册）：</p>
<p><img src="12.png" alt="img"></p>
<p>图12</p>
<p>MySQL官方文档中关于此数据库的页面为<a href="http://dev.mysql.com/doc/employee/en/employee.html%E3%80%82%E9%87%8C%E9%9D%A2%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E6%AD%A4%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E5%B9%B6%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%92%8C%E5%AF%BC%E5%85%A5%E6%96%B9%E6%B3%95%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E5%85%B4%E8%B6%A3%E5%AF%BC%E5%85%A5%E6%AD%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84MySQL%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E6%96%87%E4%B8%AD%E5%86%85%E5%AE%B9%E3%80%82">http://dev.mysql.com/doc/employee/en/employee.html。里面详细介绍了此数据库，并提供了下载地址和导入方法，如果有兴趣导入此数据库到自己的MySQL可以参考文中内容。</a></p>
<h2 id="最左前缀原理与相关优化"><a href="#最左前缀原理与相关优化" class="headerlink" title="最左前缀原理与相关优化"></a>最左前缀原理与相关优化</h2><p>高效使用索引的首要条件是知道什么样的查询会使用到索引，这个问题和B+Tree中的“最左前缀原理”有关，下面通过例子说明最左前缀原理。</p>
<p>这里先说一下联合索引的概念。在上文中，我们都是假设索引只引用了单个的列，实际上，MySQL中的索引可以以一定顺序引用多个列，这种索引叫做联合索引，一般的，一个联合索引是一个有序元组&lt;a1, a2, …, an&gt;，其中各个元素均为数据表的一列，实际上要严格定义索引需要用到关系代数，但是这里我不想讨论太多关系代数的话题，因为那样会显得很枯燥，所以这里就不再做严格定义。另外，单列索引可以看成联合索引元素数为1的特例。</p>
<p>以employees.titles表为例，下面先查看其上都有哪些索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM employees.titles;</span><br><span class="line">+--------+------------+----------+--------------+-------------+-----------+-------------+------+------------+</span><br><span class="line">| Table  | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Null | Index_type |</span><br><span class="line">+--------+------------+----------+--------------+-------------+-----------+-------------+------+------------+</span><br><span class="line">| titles |          0 | PRIMARY  |            1 | emp_no      | A         |        NULL |      | BTREE      |</span><br><span class="line">| titles |          0 | PRIMARY  |            2 | title       | A         |        NULL |      | BTREE      |</span><br><span class="line">| titles |          0 | PRIMARY  |            3 | from_date   | A         |      443308 |      | BTREE      |</span><br><span class="line">| titles |          1 | emp_no   |            1 | emp_no      | A         |      443308 |      | BTREE      |</span><br><span class="line">+--------+------------+----------+--------------+-------------+-----------+-------------+------+------------+</span><br></pre></td></tr></table></figure>
<p>从结果中可以到titles表的主索引为&lt;emp_no, title, from_date&gt;，还有一个辅助索引<emp_no>。为了避免多个索引使事情变复杂（MySQL的SQL优化器在多索引时行为比较复杂），这里我们将辅助索引drop掉：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees.titles DROP INDEX emp_no;</span><br></pre></td></tr></table></figure>
<p>这样就可以专心分析索引PRIMARY的行为了。</p>
<h3 id="情况一：全列匹配。"><a href="#情况一：全列匹配。" class="headerlink" title="情况一：全列匹配。"></a>情况一：全列匹配。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39; AND title&#x3D;&#39;Senior Engineer&#39; AND from_date&#x3D;&#39;1986-06-26&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+-------------------+------+-------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref               | rows | Extra |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+-------------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | titles | const | PRIMARY       | PRIMARY | 59      | const,const,const |    1 |       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+-------------------+------+-------+</span><br></pre></td></tr></table></figure>
<p>很明显，当按照索引中所有列进行精确匹配（这里精确匹配指“=”或“IN”匹配）时，索引可以被用到。这里有一点需要注意，理论上索引对顺序是敏感的，但是由于MySQL的查询优化器会自动调整where子句的条件顺序以使用适合的索引，例如我们将where中的条件顺序颠倒：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE from_date&#x3D;&#39;1986-06-26&#39; AND emp_no&#x3D;&#39;10001&#39; AND title&#x3D;&#39;Senior Engineer&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+-------------------+------+-------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref               | rows | Extra |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+-------------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | titles | const | PRIMARY       | PRIMARY | 59      | const,const,const |    1 |       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+-------------------+------+-------+</span><br></pre></td></tr></table></figure>
<p>效果是一样的。</p>
<h3 id="情况二：最左前缀匹配。"><a href="#情况二：最左前缀匹配。" class="headerlink" title="情况二：最左前缀匹配。"></a>情况二：最左前缀匹配。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39;;</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">| id | select_type | table  | type | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | titles | ref  | PRIMARY       | PRIMARY | 4       | const |    1 |       |</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------+</span><br></pre></td></tr></table></figure>
<p>当查询条件精确匹配索引的左边连续一个或几个列时，如<emp_no>或&lt;emp_no, title&gt;，所以可以被用到，但是只能用到一部分，即条件所组成的最左前缀。上面的查询从分析结果看用到了PRIMARY索引，但是key_len为4，说明只用到了索引的第一列前缀。</p>
<h3 id="情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。"><a href="#情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。" class="headerlink" title="情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。"></a>情况三：查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39; AND from_date&#x3D;&#39;1986-06-26&#39;;</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table  | type | possible_keys | key     | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | ref  | PRIMARY       | PRIMARY | 4       | const |    1 | Using where |</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>此时索引使用情况和情况二相同，因为title未提供，所以查询只用到了索引的第一列，而后面的from_date虽然也在索引中，但是由于title不存在而无法和左前缀连接，因此需要对结果进行扫描过滤from_date（这里由于emp_no唯一，所以不存在扫描）。如果想让from_date也使用索引而不是where过滤，可以增加一个辅助索引&lt;emp_no, from_date&gt;，此时上面的查询会使用这个索引。除此之外，还可以使用一种称之为“隔离列”的优化方法，将emp_no与from_date之间的“坑”填上。</p>
<p>首先我们看下title一共有几种不同的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT(title) FROM employees.titles;</span><br><span class="line">+--------------------+</span><br><span class="line">| title              |</span><br><span class="line">+--------------------+</span><br><span class="line">| Senior Engineer    |</span><br><span class="line">| Staff              |</span><br><span class="line">| Engineer           |</span><br><span class="line">| Senior Staff       |</span><br><span class="line">| Assistant Engineer |</span><br><span class="line">| Technique Leader   |</span><br><span class="line">| Manager            |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>
<p>只有7种。在这种成为“坑”的列值比较少的情况下，可以考虑用“IN”来填补这个“坑”从而形成最左前缀：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles</span><br><span class="line">WHERE emp_no&#x3D;&#39;10001&#39;</span><br><span class="line">AND title IN (&#39;Senior Engineer&#39;, &#39;Staff&#39;, &#39;Engineer&#39;, &#39;Senior Staff&#39;, &#39;Assistant Engineer&#39;, &#39;Technique Leader&#39;, &#39;Manager&#39;)</span><br><span class="line">AND from_date&#x3D;&#39;1986-06-26&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | range | PRIMARY       | PRIMARY | 59      | NULL |    7 | Using where |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>这次key_len为59，说明索引被用全了，但是从type和rows看出IN实际上执行了一个range查询，这里检查了7个key。看下两种查询的性能比较：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW PROFILES;</span><br><span class="line">+----------+------------+-------------------------------------------------------------------------------+</span><br><span class="line">| Query_ID | Duration   | Query                                                                         |</span><br><span class="line">+----------+------------+-------------------------------------------------------------------------------+</span><br><span class="line">|       10 | 0.00058000 | SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39; AND from_date&#x3D;&#39;1986-06-26&#39;|</span><br><span class="line">|       11 | 0.00052500 | SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39; AND title IN ...          |</span><br><span class="line">+----------+------------+-------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>“填坑”后性能提升了一点。如果经过emp_no筛选后余下很多数据，则后者性能优势会更加明显。当然，如果title的值很多，用填坑就不合适了，必须建立辅助索引。</p>
<h3 id="情况四：查询条件没有指定索引第一列。"><a href="#情况四：查询条件没有指定索引第一列。" class="headerlink" title="情况四：查询条件没有指定索引第一列。"></a>情况四：查询条件没有指定索引第一列。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE from_date&#x3D;&#39;1986-06-26&#39;;</span><br><span class="line">+----+-------------+--------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">| id | select_type | table  | type | possible_keys | key  | key_len | ref  | rows   | Extra       |</span><br><span class="line">+----+-------------+--------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | ALL  | NULL          | NULL | NULL    | NULL | 443308 | Using where |</span><br><span class="line">+----+-------------+--------+------+---------------+------+---------+------+--------+-------------+</span><br></pre></td></tr></table></figure>
<p>由于不是最左前缀，索引这样的查询显然用不到索引。</p>
<h3 id="情况五：匹配某列的前缀字符串。"><a href="#情况五：匹配某列的前缀字符串。" class="headerlink" title="情况五：匹配某列的前缀字符串。"></a>情况五：匹配某列的前缀字符串。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39; AND title LIKE &#39;Senior%&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | range | PRIMARY       | PRIMARY | 56      | NULL |    1 | Using where |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>此时可以用到索引，<del>但是如果通配符不是只出现在末尾，则无法使用索引。</del>（原文表述有误，如果通配符%不出现在开头，则可以用到索引，但根据具体情况不同可能只会用其中一个前缀）</p>
<h3 id="情况六：范围查询。"><a href="#情况六：范围查询。" class="headerlink" title="情况六：范围查询。"></a>情况六：范围查询。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no &lt; &#39;10010&#39; and title&#x3D;&#39;Senior Engineer&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | range | PRIMARY       | PRIMARY | 4       | NULL |   16 | Using where |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>范围列可以用到索引（必须是最左前缀），但是范围列后面的列无法用到索引。同时，索引最多用于一个范围列，因此如果查询条件中有两个范围列则无法全用到索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles</span><br><span class="line">WHERE emp_no &lt; &#39;10010&#39;</span><br><span class="line">AND title&#x3D;&#39;Senior Engineer&#39;</span><br><span class="line">AND from_date BETWEEN &#39;1986-01-01&#39; AND &#39;1986-12-31&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | range | PRIMARY       | PRIMARY | 4       | NULL |   16 | Using where |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>可以看到索引对第二个范围索引无能为力。这里特别要说明MySQL一个有意思的地方，那就是仅用explain可能无法区分范围索引和多值匹配，因为在type中这两者都显示为range。同时，用了“between”并不意味着就是范围查询，例如下面的查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles</span><br><span class="line">WHERE emp_no BETWEEN &#39;10001&#39; AND &#39;10010&#39;</span><br><span class="line">AND title&#x3D;&#39;Senior Engineer&#39;</span><br><span class="line">AND from_date BETWEEN &#39;1986-01-01&#39; AND &#39;1986-12-31&#39;;</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table  | type  | possible_keys | key     | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | range | PRIMARY       | PRIMARY | 59      | NULL |   16 | Using where |</span><br><span class="line">+----+-------------+--------+-------+---------------+---------+---------+------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>看起来是用了两个范围查询，但作用于emp_no上的“BETWEEN”实际上相当于“IN”，也就是说emp_no实际是多值精确匹配。可以看到这个查询用到了索引全部三个列。因此在MySQL中要谨慎地区分多值匹配和范围匹配，否则会对MySQL的行为产生困惑。</p>
<h3 id="情况七：查询条件中含有函数或表达式。"><a href="#情况七：查询条件中含有函数或表达式。" class="headerlink" title="情况七：查询条件中含有函数或表达式。"></a>情况七：查询条件中含有函数或表达式。</h3><p>很不幸，如果查询条件中含有函数或表达式，则MySQL不会为这列使用索引（虽然某些在数学意义上可以使用）。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no&#x3D;&#39;10001&#39; AND left(title, 6)&#x3D;&#39;Senior&#39;;</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table  | type | possible_keys | key     | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | ref  | PRIMARY       | PRIMARY | 4       | const |    1 | Using where |</span><br><span class="line">+----+-------------+--------+------+---------------+---------+---------+-------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>虽然这个查询和情况五中功能相同，但是由于使用了函数left，则无法为title列应用索引，而情况五中用LIKE则可以。再如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.titles WHERE emp_no - 1&#x3D;&#39;10000&#39;;</span><br><span class="line">+----+-------------+--------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">| id | select_type | table  | type | possible_keys | key  | key_len | ref  | rows   | Extra       |</span><br><span class="line">+----+-------------+--------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">|  1 | SIMPLE      | titles | ALL  | NULL          | NULL | NULL    | NULL | 443308 | Using where |</span><br><span class="line">+----+-------------+--------+------+---------------+------+---------+------+--------+-------------+</span><br></pre></td></tr></table></figure>
<p>显然这个查询等价于查询emp_no为10001的函数，但是由于查询条件是一个表达式，MySQL无法为其使用索引。看来MySQL还没有智能到自动优化常量表达式的程度，因此在写查询语句时尽量避免表达式出现在查询中，而是先手工私下代数运算，转换为无表达式的查询语句。</p>
<h2 id="索引选择性与前缀索引"><a href="#索引选择性与前缀索引" class="headerlink" title="索引选择性与前缀索引"></a>索引选择性与前缀索引</h2><p>既然索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？答案是否定的。因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。一般两种情况下不建议建索引。</p>
<p>第一种情况是表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，让查询做全表扫描就好了。至于多少条记录才算多，这个个人有个人的看法，我个人的经验是以2000作为分界线，记录数不超过 2000可以考虑不建索引，超过2000条可以酌情考虑索引。</p>
<p>另一种不建议建索引的情况是索引的选择性较低。所谓索引的选择性（Selectivity），是指不重复的索引值（也叫基数，Cardinality）与表记录数（#T）的比值：</p>
<p>Index Selectivity = Cardinality / #T</p>
<p>显然选择性的取值范围为(0, 1]，选择性越高的索引价值越大，这是由B+Tree的性质决定的。例如，上文用到的employees.titles表，如果title字段经常被单独查询，是否需要建索引，我们看一下它的选择性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT count(DISTINCT(title))&#x2F;count(*) AS Selectivity FROM employees.titles;</span><br><span class="line">+-------------+</span><br><span class="line">| Selectivity |</span><br><span class="line">+-------------+</span><br><span class="line">|      0.0000 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>
<p>title的选择性不足0.0001（精确值为0.00001579），所以实在没有什么必要为其单独建索引。</p>
<p>有一种与索引选择性有关的索引优化策略叫做前缀索引，就是用列的前缀代替整个列作为索引key，当前缀长度合适时，可以做到既使得前缀索引的选择性接近全列索引，同时因为索引key变短而减少了索引文件的大小和维护开销。下面以employees.employees表为例介绍前缀索引的选择和使用。</p>
<p>从图12可以看到employees表只有一个索引<emp_no>，那么如果我们想按名字搜索一个人，就只能全表扫描了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM employees.employees WHERE first_name&#x3D;&#39;Eric&#39; AND last_name&#x3D;&#39;Anido&#39;;</span><br><span class="line">+----+-------------+-----------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">| id | select_type | table     | type | possible_keys | key  | key_len | ref  | rows   | Extra       |</span><br><span class="line">+----+-------------+-----------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">|  1 | SIMPLE      | employees | ALL  | NULL          | NULL | NULL    | NULL | 300024 | Using where |</span><br><span class="line">+----+-------------+-----------+------+---------------+------+---------+------+--------+-------------+</span><br></pre></td></tr></table></figure>
<p>如果频繁按名字搜索员工，这样显然效率很低，因此我们可以考虑建索引。有两种选择，建<first_name>或&lt;first_name, last_name&gt;，看下两个索引的选择性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT count(DISTINCT(first_name))&#x2F;count(*) AS Selectivity FROM employees.employees;</span><br><span class="line">+-------------+</span><br><span class="line">| Selectivity |</span><br><span class="line">+-------------+</span><br><span class="line">|      0.0042 |</span><br><span class="line">+-------------+</span><br><span class="line">SELECT count(DISTINCT(concat(first_name, last_name)))&#x2F;count(*) AS Selectivity FROM employees.employees;</span><br><span class="line">+-------------+</span><br><span class="line">| Selectivity |</span><br><span class="line">+-------------+</span><br><span class="line">|      0.9313 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>
<p><first_name>显然选择性太低，&lt;first_name, last_name&gt;选择性很好，但是first_name和last_name加起来长度为30，有没有兼顾长度和选择性的办法？可以考虑用first_name和last_name的前几个字符建立索引，例如&lt;first_name, left(last_name, 3)&gt;，看看其选择性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT count(DISTINCT(concat(first_name, left(last_name, 3))))&#x2F;count(*) AS Selectivity FROM employees.employees;</span><br><span class="line">+-------------+</span><br><span class="line">| Selectivity |</span><br><span class="line">+-------------+</span><br><span class="line">|      0.7879 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>
<p>选择性还不错，但离0.9313还是有点距离，那么把last_name前缀加到4：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT count(DISTINCT(concat(first_name, left(last_name, 4))))&#x2F;count(*) AS Selectivity FROM employees.employees;</span><br><span class="line">+-------------+</span><br><span class="line">| Selectivity |</span><br><span class="line">+-------------+</span><br><span class="line">|      0.9007 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>
<p>这时选择性已经很理想了，而这个索引的长度只有18，比&lt;first_name, last_name&gt;短了接近一半，我们把这个前缀索引 建上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees.employees</span><br><span class="line">ADD INDEX &#96;first_name_last_name4&#96; (first_name, last_name(4));</span><br></pre></td></tr></table></figure>
<p>此时再执行一遍按名字查询，比较分析一下与建索引前的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW PROFILES;</span><br><span class="line">+----------+------------+---------------------------------------------------------------------------------+</span><br><span class="line">| Query_ID | Duration   | Query                                                                           |</span><br><span class="line">+----------+------------+---------------------------------------------------------------------------------+</span><br><span class="line">|       87 | 0.11941700 | SELECT * FROM employees.employees WHERE first_name&#x3D;&#39;Eric&#39; AND last_name&#x3D;&#39;Anido&#39; |</span><br><span class="line">|       90 | 0.00092400 | SELECT * FROM employees.employees WHERE first_name&#x3D;&#39;Eric&#39; AND last_name&#x3D;&#39;Anido&#39; |</span><br><span class="line">+----------+------------+---------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>性能的提升是显著的，查询速度提高了120多倍。</p>
<p>前缀索引兼顾索引大小和查询速度，但是其缺点是不能用于ORDER BY和GROUP BY操作，也不能用于Covering index（即当索引本身包含查询所需全部数据时，不再访问数据文件本身）。</p>
<h2 id="InnoDB的主键选择与插入优化"><a href="#InnoDB的主键选择与插入优化" class="headerlink" title="InnoDB的主键选择与插入优化"></a>InnoDB的主键选择与插入优化</h2><p>在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。</p>
<p>经常看到有帖子或博客讨论主键选择问题，有人建议使用业务无关的自增主键，有人觉得没有必要，完全可以使用如学号或身份证号这种唯一字段作为主键。不论支持哪种论点，大多数论据都是业务层面的。如果从数据库索引优化角度看，使用InnoDB引擎而不使用自增主键绝对是一个糟糕的主意。</p>
<p>上文讨论过InnoDB的索引实现，InnoDB使用聚集索引，数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）。</p>
<p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。如下图所示：</p>
<p><img src="13.png" alt="img"></p>
<p>图13</p>
<p>这样就会形成一个紧凑的索引结构，近似顺序填满。由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。</p>
<p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置：</p>
<p><img src="14.png" alt="img"></p>
<p>图14</p>
<p>此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p>
<p>因此，只要可以，请尽量在InnoDB上采用自增字段做主键。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
</search>
